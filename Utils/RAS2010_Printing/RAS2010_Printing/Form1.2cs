using System.Reflection;
using System.Runtime.InteropServices;
using System;
using System.IO;
using System.Xml;
using System.Drawing;
using System.Drawing.Printing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;
using System.Threading;
using System.Diagnostics;
using System.Globalization;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;
using CrystalDecisions.ReportAppServer;
using CrystalDecisions.ReportAppServer.ClientDoc;
using CrystalDecisions.ReportAppServer.Controllers;
using CrystalDecisions.ReportAppServer.ReportDefModel;
using CrystalDecisions.ReportAppServer.CommonControls;
using CrystalDecisions.ReportAppServer.CommLayer;
using CrystalDecisions.ReportAppServer.CommonObjectModel;
using CrystalDecisions.ReportAppServer.ObjectFactory;
using CrystalDecisions.ReportAppServer.Prompting;
using System.Data.OleDb;
using CrystalDecisions.ReportAppServer.DataSetConversion;
using CrystalDecisions.ReportAppServer.DataDefModel;
using CrystalDecisions.ReportSource;
//using CrystalDecisions.VSDesigner;
using CrystalDecisions.Windows.Forms;
//using CrystalDecisions.Web.Design;
//using System.Data.SqlClient;
using System.Runtime.InteropServices;
//using System.Net.Mail;
using CrystalDecisions.ReportAppServer.XmlSerialize;

namespace Unmanaged_RAS10_CSharp_Printers
{
	/// <summary>
	/// Summary description for Form1.
	/// </summary>
	public class frmMain : System.Windows.Forms.Form
	{
        CrystalDecisions.CrystalReports.Engine.ReportDocument rpt = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
        CrystalDecisions.ReportAppServer.ClientDoc.ISCDReportClientDocument rptClientDoc;

        CrystalDecisions.CrystalReports.Engine.ReportDocument rpt1 = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
        CrystalDecisions.ReportAppServer.ClientDoc.ISCDReportClientDocument rptClientDoc1;

        CrystalDecisions.ReportAppServer.ClientDoc.ISCDReportClientDocument reportClientDocument;
        CrystalDecisions.ReportAppServer.ClientDoc.ISCDReportClientDocument reportClientDocument2;

        System.Drawing.Printing.PrinterSettings sysPrinterSettings;
        System.Drawing.Printing.PageSettings sysPageSettings;
        CrystalDecisions.ReportAppServer.ReportDefModel.EromPageSettings eromPageSettings;
        CrystalDecisions.ReportAppServer.ReportDefModel.EromPrinterSettings eromPrinterSettings;

        #region CR Labels
        // this line is used with crystalras.exe running
		//ReportClientDocument rptClientDoc;
		internal System.Windows.Forms.Label Label2;
		internal System.Windows.Forms.Label Label5;
		internal System.Windows.Forms.Label Label6;
		internal System.Windows.Forms.Label Label1;
		internal System.Windows.Forms.Label Label4;
		internal System.Windows.Forms.Label Label3;
		internal System.Windows.Forms.ComboBox cboCurrentPaperSizes;
		internal System.Windows.Forms.ComboBox cboCurrentPrinters;
		internal System.Windows.Forms.ComboBox cboDefaultPaperTrays;
		internal System.Windows.Forms.ComboBox cboDefaultPaperSizes;
		internal System.Windows.Forms.ComboBox cboDefaultPrinters;
		internal System.Windows.Forms.ComboBox cboCurrentPaperTrays;
		private System.Windows.Forms.Button btnOpenReport;
		internal System.Windows.Forms.RadioButton rdoDefault;
		internal System.Windows.Forms.RadioButton rdoCurrent;
		internal System.Windows.Forms.GroupBox grpBoxCurrent;
		internal System.Windows.Forms.GroupBox grpBoxDefault;
		internal System.Windows.Forms.GroupBox grpBoxDefaultPaper;
		internal System.Windows.Forms.GroupBox grpBoxCurrentPaper;
		private System.Windows.Forms.OpenFileDialog openFileDialog;
		private System.Windows.Forms.SaveFileDialog saveFileDialog;
		private System.Windows.Forms.Button btnSetPrinter;
		private System.Windows.Forms.Button btnSaveRptAs;
		private System.Windows.Forms.Button btnPOController;
        private Button ViewReport;
        private Button SetData;
        private Button SetParam;
        private Button Export;
        private Button SaveAsDOC;
        private Button SetLogonInfo;
        private Button TextObjects;
        private Button FieldMapping;
        private Button AddChart;
        private Button PictureData;
        private Button IntSecurity;
        private Button GetFormula;
        private Button SetSchema;
        private Button TableToCommand;
        private Button SetToXML;
        private Button DataSet1;
        private Button SetToCSV;
        private Button ReplaceConnection;
        private CrystalReportViewer crystalReportViewer1;
        private Button ExportToRPTR;
        private Button ExportToPDFRAS;
        private GroupBox CRPageSetup;
        private TextBox PROrientation;
        private System.Windows.Forms.Label CROrientationLabel;
        private System.Windows.Forms.Label CRPaperSizeLabel;
        private TextBox CRPaperSize;
        private CheckBox Dissociate;
        private System.Windows.Forms.Label PageOptionslabel;
        private System.Windows.Forms.Label label7;
        private CheckBox CrNoPrinter;
        private TextBox CRBottom;
        private TextBox CRTop;
        private TextBox CRRight;
        private TextBox CRLeft;
        private System.Windows.Forms.Label BottomLabel;
        private System.Windows.Forms.Label Toplabel;
        private System.Windows.Forms.Label Rightlabel;
        private System.Windows.Forms.Label Leftlabel;
        private System.Windows.Forms.Label Marginslabel;
        private Button btnCloserpt;
        private TextBox CRPrinterName;
        private System.Windows.Forms.Label PrinterNamelabel;
        private Button ExportToStream;
        private System.Windows.Forms.Label ReportVersion;
        private TextBox btnReportVersion;
        private System.Windows.Forms.Label RecordSelectionForm;
        private TextBox btnRecordSelectionForm;
        private TextBox btnReportName;
        private System.Windows.Forms.Label ReportName;
        private Button PageEvent;
        private System.Windows.Forms.Label rtnSQLStatement;
        private RichTextBox richTextBox1;
        private RichTextBox btnReportObjects;
        private System.Windows.Forms.Label rtnReportObjects;
        internal ComboBox ReportObjectComboBox1;
        private Button TableLinks;
        private Button SetPCDatabase;
        private Button CommandTable;
        private System.Windows.Forms.Label PRTTray;
        private TextBox CRPaperTray;
        private Button Dan;
        private GroupBox grpBoxRPTOptions;
        private CheckBox checkBox9;
        private CheckBox checkBox10;
        private CheckBox checkBox11;
        private CheckBox checkBox12;
        private CheckBox checkBox13;
        private CheckBox checkBox14;
        private CheckBox checkBox15;
        private CheckBox checkBox16;
        private CheckBox checkBox5;
        private CheckBox checkBox6;
        private CheckBox checkBox7;
        private CheckBox checkBox8;
        private CheckBox checkBox2;
        private CheckBox checkBox1;
        private TextBox crNumOfCachedBatches;
        private TextBox crNumOfBrowsingRecords;
        private TextBox crMaxNumOfRecords;
        private TextBox crRowsetBatchSize;
        private CheckBox checkBox4;
        private RichTextBox richTextBox2;
        private System.Windows.Forms.Label crConvertDateTimeType;
        private Button btnSetChanges;
        private ComboBox cbConvertDateTimeType;
        private System.Windows.Forms.Label crPreferredView;
        private ComboBox cbPreferredView;
        private CheckBox checkBox3;
        private CheckBox checkBox17;
        private Button btnPrintToPrinter;
        private System.Windows.Forms.Label label8;
        private TextBox btnCount;
        private TextBox btnReportStyle;
        private System.Windows.Forms.Label label9;
        private TextBox btnSavedPrinterName;
        private System.Windows.Forms.Label label10;
        private System.Windows.Forms.Label label11;
        private TextBox btnReportKind;
        private TextBox btnRecordCount;
        private System.Windows.Forms.Label label12;
        private System.Windows.Forms.Label label13;
        private ComboBox GetPreviewPagesStartwith;
        private Button SetPreviewPagesStartWith;
        internal ComboBox cboCurrentMediaType;
        internal System.Windows.Forms.Label label14;
        private CheckBox chkUseRAS;
        private Button btrFileDSN;
        private Button btnAddSubreport;
        private Button btnAddXMLDataSource;
        private Button btnRASCopyTo;
        private System.Windows.Forms.Label label15;
        private TextBox btnDBDriver;
        private RichTextBox btnSQLStatement;
        private CheckBox btnHasSavedData;
        private System.Windows.Forms.Label label16;
        private TextBox txtRecordCount;
        private TextBox btnPaperSizeName;
        private TextBox btrDataFile;
        private TextBox btrSearchPath;
        private ListBox lstCeLocale;
        private ListBox lstExportFormatType;
        private Label label17;
        private Button btnRasOpen;
        private Label btrRuntimeVersion;
        private TextBox txtRuntimeVersion;
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;
        private CheckBox btrVerifyDatabase;
        private CheckBox chkSameAsCELocale;
        #endregion CR Labels

        string CRVer;
        private TextBox btrFileLocation;
        private GroupBox groupBox1;
        private TextBox btrPassword;
        int myLCID;
        private TextBox lblRPTRev;
        private Label label18;
        float isMetric = 0;

		public frmMain()
		{
			//
			// Required for Windows Form Designer support
			//
			InitializeComponent();


            if (System.Globalization.RegionInfo.CurrentRegion.IsMetric)
                isMetric = 567;
            else
                isMetric = 1440;

            Array valArray = Enum.GetValues(typeof(CrystalDecisions.ReportAppServer.CommonControls.CeLocale));
            foreach (object obj in valArray)
            {
                lstCeLocale.Items.Add(obj);
            }

            Array valArray1 = Enum.GetValues(typeof(CrReportExportFormatEnum));

            foreach (object obj in valArray1)
            {
                lstExportFormatType.Items.Add(obj);
            }

            foreach (Assembly MyVerison in AppDomain.CurrentDomain.GetAssemblies())
            {
                if (MyVerison.FullName.Substring(0, 38) == "CrystalDecisions.CrystalReports.Engine")
                {
                    //File:             C:\Windows\assembly\GAC_MSIL\CrystalDecisions.CrystalReports.Engine\13.0.2000.0__692fbea5521e1304\CrystalDecisions.CrystalReports.Engine.dll
                    //InternalName:     Crystal Reports
                    //OriginalFilename: 
                    //FileVersion:      13.0.9.1312
                    //FileDescription:  Crystal Reports
                    //Product:          SBOP Crystal Reports
                    //ProductVersion:   13.0.9.1312
                    //Debug:            False
                    //Patched:          False
                    //PreRelease:       False
                    //PrivateBuild:     False
                    //SpecialBuild:     False
                    //Language:         English (United States)

                    System.Diagnostics.FileVersionInfo fileVersionInfo = System.Diagnostics.FileVersionInfo.GetVersionInfo(MyVerison.Location);
                    txtRuntimeVersion.Text += fileVersionInfo.FileVersion.ToString();
                    // check if CrsytalDecisions.Enterprise dll's can be loaded ( Anything but Cortez - managed reporting )
                    if (fileVersionInfo.FileVersion.Substring(0, 2) == "13")
                    {
                        btnRasOpen.Enabled = false;
                    }
                    CRVer = fileVersionInfo.FileVersion.Substring(0, 2);
                    return;
                }
            }

            //VB code
            //Imports CrystalDecisions.CrystalReports.Engine
            //Imports CrystalDecisions.Shared
            //Imports System.Reflection
            //Imports System.Runtime.InteropServices

            //Public Class Form1

            //    Private Sub CrystalReportViewer1_Load(sender As Object, e As EventArgs) Handles CrystalReportViewer1.Load

            //        For Each MyVerison As Assembly In AppDomain.CurrentDomain.GetAssemblies()
            //            If MyVerison.FullName.Substring(0, 38) = "CrystalDecisions.CrystalReports.Engine" Then
            //                'File:             C:\Windows\assembly\GAC_MSIL\CrystalDecisions.CrystalReports.Engine\13.0.2000.0__692fbea5521e1304\CrystalDecisions.CrystalReports.Engine.dll
            //                'InternalName:     Crystal Reports
            //                'OriginalFilename: 
            //                'FileVersion:      13.0.9.1312
            //                'FileDescription:  Crystal Reports
            //                'Product:          SBOP Crystal Reports
            //                'ProductVersion:   13.0.9.1312
            //                'Debug:            False
            //                'Patched:          False
            //                'PreRelease:       False
            //                'PrivateBuild:     False
            //                'SpecialBuild:     False
            //                'Language:         English (United States)

            //                Dim fileVersionInfo As System.Diagnostics.FileVersionInfo = System.Diagnostics.FileVersionInfo.GetVersionInfo(MyVerison.Location)
            //                MessageBox.Show(fileVersionInfo.FileVersion.ToString())

            //                Return
            //            End If
            //        Next


            //        Dim Report As New CrystalDecisions.CrystalReports.Engine.ReportDocument
            //        Report.Load("C:\reports\formulas.rpt")
            //        CrystalReportViewer1.ReportSource = Report
            //    End Sub

            //End Class 


			// 
			// TODO: Add any constructor code after InitializeComponent call
			//
		}

        CrystalDecisions.ReportAppServer.CommonControls.CeLocale myceLocale;

        //private void Form1_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        //{
        //    //this.button.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.button_KeyPress);

        //    // if (e.KeyCode == Keys.F8)
        //    //{
        //    //    crystalReportViewer1.ReportSource = rpt;

        //    //    // set up the format export types:
        //    //    int myFOpts = (int)(CrystalDecisions.Shared.ViewerExportFormats.RptFormat | CrystalDecisions.Shared.ViewerExportFormats.PdfFormat | CrystalDecisions.Shared.ViewerExportFormats.RptrFormat | CrystalDecisions.Shared.ViewerExportFormats.XLSXFormat);

        //    //    crystalReportViewer1.AllowedExportFormats = myFOpts;
        //    //}

        //}

        //private void Form1_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        //{
        //    if (e.KeyCode == Keys.V && (e.Control))
        //        e.Handled = true;
        //}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>

		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if (components != null) 
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
            this.rdoDefault = new System.Windows.Forms.RadioButton();
            this.rdoCurrent = new System.Windows.Forms.RadioButton();
            this.grpBoxDefault = new System.Windows.Forms.GroupBox();
            this.Label2 = new System.Windows.Forms.Label();
            this.grpBoxDefaultPaper = new System.Windows.Forms.GroupBox();
            this.Label5 = new System.Windows.Forms.Label();
            this.Label6 = new System.Windows.Forms.Label();
            this.cboDefaultPaperTrays = new System.Windows.Forms.ComboBox();
            this.cboDefaultPaperSizes = new System.Windows.Forms.ComboBox();
            this.cboDefaultPrinters = new System.Windows.Forms.ComboBox();
            this.grpBoxCurrent = new System.Windows.Forms.GroupBox();
            this.Label1 = new System.Windows.Forms.Label();
            this.grpBoxCurrentPaper = new System.Windows.Forms.GroupBox();
            this.cboCurrentMediaType = new System.Windows.Forms.ComboBox();
            this.label14 = new System.Windows.Forms.Label();
            this.Label4 = new System.Windows.Forms.Label();
            this.Label3 = new System.Windows.Forms.Label();
            this.cboCurrentPaperTrays = new System.Windows.Forms.ComboBox();
            this.cboCurrentPaperSizes = new System.Windows.Forms.ComboBox();
            this.cboCurrentPrinters = new System.Windows.Forms.ComboBox();
            this.btnSetPrinter = new System.Windows.Forms.Button();
            this.btnOpenReport = new System.Windows.Forms.Button();
            this.openFileDialog = new System.Windows.Forms.OpenFileDialog();
            this.btnSaveRptAs = new System.Windows.Forms.Button();
            this.saveFileDialog = new System.Windows.Forms.SaveFileDialog();
            this.btnPOController = new System.Windows.Forms.Button();
            this.ViewReport = new System.Windows.Forms.Button();
            this.SetData = new System.Windows.Forms.Button();
            this.SetParam = new System.Windows.Forms.Button();
            this.Export = new System.Windows.Forms.Button();
            this.SaveAsDOC = new System.Windows.Forms.Button();
            this.SetLogonInfo = new System.Windows.Forms.Button();
            this.TextObjects = new System.Windows.Forms.Button();
            this.FieldMapping = new System.Windows.Forms.Button();
            this.AddChart = new System.Windows.Forms.Button();
            this.PictureData = new System.Windows.Forms.Button();
            this.IntSecurity = new System.Windows.Forms.Button();
            this.GetFormula = new System.Windows.Forms.Button();
            this.SetSchema = new System.Windows.Forms.Button();
            this.TableToCommand = new System.Windows.Forms.Button();
            this.SetToXML = new System.Windows.Forms.Button();
            this.DataSet1 = new System.Windows.Forms.Button();
            this.SetToCSV = new System.Windows.Forms.Button();
            this.ReplaceConnection = new System.Windows.Forms.Button();
            this.crystalReportViewer1 = new CrystalDecisions.Windows.Forms.CrystalReportViewer();
            this.ExportToRPTR = new System.Windows.Forms.Button();
            this.ExportToPDFRAS = new System.Windows.Forms.Button();
            this.CRPageSetup = new System.Windows.Forms.GroupBox();
            this.btnPaperSizeName = new System.Windows.Forms.TextBox();
            this.btnSavedPrinterName = new System.Windows.Forms.TextBox();
            this.label10 = new System.Windows.Forms.Label();
            this.PRTTray = new System.Windows.Forms.Label();
            this.CRPaperTray = new System.Windows.Forms.TextBox();
            this.CRPrinterName = new System.Windows.Forms.TextBox();
            this.PrinterNamelabel = new System.Windows.Forms.Label();
            this.CRBottom = new System.Windows.Forms.TextBox();
            this.CRTop = new System.Windows.Forms.TextBox();
            this.CRRight = new System.Windows.Forms.TextBox();
            this.CRLeft = new System.Windows.Forms.TextBox();
            this.BottomLabel = new System.Windows.Forms.Label();
            this.Toplabel = new System.Windows.Forms.Label();
            this.Rightlabel = new System.Windows.Forms.Label();
            this.Leftlabel = new System.Windows.Forms.Label();
            this.Marginslabel = new System.Windows.Forms.Label();
            this.label13 = new System.Windows.Forms.Label();
            this.PROrientation = new System.Windows.Forms.TextBox();
            this.CROrientationLabel = new System.Windows.Forms.Label();
            this.CRPaperSizeLabel = new System.Windows.Forms.Label();
            this.CRPaperSize = new System.Windows.Forms.TextBox();
            this.Dissociate = new System.Windows.Forms.CheckBox();
            this.PageOptionslabel = new System.Windows.Forms.Label();
            this.label7 = new System.Windows.Forms.Label();
            this.CrNoPrinter = new System.Windows.Forms.CheckBox();
            this.btnCloserpt = new System.Windows.Forms.Button();
            this.ExportToStream = new System.Windows.Forms.Button();
            this.ReportVersion = new System.Windows.Forms.Label();
            this.btnReportVersion = new System.Windows.Forms.TextBox();
            this.RecordSelectionForm = new System.Windows.Forms.Label();
            this.btnRecordSelectionForm = new System.Windows.Forms.TextBox();
            this.btnReportName = new System.Windows.Forms.TextBox();
            this.ReportName = new System.Windows.Forms.Label();
            this.PageEvent = new System.Windows.Forms.Button();
            this.rtnSQLStatement = new System.Windows.Forms.Label();
            this.richTextBox1 = new System.Windows.Forms.RichTextBox();
            this.btnReportObjects = new System.Windows.Forms.RichTextBox();
            this.rtnReportObjects = new System.Windows.Forms.Label();
            this.ReportObjectComboBox1 = new System.Windows.Forms.ComboBox();
            this.TableLinks = new System.Windows.Forms.Button();
            this.SetPCDatabase = new System.Windows.Forms.Button();
            this.CommandTable = new System.Windows.Forms.Button();
            this.Dan = new System.Windows.Forms.Button();
            this.grpBoxRPTOptions = new System.Windows.Forms.GroupBox();
            this.label16 = new System.Windows.Forms.Label();
            this.txtRecordCount = new System.Windows.Forms.TextBox();
            this.btnHasSavedData = new System.Windows.Forms.CheckBox();
            this.btnReportStyle = new System.Windows.Forms.TextBox();
            this.label9 = new System.Windows.Forms.Label();
            this.checkBox3 = new System.Windows.Forms.CheckBox();
            this.checkBox17 = new System.Windows.Forms.CheckBox();
            this.cbPreferredView = new System.Windows.Forms.ComboBox();
            this.crPreferredView = new System.Windows.Forms.Label();
            this.cbConvertDateTimeType = new System.Windows.Forms.ComboBox();
            this.btnSetChanges = new System.Windows.Forms.Button();
            this.crConvertDateTimeType = new System.Windows.Forms.Label();
            this.richTextBox2 = new System.Windows.Forms.RichTextBox();
            this.crRowsetBatchSize = new System.Windows.Forms.TextBox();
            this.crNumOfCachedBatches = new System.Windows.Forms.TextBox();
            this.crNumOfBrowsingRecords = new System.Windows.Forms.TextBox();
            this.crMaxNumOfRecords = new System.Windows.Forms.TextBox();
            this.checkBox9 = new System.Windows.Forms.CheckBox();
            this.checkBox10 = new System.Windows.Forms.CheckBox();
            this.checkBox11 = new System.Windows.Forms.CheckBox();
            this.checkBox12 = new System.Windows.Forms.CheckBox();
            this.checkBox13 = new System.Windows.Forms.CheckBox();
            this.checkBox14 = new System.Windows.Forms.CheckBox();
            this.checkBox15 = new System.Windows.Forms.CheckBox();
            this.checkBox16 = new System.Windows.Forms.CheckBox();
            this.checkBox5 = new System.Windows.Forms.CheckBox();
            this.checkBox6 = new System.Windows.Forms.CheckBox();
            this.checkBox7 = new System.Windows.Forms.CheckBox();
            this.checkBox8 = new System.Windows.Forms.CheckBox();
            this.checkBox4 = new System.Windows.Forms.CheckBox();
            this.checkBox2 = new System.Windows.Forms.CheckBox();
            this.checkBox1 = new System.Windows.Forms.CheckBox();
            this.btnPrintToPrinter = new System.Windows.Forms.Button();
            this.label8 = new System.Windows.Forms.Label();
            this.btnCount = new System.Windows.Forms.TextBox();
            this.label11 = new System.Windows.Forms.Label();
            this.btnReportKind = new System.Windows.Forms.TextBox();
            this.btnRecordCount = new System.Windows.Forms.TextBox();
            this.label12 = new System.Windows.Forms.Label();
            this.GetPreviewPagesStartwith = new System.Windows.Forms.ComboBox();
            this.SetPreviewPagesStartWith = new System.Windows.Forms.Button();
            this.chkUseRAS = new System.Windows.Forms.CheckBox();
            this.btrFileDSN = new System.Windows.Forms.Button();
            this.btnAddSubreport = new System.Windows.Forms.Button();
            this.btnAddXMLDataSource = new System.Windows.Forms.Button();
            this.btnRASCopyTo = new System.Windows.Forms.Button();
            this.label15 = new System.Windows.Forms.Label();
            this.btnDBDriver = new System.Windows.Forms.TextBox();
            this.btnSQLStatement = new System.Windows.Forms.RichTextBox();
            this.btrDataFile = new System.Windows.Forms.TextBox();
            this.btrSearchPath = new System.Windows.Forms.TextBox();
            this.lstCeLocale = new System.Windows.Forms.ListBox();
            this.lstExportFormatType = new System.Windows.Forms.ListBox();
            this.label17 = new System.Windows.Forms.Label();
            this.btnRasOpen = new System.Windows.Forms.Button();
            this.btrRuntimeVersion = new System.Windows.Forms.Label();
            this.txtRuntimeVersion = new System.Windows.Forms.TextBox();
            this.btrVerifyDatabase = new System.Windows.Forms.CheckBox();
            this.chkSameAsCELocale = new System.Windows.Forms.CheckBox();
            this.btrFileLocation = new System.Windows.Forms.TextBox();
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.btrPassword = new System.Windows.Forms.TextBox();
            this.lblRPTRev = new System.Windows.Forms.TextBox();
            this.label18 = new System.Windows.Forms.Label();
            this.grpBoxDefault.SuspendLayout();
            this.grpBoxDefaultPaper.SuspendLayout();
            this.grpBoxCurrent.SuspendLayout();
            this.grpBoxCurrentPaper.SuspendLayout();
            this.CRPageSetup.SuspendLayout();
            this.grpBoxRPTOptions.SuspendLayout();
            this.groupBox1.SuspendLayout();
            this.SuspendLayout();
            // 
            // rdoDefault
            // 
            this.rdoDefault.Location = new System.Drawing.Point(280, 8);
            this.rdoDefault.Name = "rdoDefault";
            this.rdoDefault.Size = new System.Drawing.Size(120, 16);
            this.rdoDefault.TabIndex = 9;
            this.rdoDefault.Text = "Use these options";
            this.rdoDefault.CheckedChanged += new System.EventHandler(this.rdoDefault_CheckedChanged);
            // 
            // rdoCurrent
            // 
            this.rdoCurrent.Checked = true;
            this.rdoCurrent.Location = new System.Drawing.Point(8, 8);
            this.rdoCurrent.Name = "rdoCurrent";
            this.rdoCurrent.Size = new System.Drawing.Size(120, 16);
            this.rdoCurrent.TabIndex = 8;
            this.rdoCurrent.TabStop = true;
            this.rdoCurrent.Text = "Use these options";
            this.rdoCurrent.CheckedChanged += new System.EventHandler(this.rdoCurrent_CheckedChanged);
            // 
            // grpBoxDefault
            // 
            this.grpBoxDefault.Controls.Add(this.Label2);
            this.grpBoxDefault.Controls.Add(this.grpBoxDefaultPaper);
            this.grpBoxDefault.Controls.Add(this.cboDefaultPrinters);
            this.grpBoxDefault.Enabled = false;
            this.grpBoxDefault.Location = new System.Drawing.Point(280, 24);
            this.grpBoxDefault.Name = "grpBoxDefault";
            this.grpBoxDefault.Size = new System.Drawing.Size(256, 192);
            this.grpBoxDefault.TabIndex = 7;
            this.grpBoxDefault.TabStop = false;
            this.grpBoxDefault.Text = "Default User:";
            // 
            // Label2
            // 
            this.Label2.Enabled = false;
            this.Label2.Location = new System.Drawing.Point(16, 24);
            this.Label2.Name = "Label2";
            this.Label2.Size = new System.Drawing.Size(48, 16);
            this.Label2.TabIndex = 6;
            this.Label2.Text = "Printer:";
            // 
            // grpBoxDefaultPaper
            // 
            this.grpBoxDefaultPaper.Controls.Add(this.Label5);
            this.grpBoxDefaultPaper.Controls.Add(this.Label6);
            this.grpBoxDefaultPaper.Controls.Add(this.cboDefaultPaperTrays);
            this.grpBoxDefaultPaper.Controls.Add(this.cboDefaultPaperSizes);
            this.grpBoxDefaultPaper.Enabled = false;
            this.grpBoxDefaultPaper.Location = new System.Drawing.Point(8, 80);
            this.grpBoxDefaultPaper.Name = "grpBoxDefaultPaper";
            this.grpBoxDefaultPaper.Size = new System.Drawing.Size(240, 104);
            this.grpBoxDefaultPaper.TabIndex = 5;
            this.grpBoxDefaultPaper.TabStop = false;
            this.grpBoxDefaultPaper.Text = "paper:";
            // 
            // Label5
            // 
            this.Label5.Enabled = false;
            this.Label5.Location = new System.Drawing.Point(16, 54);
            this.Label5.Name = "Label5";
            this.Label5.Size = new System.Drawing.Size(40, 16);
            this.Label5.TabIndex = 7;
            this.Label5.Text = "source";
            // 
            // Label6
            // 
            this.Label6.Enabled = false;
            this.Label6.Location = new System.Drawing.Point(16, 14);
            this.Label6.Name = "Label6";
            this.Label6.Size = new System.Drawing.Size(40, 16);
            this.Label6.TabIndex = 6;
            this.Label6.Text = "size";
            // 
            // cboDefaultPaperTrays
            // 
            this.cboDefaultPaperTrays.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cboDefaultPaperTrays.Enabled = false;
            this.cboDefaultPaperTrays.Location = new System.Drawing.Point(16, 70);
            this.cboDefaultPaperTrays.Name = "cboDefaultPaperTrays";
            this.cboDefaultPaperTrays.Size = new System.Drawing.Size(216, 21);
            this.cboDefaultPaperTrays.TabIndex = 5;
            // 
            // cboDefaultPaperSizes
            // 
            this.cboDefaultPaperSizes.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cboDefaultPaperSizes.Enabled = false;
            this.cboDefaultPaperSizes.Location = new System.Drawing.Point(16, 30);
            this.cboDefaultPaperSizes.Name = "cboDefaultPaperSizes";
            this.cboDefaultPaperSizes.Size = new System.Drawing.Size(216, 21);
            this.cboDefaultPaperSizes.TabIndex = 4;
            // 
            // cboDefaultPrinters
            // 
            this.cboDefaultPrinters.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cboDefaultPrinters.Enabled = false;
            this.cboDefaultPrinters.Location = new System.Drawing.Point(24, 40);
            this.cboDefaultPrinters.Name = "cboDefaultPrinters";
            this.cboDefaultPrinters.Size = new System.Drawing.Size(216, 21);
            this.cboDefaultPrinters.TabIndex = 4;
            this.cboDefaultPrinters.SelectedIndexChanged += new System.EventHandler(this.cboDefaultPrinters_SelectedIndexChanged);
            // 
            // grpBoxCurrent
            // 
            this.grpBoxCurrent.Controls.Add(this.Label1);
            this.grpBoxCurrent.Controls.Add(this.grpBoxCurrentPaper);
            this.grpBoxCurrent.Controls.Add(this.cboCurrentPrinters);
            this.grpBoxCurrent.Location = new System.Drawing.Point(8, 24);
            this.grpBoxCurrent.Name = "grpBoxCurrent";
            this.grpBoxCurrent.Size = new System.Drawing.Size(256, 196);
            this.grpBoxCurrent.TabIndex = 6;
            this.grpBoxCurrent.TabStop = false;
            this.grpBoxCurrent.Text = "Current User:";
            this.grpBoxCurrent.Enter += new System.EventHandler(this.grpBoxCurrent_Enter);
            // 
            // Label1
            // 
            this.Label1.Location = new System.Drawing.Point(6, 14);
            this.Label1.Name = "Label1";
            this.Label1.Size = new System.Drawing.Size(48, 16);
            this.Label1.TabIndex = 3;
            this.Label1.Text = "Printer:";
            // 
            // grpBoxCurrentPaper
            // 
            this.grpBoxCurrentPaper.Controls.Add(this.cboCurrentMediaType);
            this.grpBoxCurrentPaper.Controls.Add(this.label14);
            this.grpBoxCurrentPaper.Controls.Add(this.Label4);
            this.grpBoxCurrentPaper.Controls.Add(this.Label3);
            this.grpBoxCurrentPaper.Controls.Add(this.cboCurrentPaperTrays);
            this.grpBoxCurrentPaper.Controls.Add(this.cboCurrentPaperSizes);
            this.grpBoxCurrentPaper.Location = new System.Drawing.Point(8, 57);
            this.grpBoxCurrentPaper.Name = "grpBoxCurrentPaper";
            this.grpBoxCurrentPaper.Size = new System.Drawing.Size(240, 139);
            this.grpBoxCurrentPaper.TabIndex = 2;
            this.grpBoxCurrentPaper.TabStop = false;
            this.grpBoxCurrentPaper.Text = "paper:";
            // 
            // cboCurrentMediaType
            // 
            this.cboCurrentMediaType.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cboCurrentMediaType.Location = new System.Drawing.Point(16, 112);
            this.cboCurrentMediaType.Name = "cboCurrentMediaType";
            this.cboCurrentMediaType.Size = new System.Drawing.Size(216, 21);
            this.cboCurrentMediaType.TabIndex = 5;
            // 
            // label14
            // 
            this.label14.Location = new System.Drawing.Point(16, 92);
            this.label14.Name = "label14";
            this.label14.Size = new System.Drawing.Size(64, 16);
            this.label14.TabIndex = 4;
            this.label14.Text = "media type";
            // 
            // Label4
            // 
            this.Label4.Location = new System.Drawing.Point(16, 51);
            this.Label4.Name = "Label4";
            this.Label4.Size = new System.Drawing.Size(40, 16);
            this.Label4.TabIndex = 3;
            this.Label4.Text = "source";
            // 
            // Label3
            // 
            this.Label3.Location = new System.Drawing.Point(16, 10);
            this.Label3.Name = "Label3";
            this.Label3.Size = new System.Drawing.Size(40, 16);
            this.Label3.TabIndex = 2;
            this.Label3.Text = "size";
            // 
            // cboCurrentPaperTrays
            // 
            this.cboCurrentPaperTrays.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cboCurrentPaperTrays.Location = new System.Drawing.Point(16, 68);
            this.cboCurrentPaperTrays.Name = "cboCurrentPaperTrays";
            this.cboCurrentPaperTrays.Size = new System.Drawing.Size(216, 21);
            this.cboCurrentPaperTrays.TabIndex = 1;
            // 
            // cboCurrentPaperSizes
            // 
            this.cboCurrentPaperSizes.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cboCurrentPaperSizes.Location = new System.Drawing.Point(16, 27);
            this.cboCurrentPaperSizes.Name = "cboCurrentPaperSizes";
            this.cboCurrentPaperSizes.Size = new System.Drawing.Size(216, 21);
            this.cboCurrentPaperSizes.TabIndex = 0;
            // 
            // cboCurrentPrinters
            // 
            this.cboCurrentPrinters.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.cboCurrentPrinters.Location = new System.Drawing.Point(25, 31);
            this.cboCurrentPrinters.Name = "cboCurrentPrinters";
            this.cboCurrentPrinters.Size = new System.Drawing.Size(216, 21);
            this.cboCurrentPrinters.TabIndex = 1;
            this.cboCurrentPrinters.SelectedIndexChanged += new System.EventHandler(this.cboCurrentPrinters_SelectedIndexChanged);
            // 
            // btnSetPrinter
            // 
            this.btnSetPrinter.Enabled = false;
            this.btnSetPrinter.Location = new System.Drawing.Point(241, 226);
            this.btnSetPrinter.Name = "btnSetPrinter";
            this.btnSetPrinter.Size = new System.Drawing.Size(72, 24);
            this.btnSetPrinter.TabIndex = 10;
            this.btnSetPrinter.Text = "set printer";
            this.btnSetPrinter.Click += new System.EventHandler(this.btnSetPrinter_Click);
            // 
            // btnOpenReport
            // 
            this.btnOpenReport.Location = new System.Drawing.Point(8, 226);
            this.btnOpenReport.Name = "btnOpenReport";
            this.btnOpenReport.Size = new System.Drawing.Size(72, 24);
            this.btnOpenReport.TabIndex = 11;
            this.btnOpenReport.Text = "open rpt...";
            this.btnOpenReport.Click += new System.EventHandler(this.btnOpenReport_Click);
            // 
            // btnSaveRptAs
            // 
            this.btnSaveRptAs.Enabled = false;
            this.btnSaveRptAs.Location = new System.Drawing.Point(316, 226);
            this.btnSaveRptAs.Name = "btnSaveRptAs";
            this.btnSaveRptAs.Size = new System.Drawing.Size(72, 24);
            this.btnSaveRptAs.TabIndex = 12;
            this.btnSaveRptAs.Text = "save as...";
            this.btnSaveRptAs.Click += new System.EventHandler(this.btnSaveReportAs_Click);
            // 
            // btnPOController
            // 
            this.btnPOController.Enabled = false;
            this.btnPOController.Location = new System.Drawing.Point(391, 226);
            this.btnPOController.Name = "btnPOController";
            this.btnPOController.Size = new System.Drawing.Size(82, 24);
            this.btnPOController.TabIndex = 13;
            this.btnPOController.Text = "POController";
            this.btnPOController.Click += new System.EventHandler(this.btnPOController_Click_1);
            // 
            // ViewReport
            // 
            this.ViewReport.Enabled = false;
            this.ViewReport.Location = new System.Drawing.Point(158, 226);
            this.ViewReport.Name = "ViewReport";
            this.ViewReport.Size = new System.Drawing.Size(80, 24);
            this.ViewReport.TabIndex = 15;
            this.ViewReport.Text = "View Report";
            this.ViewReport.Click += new System.EventHandler(this.ViewReport_Click);
            // 
            // SetData
            // 
            this.SetData.Location = new System.Drawing.Point(782, 36);
            this.SetData.Name = "SetData";
            this.SetData.Size = new System.Drawing.Size(75, 23);
            this.SetData.TabIndex = 17;
            this.SetData.Text = "Set Data";
            this.SetData.Click += new System.EventHandler(this.SetData_Click);
            // 
            // SetParam
            // 
            this.SetParam.Location = new System.Drawing.Point(782, 64);
            this.SetParam.Name = "SetParam";
            this.SetParam.Size = new System.Drawing.Size(75, 23);
            this.SetParam.TabIndex = 18;
            this.SetParam.Text = "Set Param";
            this.SetParam.UseVisualStyleBackColor = true;
            this.SetParam.Click += new System.EventHandler(this.SetParam_Click);
            // 
            // Export
            // 
            this.Export.Location = new System.Drawing.Point(782, 120);
            this.Export.Name = "Export";
            this.Export.Size = new System.Drawing.Size(75, 23);
            this.Export.TabIndex = 19;
            this.Export.Text = "Export";
            this.Export.UseVisualStyleBackColor = true;
            this.Export.Click += new System.EventHandler(this.Export_Click);
            // 
            // SaveAsDOC
            // 
            this.SaveAsDOC.Location = new System.Drawing.Point(782, 206);
            this.SaveAsDOC.Name = "SaveAsDOC";
            this.SaveAsDOC.Size = new System.Drawing.Size(83, 23);
            this.SaveAsDOC.TabIndex = 20;
            this.SaveAsDOC.Text = "SaveAs DOC";
            this.SaveAsDOC.UseVisualStyleBackColor = true;
            this.SaveAsDOC.Click += new System.EventHandler(this.SaveAsDOC_Click);
            // 
            // SetLogonInfo
            // 
            this.SetLogonInfo.Location = new System.Drawing.Point(782, 8);
            this.SetLogonInfo.Name = "SetLogonInfo";
            this.SetLogonInfo.Size = new System.Drawing.Size(75, 23);
            this.SetLogonInfo.TabIndex = 21;
            this.SetLogonInfo.Text = "Set Logon";
            this.SetLogonInfo.UseVisualStyleBackColor = true;
            this.SetLogonInfo.Click += new System.EventHandler(this.SetLogonInfo_Click);
            // 
            // TextObjects
            // 
            this.TextObjects.Location = new System.Drawing.Point(782, 92);
            this.TextObjects.Name = "TextObjects";
            this.TextObjects.Size = new System.Drawing.Size(75, 23);
            this.TextObjects.TabIndex = 22;
            this.TextObjects.Text = "Text Box";
            this.TextObjects.UseVisualStyleBackColor = true;
            this.TextObjects.Click += new System.EventHandler(this.TextObjects_Click);
            // 
            // FieldMapping
            // 
            this.FieldMapping.Location = new System.Drawing.Point(873, 8);
            this.FieldMapping.Name = "FieldMapping";
            this.FieldMapping.Size = new System.Drawing.Size(84, 23);
            this.FieldMapping.TabIndex = 23;
            this.FieldMapping.Text = "Field Mapping";
            this.FieldMapping.UseVisualStyleBackColor = true;
            this.FieldMapping.Click += new System.EventHandler(this.FieldMapping_Click);
            // 
            // AddChart
            // 
            this.AddChart.Location = new System.Drawing.Point(882, 37);
            this.AddChart.Name = "AddChart";
            this.AddChart.Size = new System.Drawing.Size(75, 23);
            this.AddChart.TabIndex = 24;
            this.AddChart.Text = "Add Chart";
            this.AddChart.UseVisualStyleBackColor = true;
            this.AddChart.Click += new System.EventHandler(this.AddChart_Click);
            // 
            // PictureData
            // 
            this.PictureData.Location = new System.Drawing.Point(882, 66);
            this.PictureData.Name = "PictureData";
            this.PictureData.Size = new System.Drawing.Size(75, 23);
            this.PictureData.TabIndex = 25;
            this.PictureData.Text = "Picture Data";
            this.PictureData.UseVisualStyleBackColor = true;
            this.PictureData.Click += new System.EventHandler(this.PictureData_Click);
            // 
            // IntSecurity
            // 
            this.IntSecurity.Location = new System.Drawing.Point(979, 206);
            this.IntSecurity.Name = "IntSecurity";
            this.IntSecurity.Size = new System.Drawing.Size(75, 23);
            this.IntSecurity.TabIndex = 26;
            this.IntSecurity.Text = "Integrated Sec";
            this.IntSecurity.UseVisualStyleBackColor = true;
            this.IntSecurity.Click += new System.EventHandler(this.IntSecurity_Click);
            // 
            // GetFormula
            // 
            this.GetFormula.Location = new System.Drawing.Point(882, 120);
            this.GetFormula.Name = "GetFormula";
            this.GetFormula.Size = new System.Drawing.Size(75, 23);
            this.GetFormula.TabIndex = 27;
            this.GetFormula.Text = "Get Formula";
            this.GetFormula.UseVisualStyleBackColor = true;
            this.GetFormula.Click += new System.EventHandler(this.GetFormula_Click);
            // 
            // SetSchema
            // 
            this.SetSchema.Location = new System.Drawing.Point(883, 147);
            this.SetSchema.Name = "SetSchema";
            this.SetSchema.Size = new System.Drawing.Size(75, 23);
            this.SetSchema.TabIndex = 28;
            this.SetSchema.Text = "Schema";
            this.SetSchema.UseVisualStyleBackColor = true;
            this.SetSchema.Click += new System.EventHandler(this.SetSchema_Click);
            // 
            // TableToCommand
            // 
            this.TableToCommand.Location = new System.Drawing.Point(782, 148);
            this.TableToCommand.Name = "TableToCommand";
            this.TableToCommand.Size = new System.Drawing.Size(98, 23);
            this.TableToCommand.TabIndex = 29;
            this.TableToCommand.Text = "TB to Command";
            this.TableToCommand.UseVisualStyleBackColor = true;
            this.TableToCommand.Click += new System.EventHandler(this.TableToCommand_Click);
            // 
            // SetToXML
            // 
            this.SetToXML.Location = new System.Drawing.Point(7, 10);
            this.SetToXML.Name = "SetToXML";
            this.SetToXML.Size = new System.Drawing.Size(75, 23);
            this.SetToXML.TabIndex = 30;
            this.SetToXML.Text = "Set to XML";
            this.SetToXML.UseVisualStyleBackColor = true;
            this.SetToXML.Click += new System.EventHandler(this.SetToXML_Click);
            // 
            // DataSet1
            // 
            this.DataSet1.Location = new System.Drawing.Point(782, 176);
            this.DataSet1.Name = "DataSet1";
            this.DataSet1.Size = new System.Drawing.Size(75, 23);
            this.DataSet1.TabIndex = 31;
            this.DataSet1.Text = "DataSet1";
            this.DataSet1.UseVisualStyleBackColor = true;
            this.DataSet1.Click += new System.EventHandler(this.DataSet1_Click);
            // 
            // SetToCSV
            // 
            this.SetToCSV.Location = new System.Drawing.Point(883, 175);
            this.SetToCSV.Name = "SetToCSV";
            this.SetToCSV.Size = new System.Drawing.Size(75, 23);
            this.SetToCSV.TabIndex = 32;
            this.SetToCSV.Text = "Set to CSV";
            this.SetToCSV.UseVisualStyleBackColor = true;
            this.SetToCSV.Click += new System.EventHandler(this.SetToCSV_Click);
            // 
            // ReplaceConnection
            // 
            this.ReplaceConnection.Location = new System.Drawing.Point(979, 8);
            this.ReplaceConnection.Name = "ReplaceConnection";
            this.ReplaceConnection.Size = new System.Drawing.Size(75, 23);
            this.ReplaceConnection.TabIndex = 33;
            this.ReplaceConnection.Text = "Replace Conn";
            this.ReplaceConnection.UseVisualStyleBackColor = true;
            this.ReplaceConnection.Click += new System.EventHandler(this.ReplaceConnection_Click);
            // 
            // crystalReportViewer1
            // 
            this.crystalReportViewer1.ActiveViewIndex = -1;
            this.crystalReportViewer1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.crystalReportViewer1.Cursor = System.Windows.Forms.Cursors.Default;
            this.crystalReportViewer1.Location = new System.Drawing.Point(8, 333);
            this.crystalReportViewer1.Name = "crystalReportViewer1";
            this.crystalReportViewer1.ReuseParameterValuesOnRefresh = true;
            this.crystalReportViewer1.Size = new System.Drawing.Size(768, 534);
            this.crystalReportViewer1.TabIndex = 34;
            this.crystalReportViewer1.ViewZoom += new CrystalDecisions.Windows.Forms.ZoomEventHandler(this.crystalReportViewer1_ViewZoom);
            this.crystalReportViewer1.Navigate += new CrystalDecisions.Windows.Forms.NavigateEventHandler(this.crystalReportViewer1_Navigate);
            this.crystalReportViewer1.ClickPage += new CrystalDecisions.Windows.Forms.PageMouseEventHandler(this.crystalReportViewer1_ClickPage_1);
            this.crystalReportViewer1.DoubleClickPage += new CrystalDecisions.Windows.Forms.PageMouseEventHandler(this.crystalReportViewer1_DoubleClickPage);
            this.crystalReportViewer1.Drill += new CrystalDecisions.Windows.Forms.DrillEventHandler(this.crystalReportViewer1_Drill_1);
            this.crystalReportViewer1.DrillDownSubreport += new CrystalDecisions.Windows.Forms.DrillSubreportEventHandler(this.crystalReportViewer1_DrillDownSubreport);
            this.crystalReportViewer1.Error += new CrystalDecisions.Windows.Forms.ExceptionEventHandler(this.crystalReportViewer1_Error);
            this.crystalReportViewer1.EnabledChanged += new System.EventHandler(this.crystalReportViewer1_EnabledChanged);
            this.crystalReportViewer1.RegionChanged += new System.EventHandler(this.crystalReportViewer1_RegionChanged);
            this.crystalReportViewer1.VisibleChanged += new System.EventHandler(this.crystalReportViewer1_VisibleChanged);
            this.crystalReportViewer1.HelpRequested += new System.Windows.Forms.HelpEventHandler(this.crystalReportViewer1_HelpRequested);
            this.crystalReportViewer1.MouseClick += new System.Windows.Forms.MouseEventHandler(this.crystalReportViewer1_MouseClick_1);
            this.crystalReportViewer1.Validating += new System.ComponentModel.CancelEventHandler(this.crystalReportViewer1_Validating);
            this.crystalReportViewer1.Validated += new System.EventHandler(this.crystalReportViewer1_Validated);
            this.crystalReportViewer1.ImeModeChanged += new System.EventHandler(this.crystalReportViewer1_ImeModeChanged);
            // 
            // ExportToRPTR
            // 
            this.ExportToRPTR.Location = new System.Drawing.Point(979, 38);
            this.ExportToRPTR.Name = "ExportToRPTR";
            this.ExportToRPTR.Size = new System.Drawing.Size(75, 23);
            this.ExportToRPTR.TabIndex = 35;
            this.ExportToRPTR.Text = "RPTR";
            this.ExportToRPTR.UseVisualStyleBackColor = true;
            this.ExportToRPTR.Click += new System.EventHandler(this.ExportToRPTR_Click);
            // 
            // ExportToPDFRAS
            // 
            this.ExportToPDFRAS.Location = new System.Drawing.Point(979, 65);
            this.ExportToPDFRAS.Name = "ExportToPDFRAS";
            this.ExportToPDFRAS.Size = new System.Drawing.Size(75, 23);
            this.ExportToPDFRAS.TabIndex = 36;
            this.ExportToPDFRAS.Text = "RAS PDF";
            this.ExportToPDFRAS.UseVisualStyleBackColor = true;
            this.ExportToPDFRAS.Click += new System.EventHandler(this.ExportToPDFRAS_Click);
            // 
            // CRPageSetup
            // 
            this.CRPageSetup.Controls.Add(this.btnPaperSizeName);
            this.CRPageSetup.Controls.Add(this.btnSavedPrinterName);
            this.CRPageSetup.Controls.Add(this.label10);
            this.CRPageSetup.Controls.Add(this.PRTTray);
            this.CRPageSetup.Controls.Add(this.CRPaperTray);
            this.CRPageSetup.Controls.Add(this.CRPrinterName);
            this.CRPageSetup.Controls.Add(this.PrinterNamelabel);
            this.CRPageSetup.Controls.Add(this.CRBottom);
            this.CRPageSetup.Controls.Add(this.CRTop);
            this.CRPageSetup.Controls.Add(this.CRRight);
            this.CRPageSetup.Controls.Add(this.CRLeft);
            this.CRPageSetup.Controls.Add(this.BottomLabel);
            this.CRPageSetup.Controls.Add(this.Toplabel);
            this.CRPageSetup.Controls.Add(this.Rightlabel);
            this.CRPageSetup.Controls.Add(this.Leftlabel);
            this.CRPageSetup.Controls.Add(this.Marginslabel);
            this.CRPageSetup.Controls.Add(this.label13);
            this.CRPageSetup.Controls.Add(this.PROrientation);
            this.CRPageSetup.Controls.Add(this.CROrientationLabel);
            this.CRPageSetup.Controls.Add(this.CRPaperSizeLabel);
            this.CRPageSetup.Controls.Add(this.CRPaperSize);
            this.CRPageSetup.Controls.Add(this.Dissociate);
            this.CRPageSetup.Controls.Add(this.PageOptionslabel);
            this.CRPageSetup.Controls.Add(this.label7);
            this.CRPageSetup.Controls.Add(this.CrNoPrinter);
            this.CRPageSetup.Location = new System.Drawing.Point(551, 9);
            this.CRPageSetup.Name = "CRPageSetup";
            this.CRPageSetup.Size = new System.Drawing.Size(227, 318);
            this.CRPageSetup.TabIndex = 37;
            this.CRPageSetup.TabStop = false;
            this.CRPageSetup.Text = "CR Page Setup";
            // 
            // btnPaperSizeName
            // 
            this.btnPaperSizeName.Location = new System.Drawing.Point(78, 133);
            this.btnPaperSizeName.Name = "btnPaperSizeName";
            this.btnPaperSizeName.Size = new System.Drawing.Size(141, 20);
            this.btnPaperSizeName.TabIndex = 64;
            // 
            // btnSavedPrinterName
            // 
            this.btnSavedPrinterName.Location = new System.Drawing.Point(11, 252);
            this.btnSavedPrinterName.Name = "btnSavedPrinterName";
            this.btnSavedPrinterName.Size = new System.Drawing.Size(210, 20);
            this.btnSavedPrinterName.TabIndex = 62;
            // 
            // label10
            // 
            this.label10.AutoSize = true;
            this.label10.Location = new System.Drawing.Point(11, 234);
            this.label10.Name = "label10";
            this.label10.Size = new System.Drawing.Size(96, 13);
            this.label10.TabIndex = 63;
            this.label10.Text = "SavePrinter Name:";
            // 
            // PRTTray
            // 
            this.PRTTray.AutoSize = true;
            this.PRTTray.Location = new System.Drawing.Point(78, 71);
            this.PRTTray.Name = "PRTTray";
            this.PRTTray.Size = new System.Drawing.Size(31, 13);
            this.PRTTray.TabIndex = 21;
            this.PRTTray.Text = "Tray:";
            // 
            // CRPaperTray
            // 
            this.CRPaperTray.Location = new System.Drawing.Point(107, 69);
            this.CRPaperTray.Name = "CRPaperTray";
            this.CRPaperTray.Size = new System.Drawing.Size(114, 20);
            this.CRPaperTray.TabIndex = 20;
            // 
            // CRPrinterName
            // 
            this.CRPrinterName.Location = new System.Drawing.Point(48, 48);
            this.CRPrinterName.Name = "CRPrinterName";
            this.CRPrinterName.Size = new System.Drawing.Size(173, 20);
            this.CRPrinterName.TabIndex = 19;
            // 
            // PrinterNamelabel
            // 
            this.PrinterNamelabel.AutoSize = true;
            this.PrinterNamelabel.Location = new System.Drawing.Point(8, 51);
            this.PrinterNamelabel.Name = "PrinterNamelabel";
            this.PrinterNamelabel.Size = new System.Drawing.Size(40, 13);
            this.PrinterNamelabel.TabIndex = 18;
            this.PrinterNamelabel.Text = "Printer:";
            // 
            // CRBottom
            // 
            this.CRBottom.Location = new System.Drawing.Point(145, 210);
            this.CRBottom.Name = "CRBottom";
            this.CRBottom.Size = new System.Drawing.Size(63, 20);
            this.CRBottom.TabIndex = 17;
            // 
            // CRTop
            // 
            this.CRTop.Location = new System.Drawing.Point(43, 213);
            this.CRTop.Name = "CRTop";
            this.CRTop.Size = new System.Drawing.Size(55, 20);
            this.CRTop.TabIndex = 16;
            // 
            // CRRight
            // 
            this.CRRight.Location = new System.Drawing.Point(145, 180);
            this.CRRight.Name = "CRRight";
            this.CRRight.Size = new System.Drawing.Size(63, 20);
            this.CRRight.TabIndex = 15;
            // 
            // CRLeft
            // 
            this.CRLeft.Location = new System.Drawing.Point(42, 181);
            this.CRLeft.Name = "CRLeft";
            this.CRLeft.Size = new System.Drawing.Size(56, 20);
            this.CRLeft.TabIndex = 14;
            // 
            // BottomLabel
            // 
            this.BottomLabel.AutoSize = true;
            this.BottomLabel.Location = new System.Drawing.Point(104, 213);
            this.BottomLabel.Name = "BottomLabel";
            this.BottomLabel.Size = new System.Drawing.Size(43, 13);
            this.BottomLabel.TabIndex = 13;
            this.BottomLabel.Text = "Bottom:";
            // 
            // Toplabel
            // 
            this.Toplabel.AutoSize = true;
            this.Toplabel.Location = new System.Drawing.Point(10, 213);
            this.Toplabel.Name = "Toplabel";
            this.Toplabel.Size = new System.Drawing.Size(29, 13);
            this.Toplabel.TabIndex = 12;
            this.Toplabel.Text = "Top:";
            // 
            // Rightlabel
            // 
            this.Rightlabel.AutoSize = true;
            this.Rightlabel.Location = new System.Drawing.Point(104, 183);
            this.Rightlabel.Name = "Rightlabel";
            this.Rightlabel.Size = new System.Drawing.Size(35, 13);
            this.Rightlabel.TabIndex = 11;
            this.Rightlabel.Text = "Right:";
            // 
            // Leftlabel
            // 
            this.Leftlabel.AutoSize = true;
            this.Leftlabel.Location = new System.Drawing.Point(11, 185);
            this.Leftlabel.Name = "Leftlabel";
            this.Leftlabel.Size = new System.Drawing.Size(28, 13);
            this.Leftlabel.TabIndex = 10;
            this.Leftlabel.Text = "Left:";
            // 
            // Marginslabel
            // 
            this.Marginslabel.AutoSize = true;
            this.Marginslabel.Location = new System.Drawing.Point(8, 137);
            this.Marginslabel.Name = "Marginslabel";
            this.Marginslabel.Size = new System.Drawing.Size(66, 13);
            this.Marginslabel.TabIndex = 9;
            this.Marginslabel.Text = "Paper Name";
            this.Marginslabel.Click += new System.EventHandler(this.Marginslabel_Click);
            // 
            // label13
            // 
            this.label13.AutoSize = true;
            this.label13.Location = new System.Drawing.Point(8, 275);
            this.label13.Name = "label13";
            this.label13.Size = new System.Drawing.Size(131, 13);
            this.label13.TabIndex = 66;
            this.label13.Text = "Preview Pages Start with: ";
            // 
            // PROrientation
            // 
            this.PROrientation.Location = new System.Drawing.Point(78, 156);
            this.PROrientation.Name = "PROrientation";
            this.PROrientation.Size = new System.Drawing.Size(117, 20);
            this.PROrientation.TabIndex = 8;
            // 
            // CROrientationLabel
            // 
            this.CROrientationLabel.AutoSize = true;
            this.CROrientationLabel.Location = new System.Drawing.Point(8, 159);
            this.CROrientationLabel.Name = "CROrientationLabel";
            this.CROrientationLabel.Size = new System.Drawing.Size(58, 13);
            this.CROrientationLabel.TabIndex = 7;
            this.CROrientationLabel.Text = "Orientation";
            // 
            // CRPaperSizeLabel
            // 
            this.CRPaperSizeLabel.AutoSize = true;
            this.CRPaperSizeLabel.Location = new System.Drawing.Point(8, 113);
            this.CRPaperSizeLabel.Name = "CRPaperSizeLabel";
            this.CRPaperSizeLabel.Size = new System.Drawing.Size(58, 13);
            this.CRPaperSizeLabel.TabIndex = 6;
            this.CRPaperSizeLabel.Text = "Paper Size";
            // 
            // CRPaperSize
            // 
            this.CRPaperSize.Location = new System.Drawing.Point(65, 110);
            this.CRPaperSize.Name = "CRPaperSize";
            this.CRPaperSize.Size = new System.Drawing.Size(155, 20);
            this.CRPaperSize.TabIndex = 5;
            // 
            // Dissociate
            // 
            this.Dissociate.AutoSize = true;
            this.Dissociate.Location = new System.Drawing.Point(11, 88);
            this.Dissociate.Name = "Dissociate";
            this.Dissociate.Size = new System.Drawing.Size(208, 17);
            this.Dissociate.TabIndex = 3;
            this.Dissociate.Text = "Dissociate - use default printer propties";
            this.Dissociate.UseVisualStyleBackColor = true;
            // 
            // PageOptionslabel
            // 
            this.PageOptionslabel.AutoSize = true;
            this.PageOptionslabel.Location = new System.Drawing.Point(8, 72);
            this.PageOptionslabel.Name = "PageOptionslabel";
            this.PageOptionslabel.Size = new System.Drawing.Size(71, 13);
            this.PageOptionslabel.TabIndex = 2;
            this.PageOptionslabel.Text = "Page Options";
            // 
            // label7
            // 
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(6, 16);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(76, 13);
            this.label7.TabIndex = 1;
            this.label7.Text = "Printer Options";
            // 
            // CrNoPrinter
            // 
            this.CrNoPrinter.AutoSize = true;
            this.CrNoPrinter.Location = new System.Drawing.Point(9, 31);
            this.CrNoPrinter.Name = "CrNoPrinter";
            this.CrNoPrinter.Size = new System.Drawing.Size(184, 17);
            this.CrNoPrinter.TabIndex = 0;
            this.CrNoPrinter.Text = "No Printer ( Optimized for screen )";
            this.CrNoPrinter.UseVisualStyleBackColor = true;
            // 
            // btnCloserpt
            // 
            this.btnCloserpt.Enabled = false;
            this.btnCloserpt.Location = new System.Drawing.Point(83, 226);
            this.btnCloserpt.Name = "btnCloserpt";
            this.btnCloserpt.Size = new System.Drawing.Size(72, 24);
            this.btnCloserpt.TabIndex = 38;
            this.btnCloserpt.Text = "Close rpt...";
            this.btnCloserpt.UseVisualStyleBackColor = true;
            this.btnCloserpt.Click += new System.EventHandler(this.Closerpt_Click);
            // 
            // ExportToStream
            // 
            this.ExportToStream.Location = new System.Drawing.Point(979, 92);
            this.ExportToStream.Name = "ExportToStream";
            this.ExportToStream.Size = new System.Drawing.Size(75, 23);
            this.ExportToStream.TabIndex = 39;
            this.ExportToStream.Text = "To Stream";
            this.ExportToStream.UseVisualStyleBackColor = true;
            this.ExportToStream.Click += new System.EventHandler(this.ExportToStream_Click);
            // 
            // ReportVersion
            // 
            this.ReportVersion.AutoSize = true;
            this.ReportVersion.Location = new System.Drawing.Point(13, 278);
            this.ReportVersion.Name = "ReportVersion";
            this.ReportVersion.Size = new System.Drawing.Size(83, 13);
            this.ReportVersion.TabIndex = 40;
            this.ReportVersion.Text = "Report Version: ";
            // 
            // btnReportVersion
            // 
            this.btnReportVersion.Location = new System.Drawing.Point(97, 275);
            this.btnReportVersion.Name = "btnReportVersion";
            this.btnReportVersion.Size = new System.Drawing.Size(58, 20);
            this.btnReportVersion.TabIndex = 41;
            // 
            // RecordSelectionForm
            // 
            this.RecordSelectionForm.AutoSize = true;
            this.RecordSelectionForm.Location = new System.Drawing.Point(801, 534);
            this.RecordSelectionForm.Name = "RecordSelectionForm";
            this.RecordSelectionForm.Size = new System.Drawing.Size(129, 13);
            this.RecordSelectionForm.TabIndex = 42;
            this.RecordSelectionForm.Text = "Record Selection Formula";
            // 
            // btnRecordSelectionForm
            // 
            this.btnRecordSelectionForm.Location = new System.Drawing.Point(801, 554);
            this.btnRecordSelectionForm.Multiline = true;
            this.btnRecordSelectionForm.Name = "btnRecordSelectionForm";
            this.btnRecordSelectionForm.ReadOnly = true;
            this.btnRecordSelectionForm.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
            this.btnRecordSelectionForm.Size = new System.Drawing.Size(238, 130);
            this.btnRecordSelectionForm.TabIndex = 43;
            this.btnRecordSelectionForm.MouseClick += new System.Windows.Forms.MouseEventHandler(this.crystalReportViewer1_MouseClick);
            this.btnRecordSelectionForm.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.crystalReportViewer1_DoubleClickPage);
            // 
            // btnReportName
            // 
            this.btnReportName.Location = new System.Drawing.Point(84, 253);
            this.btnReportName.Name = "btnReportName";
            this.btnReportName.Size = new System.Drawing.Size(417, 20);
            this.btnReportName.TabIndex = 44;
            this.btnReportName.Text = "Select CeLocale before opening a report: rassdk://d:\\\\RASReports\\\\formulas.rpt";
            // 
            // ReportName
            // 
            this.ReportName.AutoSize = true;
            this.ReportName.Location = new System.Drawing.Point(10, 257);
            this.ReportName.Name = "ReportName";
            this.ReportName.Size = new System.Drawing.Size(73, 13);
            this.ReportName.TabIndex = 45;
            this.ReportName.Text = "Report Name:";
            // 
            // PageEvent
            // 
            this.PageEvent.Location = new System.Drawing.Point(883, 92);
            this.PageEvent.Name = "PageEvent";
            this.PageEvent.Size = new System.Drawing.Size(74, 22);
            this.PageEvent.TabIndex = 46;
            this.PageEvent.Text = "Page Event";
            this.PageEvent.UseVisualStyleBackColor = true;
            this.PageEvent.Click += new System.EventHandler(this.PageEvent_Click);
            // 
            // rtnSQLStatement
            // 
            this.rtnSQLStatement.AutoSize = true;
            this.rtnSQLStatement.Location = new System.Drawing.Point(801, 687);
            this.rtnSQLStatement.Name = "rtnSQLStatement";
            this.rtnSQLStatement.Size = new System.Drawing.Size(82, 13);
            this.rtnSQLStatement.TabIndex = 47;
            this.rtnSQLStatement.Text = "SQL Statement:";
            // 
            // richTextBox1
            // 
            this.richTextBox1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.richTextBox1.Font = new System.Drawing.Font("Microsoft Sans Serif", 21.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(2)));
            this.richTextBox1.Location = new System.Drawing.Point(183, 257);
            this.richTextBox1.Name = "richTextBox1";
            this.richTextBox1.Size = new System.Drawing.Size(91, 47);
            this.richTextBox1.TabIndex = 49;
            this.richTextBox1.Text = "É900#Ë";
            // 
            // btnReportObjects
            // 
            this.btnReportObjects.ForeColor = System.Drawing.SystemColors.WindowText;
            this.btnReportObjects.Location = new System.Drawing.Point(1048, 539);
            this.btnReportObjects.Name = "btnReportObjects";
            this.btnReportObjects.Size = new System.Drawing.Size(288, 367);
            this.btnReportObjects.TabIndex = 50;
            this.btnReportObjects.Text = "";
            this.btnReportObjects.TextChanged += new System.EventHandler(this.btnTableLinks_TextChanged);
            // 
            // rtnReportObjects
            // 
            this.rtnReportObjects.AutoSize = true;
            this.rtnReportObjects.Location = new System.Drawing.Point(1045, 490);
            this.rtnReportObjects.Name = "rtnReportObjects";
            this.rtnReportObjects.Size = new System.Drawing.Size(78, 13);
            this.rtnReportObjects.TabIndex = 51;
            this.rtnReportObjects.Text = "Report Objects";
            // 
            // ReportObjectComboBox1
            // 
            this.ReportObjectComboBox1.AllowDrop = true;
            this.ReportObjectComboBox1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ReportObjectComboBox1.Items.AddRange(new object[] {
            "",
            "Formula Fields",
            "Groups",
            "Parameter Fields",
            "Fields used in the report",
            "Sorts",
            "Summary Fields",
            "Running Totals",
            "Main Report Data Sources",
            "Main Report Data Links",
            "SubReports",
            "SubReport Data Sources",
            "SubReport Links",
            "Special Fields",
            "Section Print Orientation",
            "Hyperlinks",
            "Summary Info",
            "Table Joins",
            "Alerts",
            "Object Name -> Field Name",
            "LOV - List of Values",
            "Saved Export Options",
            "Graphic Location Formula",
            "Fonts used in the report",
            "Charts",
            "Condition Fields/Formula",
            "OLE Objects"});
            this.ReportObjectComboBox1.Location = new System.Drawing.Point(1048, 507);
            this.ReportObjectComboBox1.Name = "ReportObjectComboBox1";
            this.ReportObjectComboBox1.Size = new System.Drawing.Size(189, 21);
            this.ReportObjectComboBox1.TabIndex = 52;
            this.ReportObjectComboBox1.SelectedIndexChanged += new System.EventHandler(this.ReportObjectComboBox1_SelectedIndexChanged);
            // 
            // TableLinks
            // 
            this.TableLinks.Location = new System.Drawing.Point(782, 235);
            this.TableLinks.Name = "TableLinks";
            this.TableLinks.Size = new System.Drawing.Size(72, 22);
            this.TableLinks.TabIndex = 53;
            this.TableLinks.Text = "Table Links";
            this.TableLinks.UseVisualStyleBackColor = true;
            this.TableLinks.Click += new System.EventHandler(this.TableLinks_Click);
            // 
            // SetPCDatabase
            // 
            this.SetPCDatabase.Location = new System.Drawing.Point(9, 37);
            this.SetPCDatabase.Name = "SetPCDatabase";
            this.SetPCDatabase.Size = new System.Drawing.Size(72, 23);
            this.SetPCDatabase.TabIndex = 54;
            this.SetPCDatabase.Text = "PC Data";
            this.SetPCDatabase.UseVisualStyleBackColor = true;
            this.SetPCDatabase.Click += new System.EventHandler(this.SetPCDatabase_Click);
            // 
            // CommandTable
            // 
            this.CommandTable.Location = new System.Drawing.Point(979, 236);
            this.CommandTable.Name = "CommandTable";
            this.CommandTable.Size = new System.Drawing.Size(75, 22);
            this.CommandTable.TabIndex = 55;
            this.CommandTable.Text = "Command";
            this.CommandTable.UseVisualStyleBackColor = true;
            this.CommandTable.Click += new System.EventHandler(this.CommandTable_Click);
            // 
            // Dan
            // 
            this.Dan.Location = new System.Drawing.Point(979, 118);
            this.Dan.Name = "Dan";
            this.Dan.Size = new System.Drawing.Size(75, 23);
            this.Dan.TabIndex = 56;
            this.Dan.Text = "Dan";
            this.Dan.UseVisualStyleBackColor = true;
            this.Dan.Click += new System.EventHandler(this.Dan_Click);
            // 
            // grpBoxRPTOptions
            // 
            this.grpBoxRPTOptions.Controls.Add(this.label16);
            this.grpBoxRPTOptions.Controls.Add(this.txtRecordCount);
            this.grpBoxRPTOptions.Controls.Add(this.btnHasSavedData);
            this.grpBoxRPTOptions.Controls.Add(this.btnReportStyle);
            this.grpBoxRPTOptions.Controls.Add(this.label9);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox3);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox17);
            this.grpBoxRPTOptions.Controls.Add(this.cbPreferredView);
            this.grpBoxRPTOptions.Controls.Add(this.crPreferredView);
            this.grpBoxRPTOptions.Controls.Add(this.cbConvertDateTimeType);
            this.grpBoxRPTOptions.Controls.Add(this.btnSetChanges);
            this.grpBoxRPTOptions.Controls.Add(this.crConvertDateTimeType);
            this.grpBoxRPTOptions.Controls.Add(this.richTextBox2);
            this.grpBoxRPTOptions.Controls.Add(this.crRowsetBatchSize);
            this.grpBoxRPTOptions.Controls.Add(this.crNumOfCachedBatches);
            this.grpBoxRPTOptions.Controls.Add(this.richTextBox1);
            this.grpBoxRPTOptions.Controls.Add(this.crNumOfBrowsingRecords);
            this.grpBoxRPTOptions.Controls.Add(this.crMaxNumOfRecords);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox9);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox10);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox11);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox12);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox13);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox14);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox15);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox16);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox5);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox6);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox7);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox8);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox4);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox2);
            this.grpBoxRPTOptions.Controls.Add(this.checkBox1);
            this.grpBoxRPTOptions.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.grpBoxRPTOptions.Location = new System.Drawing.Point(1060, 8);
            this.grpBoxRPTOptions.Name = "grpBoxRPTOptions";
            this.grpBoxRPTOptions.Size = new System.Drawing.Size(280, 479);
            this.grpBoxRPTOptions.TabIndex = 57;
            this.grpBoxRPTOptions.TabStop = false;
            this.grpBoxRPTOptions.Text = "Report Options";
            // 
            // label16
            // 
            this.label16.AutoSize = true;
            this.label16.Location = new System.Drawing.Point(186, 32);
            this.label16.Name = "label16";
            this.label16.Size = new System.Drawing.Size(76, 13);
            this.label16.TabIndex = 56;
            this.label16.Text = "Record Count:";
            // 
            // txtRecordCount
            // 
            this.txtRecordCount.Location = new System.Drawing.Point(186, 52);
            this.txtRecordCount.Name = "txtRecordCount";
            this.txtRecordCount.Size = new System.Drawing.Size(65, 20);
            this.txtRecordCount.TabIndex = 55;
            // 
            // btnHasSavedData
            // 
            this.btnHasSavedData.AutoSize = true;
            this.btnHasSavedData.Location = new System.Drawing.Point(169, 13);
            this.btnHasSavedData.Name = "btnHasSavedData";
            this.btnHasSavedData.Size = new System.Drawing.Size(105, 17);
            this.btnHasSavedData.TabIndex = 54;
            this.btnHasSavedData.Text = "Has Saved Data";
            this.btnHasSavedData.UseVisualStyleBackColor = true;
            // 
            // btnReportStyle
            // 
            this.btnReportStyle.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.btnReportStyle.Location = new System.Drawing.Point(78, 312);
            this.btnReportStyle.Name = "btnReportStyle";
            this.btnReportStyle.Size = new System.Drawing.Size(196, 20);
            this.btnReportStyle.TabIndex = 53;
            // 
            // label9
            // 
            this.label9.AutoSize = true;
            this.label9.Location = new System.Drawing.Point(8, 314);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(65, 13);
            this.label9.TabIndex = 52;
            this.label9.Text = "ReportStyle:";
            // 
            // checkBox3
            // 
            this.checkBox3.AutoSize = true;
            this.checkBox3.Location = new System.Drawing.Point(6, 238);
            this.checkBox3.Name = "checkBox3";
            this.checkBox3.Size = new System.Drawing.Size(150, 17);
            this.checkBox3.TabIndex = 51;
            this.checkBox3.Text = "ConvertNullFieldToDefault";
            this.checkBox3.UseVisualStyleBackColor = true;
            // 
            // checkBox17
            // 
            this.checkBox17.AutoSize = true;
            this.checkBox17.Location = new System.Drawing.Point(6, 255);
            this.checkBox17.Name = "checkBox17";
            this.checkBox17.Size = new System.Drawing.Size(162, 17);
            this.checkBox17.TabIndex = 50;
            this.checkBox17.Text = "ConvertOtherNullsToDefault ";
            this.checkBox17.UseVisualStyleBackColor = true;
            // 
            // cbPreferredView
            // 
            this.cbPreferredView.FormattingEnabled = true;
            this.cbPreferredView.Items.AddRange(new object[] {
            "crReportDocumentCubeView",
            "crReportDocumentExcelView",
            "crReportDocumentQueryView",
            "crReportDocumentReportView"});
            this.cbPreferredView.Location = new System.Drawing.Point(85, 335);
            this.cbPreferredView.Name = "cbPreferredView";
            this.cbPreferredView.Size = new System.Drawing.Size(189, 21);
            this.cbPreferredView.TabIndex = 27;
            // 
            // crPreferredView
            // 
            this.crPreferredView.AutoSize = true;
            this.crPreferredView.Location = new System.Drawing.Point(6, 339);
            this.crPreferredView.Name = "crPreferredView";
            this.crPreferredView.Size = new System.Drawing.Size(73, 13);
            this.crPreferredView.TabIndex = 26;
            this.crPreferredView.Text = "PreferredView";
            // 
            // cbConvertDateTimeType
            // 
            this.cbConvertDateTimeType.FormattingEnabled = true;
            this.cbConvertDateTimeType.Items.AddRange(new object[] {
            "crConvertDateTimeTypeKeepDateTimeType",
            "crConvertDateTimeTypeToDate",
            "crConvertDateTimeTypeToString"});
            this.cbConvertDateTimeType.Location = new System.Drawing.Point(126, 356);
            this.cbConvertDateTimeType.Name = "cbConvertDateTimeType";
            this.cbConvertDateTimeType.Size = new System.Drawing.Size(148, 21);
            this.cbConvertDateTimeType.TabIndex = 25;
            // 
            // btnSetChanges
            // 
            this.btnSetChanges.Location = new System.Drawing.Point(79, 454);
            this.btnSetChanges.Name = "btnSetChanges";
            this.btnSetChanges.Size = new System.Drawing.Size(109, 24);
            this.btnSetChanges.TabIndex = 24;
            this.btnSetChanges.Text = "Set Changes";
            this.btnSetChanges.UseVisualStyleBackColor = true;
            this.btnSetChanges.Click += new System.EventHandler(this.btnSetChanges_Click);
            // 
            // crConvertDateTimeType
            // 
            this.crConvertDateTimeType.AutoSize = true;
            this.crConvertDateTimeType.Location = new System.Drawing.Point(3, 360);
            this.crConvertDateTimeType.Name = "crConvertDateTimeType";
            this.crConvertDateTimeType.Size = new System.Drawing.Size(117, 13);
            this.crConvertDateTimeType.TabIndex = 23;
            this.crConvertDateTimeType.Text = " ConvertDateTimeType";
            // 
            // richTextBox2
            // 
            this.richTextBox2.BackColor = System.Drawing.SystemColors.Control;
            this.richTextBox2.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.richTextBox2.Location = new System.Drawing.Point(79, 378);
            this.richTextBox2.Name = "richTextBox2";
            this.richTextBox2.Size = new System.Drawing.Size(156, 73);
            this.richTextBox2.TabIndex = 21;
            this.richTextBox2.Text = "MaxNumOfRecords\nNumOfBrowsingRecords\nNumOfCachedBatches\nRowsetBatchSize";
            // 
            // crRowsetBatchSize
            // 
            this.crRowsetBatchSize.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.crRowsetBatchSize.Location = new System.Drawing.Point(6, 431);
            this.crRowsetBatchSize.Name = "crRowsetBatchSize";
            this.crRowsetBatchSize.Size = new System.Drawing.Size(57, 18);
            this.crRowsetBatchSize.TabIndex = 20;
            // 
            // crNumOfCachedBatches
            // 
            this.crNumOfCachedBatches.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.crNumOfCachedBatches.Location = new System.Drawing.Point(6, 413);
            this.crNumOfCachedBatches.Name = "crNumOfCachedBatches";
            this.crNumOfCachedBatches.Size = new System.Drawing.Size(57, 18);
            this.crNumOfCachedBatches.TabIndex = 19;
            // 
            // crNumOfBrowsingRecords
            // 
            this.crNumOfBrowsingRecords.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.crNumOfBrowsingRecords.Location = new System.Drawing.Point(6, 395);
            this.crNumOfBrowsingRecords.Name = "crNumOfBrowsingRecords";
            this.crNumOfBrowsingRecords.Size = new System.Drawing.Size(57, 18);
            this.crNumOfBrowsingRecords.TabIndex = 18;
            // 
            // crMaxNumOfRecords
            // 
            this.crMaxNumOfRecords.Font = new System.Drawing.Font("Microsoft Sans Serif", 6.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.crMaxNumOfRecords.Location = new System.Drawing.Point(6, 377);
            this.crMaxNumOfRecords.Name = "crMaxNumOfRecords";
            this.crMaxNumOfRecords.Size = new System.Drawing.Size(57, 18);
            this.crMaxNumOfRecords.TabIndex = 17;
            // 
            // checkBox9
            // 
            this.checkBox9.AutoSize = true;
            this.checkBox9.Location = new System.Drawing.Point(6, 136);
            this.checkBox9.Name = "checkBox9";
            this.checkBox9.Size = new System.Drawing.Size(164, 17);
            this.checkBox9.TabIndex = 16;
            this.checkBox9.Text = "EnableSelectDistinctRecords";
            this.checkBox9.UseVisualStyleBackColor = true;
            // 
            // checkBox10
            // 
            this.checkBox10.AutoSize = true;
            this.checkBox10.Location = new System.Drawing.Point(6, 153);
            this.checkBox10.Name = "checkBox10";
            this.checkBox10.Size = new System.Drawing.Size(160, 17);
            this.checkBox10.TabIndex = 15;
            this.checkBox10.Text = "EnableTranslateDOSMemos";
            this.checkBox10.UseVisualStyleBackColor = true;
            // 
            // checkBox11
            // 
            this.checkBox11.AutoSize = true;
            this.checkBox11.Location = new System.Drawing.Point(6, 170);
            this.checkBox11.Name = "checkBox11";
            this.checkBox11.Size = new System.Drawing.Size(158, 17);
            this.checkBox11.TabIndex = 14;
            this.checkBox11.Text = "EnableTranslateDOSStrings";
            this.checkBox11.UseVisualStyleBackColor = true;
            // 
            // checkBox12
            // 
            this.checkBox12.AutoSize = true;
            this.checkBox12.Location = new System.Drawing.Point(6, 187);
            this.checkBox12.Name = "checkBox12";
            this.checkBox12.Size = new System.Drawing.Size(196, 17);
            this.checkBox12.TabIndex = 13;
            this.checkBox12.Text = "EnableUseCaseInsensitiveSQLData";
            this.checkBox12.UseVisualStyleBackColor = true;
            // 
            // checkBox13
            // 
            this.checkBox13.AutoSize = true;
            this.checkBox13.Location = new System.Drawing.Point(6, 272);
            this.checkBox13.Name = "checkBox13";
            this.checkBox13.Size = new System.Drawing.Size(136, 17);
            this.checkBox13.TabIndex = 12;
            this.checkBox13.Text = "EnableUseDummyData";
            this.checkBox13.UseVisualStyleBackColor = true;
            // 
            // checkBox14
            // 
            this.checkBox14.AutoSize = true;
            this.checkBox14.Location = new System.Drawing.Point(6, 289);
            this.checkBox14.Name = "checkBox14";
            this.checkBox14.Size = new System.Drawing.Size(150, 17);
            this.checkBox14.TabIndex = 11;
            this.checkBox14.Text = "EnableUseIndexForSpeed";
            this.checkBox14.UseVisualStyleBackColor = true;
            // 
            // checkBox15
            // 
            this.checkBox15.AutoSize = true;
            this.checkBox15.Location = new System.Drawing.Point(6, 204);
            this.checkBox15.Name = "checkBox15";
            this.checkBox15.Size = new System.Drawing.Size(147, 17);
            this.checkBox15.TabIndex = 10;
            this.checkBox15.Text = "EnableVerifyOnEveryPrint";
            this.checkBox15.UseVisualStyleBackColor = true;
            // 
            // checkBox16
            // 
            this.checkBox16.AutoSize = true;
            this.checkBox16.Location = new System.Drawing.Point(6, 221);
            this.checkBox16.Name = "checkBox16";
            this.checkBox16.Size = new System.Drawing.Size(155, 17);
            this.checkBox16.TabIndex = 9;
            this.checkBox16.Text = "ErrorOnMaxNumOfRecords";
            this.checkBox16.UseVisualStyleBackColor = true;
            // 
            // checkBox5
            // 
            this.checkBox5.AutoSize = true;
            this.checkBox5.Location = new System.Drawing.Point(6, 50);
            this.checkBox5.Name = "checkBox5";
            this.checkBox5.Size = new System.Drawing.Size(116, 17);
            this.checkBox5.TabIndex = 8;
            this.checkBox5.Text = "EnableAsyncQuery";
            this.checkBox5.UseVisualStyleBackColor = true;
            // 
            // checkBox6
            // 
            this.checkBox6.AutoSize = true;
            this.checkBox6.Location = new System.Drawing.Point(6, 85);
            this.checkBox6.Name = "checkBox6";
            this.checkBox6.Size = new System.Drawing.Size(152, 17);
            this.checkBox6.TabIndex = 7;
            this.checkBox6.Text = "EnablePushDownGroupBy";
            this.checkBox6.UseVisualStyleBackColor = true;
            // 
            // checkBox7
            // 
            this.checkBox7.AutoSize = true;
            this.checkBox7.Location = new System.Drawing.Point(6, 102);
            this.checkBox7.Name = "checkBox7";
            this.checkBox7.Size = new System.Drawing.Size(161, 17);
            this.checkBox7.TabIndex = 6;
            this.checkBox7.Text = "EnableSaveDataWithReport";
            this.checkBox7.UseVisualStyleBackColor = true;
            // 
            // checkBox8
            // 
            this.checkBox8.AutoSize = true;
            this.checkBox8.Location = new System.Drawing.Point(6, 119);
            this.checkBox8.Name = "checkBox8";
            this.checkBox8.Size = new System.Drawing.Size(189, 17);
            this.checkBox8.TabIndex = 5;
            this.checkBox8.Text = "EnableSaveSummariesWithReport";
            this.checkBox8.UseVisualStyleBackColor = true;
            // 
            // checkBox4
            // 
            this.checkBox4.AutoSize = true;
            this.checkBox4.Location = new System.Drawing.Point(6, 34);
            this.checkBox4.Name = "checkBox4";
            this.checkBox4.Size = new System.Drawing.Size(149, 17);
            this.checkBox4.TabIndex = 3;
            this.checkBox4.Text = "DisplayGroupContentView";
            this.checkBox4.UseVisualStyleBackColor = true;
            // 
            // checkBox2
            // 
            this.checkBox2.AutoSize = true;
            this.checkBox2.Location = new System.Drawing.Point(6, 67);
            this.checkBox2.Name = "checkBox2";
            this.checkBox2.Size = new System.Drawing.Size(129, 17);
            this.checkBox2.TabIndex = 2;
            this.checkBox2.Text = "CanSetTableLocation";
            this.checkBox2.UseVisualStyleBackColor = true;
            // 
            // checkBox1
            // 
            this.checkBox1.AutoSize = true;
            this.checkBox1.Location = new System.Drawing.Point(6, 17);
            this.checkBox1.Name = "checkBox1";
            this.checkBox1.Size = new System.Drawing.Size(150, 17);
            this.checkBox1.TabIndex = 1;
            this.checkBox1.Text = "CanSelectDistinctRecords";
            this.checkBox1.UseVisualStyleBackColor = true;
            // 
            // btnPrintToPrinter
            // 
            this.btnPrintToPrinter.Enabled = false;
            this.btnPrintToPrinter.Location = new System.Drawing.Point(476, 227);
            this.btnPrintToPrinter.Name = "btnPrintToPrinter";
            this.btnPrintToPrinter.Size = new System.Drawing.Size(75, 23);
            this.btnPrintToPrinter.TabIndex = 58;
            this.btnPrintToPrinter.Text = "P 2 P";
            this.btnPrintToPrinter.UseVisualStyleBackColor = true;
            this.btnPrintToPrinter.Click += new System.EventHandler(this.btnPrintToPrinter_Click);
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.Font = new System.Drawing.Font("Microsoft Sans Serif", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label8.Location = new System.Drawing.Point(1243, 508);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(45, 16);
            this.label8.TabIndex = 60;
            this.label8.Text = "Count:";
            // 
            // btnCount
            // 
            this.btnCount.Location = new System.Drawing.Point(1294, 507);
            this.btnCount.Name = "btnCount";
            this.btnCount.Size = new System.Drawing.Size(44, 20);
            this.btnCount.TabIndex = 61;
            // 
            // label11
            // 
            this.label11.AutoSize = true;
            this.label11.Location = new System.Drawing.Point(247, 278);
            this.label11.Name = "label11";
            this.label11.Size = new System.Drawing.Size(66, 13);
            this.label11.TabIndex = 62;
            this.label11.Text = "Report Kind:";
            // 
            // btnReportKind
            // 
            this.btnReportKind.Location = new System.Drawing.Point(316, 275);
            this.btnReportKind.Name = "btnReportKind";
            this.btnReportKind.Size = new System.Drawing.Size(229, 20);
            this.btnReportKind.TabIndex = 63;
            // 
            // btnRecordCount
            // 
            this.btnRecordCount.Location = new System.Drawing.Point(892, 873);
            this.btnRecordCount.Name = "btnRecordCount";
            this.btnRecordCount.Size = new System.Drawing.Size(109, 20);
            this.btnRecordCount.TabIndex = 64;
            // 
            // label12
            // 
            this.label12.AutoSize = true;
            this.label12.Location = new System.Drawing.Point(798, 876);
            this.label12.Name = "label12";
            this.label12.Size = new System.Drawing.Size(88, 13);
            this.label12.TabIndex = 65;
            this.label12.Text = "Data Row count:";
            // 
            // GetPreviewPagesStartwith
            // 
            this.GetPreviewPagesStartwith.FormattingEnabled = true;
            this.GetPreviewPagesStartwith.Items.AddRange(new object[] {
            "Full Size",
            "Fit Width",
            "Fit Page"});
            this.GetPreviewPagesStartwith.Location = new System.Drawing.Point(560, 301);
            this.GetPreviewPagesStartwith.Name = "GetPreviewPagesStartwith";
            this.GetPreviewPagesStartwith.Size = new System.Drawing.Size(120, 21);
            this.GetPreviewPagesStartwith.TabIndex = 67;
            // 
            // SetPreviewPagesStartWith
            // 
            this.SetPreviewPagesStartWith.Location = new System.Drawing.Point(696, 299);
            this.SetPreviewPagesStartWith.Name = "SetPreviewPagesStartWith";
            this.SetPreviewPagesStartWith.Size = new System.Drawing.Size(75, 23);
            this.SetPreviewPagesStartWith.TabIndex = 68;
            this.SetPreviewPagesStartWith.Text = "Set";
            this.SetPreviewPagesStartWith.UseVisualStyleBackColor = true;
            // 
            // chkUseRAS
            // 
            this.chkUseRAS.AutoSize = true;
            this.chkUseRAS.Location = new System.Drawing.Point(10, 65);
            this.chkUseRAS.Name = "chkUseRAS";
            this.chkUseRAS.Size = new System.Drawing.Size(70, 17);
            this.chkUseRAS.TabIndex = 69;
            this.chkUseRAS.Text = "Use RAS";
            this.chkUseRAS.UseVisualStyleBackColor = true;
            // 
            // btrFileDSN
            // 
            this.btrFileDSN.Location = new System.Drawing.Point(979, 147);
            this.btrFileDSN.Name = "btrFileDSN";
            this.btrFileDSN.Size = new System.Drawing.Size(75, 25);
            this.btrFileDSN.TabIndex = 70;
            this.btrFileDSN.Text = "FileDSN";
            this.btrFileDSN.UseVisualStyleBackColor = true;
            this.btrFileDSN.Click += new System.EventHandler(this.button1_Click);
            // 
            // btnAddSubreport
            // 
            this.btnAddSubreport.Location = new System.Drawing.Point(979, 179);
            this.btnAddSubreport.Name = "btnAddSubreport";
            this.btnAddSubreport.Size = new System.Drawing.Size(75, 23);
            this.btnAddSubreport.TabIndex = 71;
            this.btnAddSubreport.Text = "Add Sub";
            this.btnAddSubreport.UseVisualStyleBackColor = true;
            this.btnAddSubreport.Click += new System.EventHandler(this.btnAddSubreport_Click);
            // 
            // btnAddXMLDataSource
            // 
            this.btnAddXMLDataSource.Location = new System.Drawing.Point(979, 265);
            this.btnAddXMLDataSource.Name = "btnAddXMLDataSource";
            this.btnAddXMLDataSource.Size = new System.Drawing.Size(75, 23);
            this.btnAddXMLDataSource.TabIndex = 72;
            this.btnAddXMLDataSource.Text = "Add XML";
            this.btnAddXMLDataSource.UseVisualStyleBackColor = true;
            this.btnAddXMLDataSource.Click += new System.EventHandler(this.btnAddXMLDataSource_Click);
            // 
            // btnRASCopyTo
            // 
            this.btnRASCopyTo.Location = new System.Drawing.Point(782, 261);
            this.btnRASCopyTo.Name = "btnRASCopyTo";
            this.btnRASCopyTo.Size = new System.Drawing.Size(85, 23);
            this.btnRASCopyTo.TabIndex = 73;
            this.btnRASCopyTo.Text = "RAS CopyTo";
            this.btnRASCopyTo.UseVisualStyleBackColor = true;
            this.btnRASCopyTo.Click += new System.EventHandler(this.btnRASCopyTo_Click);
            // 
            // label15
            // 
            this.label15.AutoSize = true;
            this.label15.Location = new System.Drawing.Point(232, 307);
            this.label15.Name = "label15";
            this.label15.Size = new System.Drawing.Size(56, 13);
            this.label15.TabIndex = 74;
            this.label15.Text = "DB Driver:";
            // 
            // btnDBDriver
            // 
            this.btnDBDriver.Location = new System.Drawing.Point(289, 304);
            this.btnDBDriver.Name = "btnDBDriver";
            this.btnDBDriver.Size = new System.Drawing.Size(252, 20);
            this.btnDBDriver.TabIndex = 75;
            // 
            // btnSQLStatement
            // 
            this.btnSQLStatement.Location = new System.Drawing.Point(801, 704);
            this.btnSQLStatement.Name = "btnSQLStatement";
            this.btnSQLStatement.Size = new System.Drawing.Size(238, 162);
            this.btnSQLStatement.TabIndex = 76;
            this.btnSQLStatement.Text = "Must be logged on before SQL can be retrieved";
            // 
            // btrDataFile
            // 
            this.btrDataFile.Location = new System.Drawing.Point(801, 291);
            this.btrDataFile.Name = "btrDataFile";
            this.btrDataFile.Size = new System.Drawing.Size(238, 20);
            this.btrDataFile.TabIndex = 77;
            this.btrDataFile.Text = "10.161.1.33";
            // 
            // btrSearchPath
            // 
            this.btrSearchPath.Location = new System.Drawing.Point(801, 315);
            this.btrSearchPath.Name = "btrSearchPath";
            this.btrSearchPath.Size = new System.Drawing.Size(238, 20);
            this.btrSearchPath.TabIndex = 78;
            this.btrSearchPath.Text = "IntecluxCrTestA_0001";
            // 
            // lstCeLocale
            // 
            this.lstCeLocale.AllowDrop = true;
            this.lstCeLocale.FormattingEnabled = true;
            this.lstCeLocale.Location = new System.Drawing.Point(801, 402);
            this.lstCeLocale.Name = "lstCeLocale";
            this.lstCeLocale.Size = new System.Drawing.Size(238, 56);
            this.lstCeLocale.TabIndex = 81;
            this.lstCeLocale.SelectedIndexChanged += new System.EventHandler(this.lstCeLocale_SelectedIndexChanged);
            // 
            // lstExportFormatType
            // 
            this.lstExportFormatType.FormattingEnabled = true;
            this.lstExportFormatType.Location = new System.Drawing.Point(801, 476);
            this.lstExportFormatType.Name = "lstExportFormatType";
            this.lstExportFormatType.Size = new System.Drawing.Size(238, 56);
            this.lstExportFormatType.TabIndex = 82;
            this.lstExportFormatType.SelectedIndexChanged += new System.EventHandler(this.lstExportFormatType_SelectedIndexChanged);
            // 
            // label17
            // 
            this.label17.AutoSize = true;
            this.label17.Location = new System.Drawing.Point(801, 460);
            this.label17.Name = "label17";
            this.label17.Size = new System.Drawing.Size(214, 13);
            this.label17.TabIndex = 83;
            this.label17.Text = "Set Export Format: This will export the report";
            // 
            // btnRasOpen
            // 
            this.btnRasOpen.Location = new System.Drawing.Point(11, 302);
            this.btnRasOpen.Name = "btnRasOpen";
            this.btnRasOpen.Size = new System.Drawing.Size(75, 23);
            this.btnRasOpen.TabIndex = 84;
            this.btnRasOpen.Text = "RAS Open";
            this.btnRasOpen.UseVisualStyleBackColor = true;
            this.btnRasOpen.Click += new System.EventHandler(this.btnRasOpen_Click);
            // 
            // btrRuntimeVersion
            // 
            this.btrRuntimeVersion.AutoSize = true;
            this.btrRuntimeVersion.Location = new System.Drawing.Point(92, 307);
            this.btrRuntimeVersion.Name = "btrRuntimeVersion";
            this.btrRuntimeVersion.Size = new System.Drawing.Size(46, 13);
            this.btrRuntimeVersion.TabIndex = 85;
            this.btrRuntimeVersion.Text = "Runtime";
            // 
            // txtRuntimeVersion
            // 
            this.txtRuntimeVersion.Location = new System.Drawing.Point(144, 304);
            this.txtRuntimeVersion.Name = "txtRuntimeVersion";
            this.txtRuntimeVersion.Size = new System.Drawing.Size(84, 20);
            this.txtRuntimeVersion.TabIndex = 86;
            // 
            // btrVerifyDatabase
            // 
            this.btrVerifyDatabase.AutoSize = true;
            this.btrVerifyDatabase.Location = new System.Drawing.Point(936, 364);
            this.btrVerifyDatabase.Name = "btrVerifyDatabase";
            this.btrVerifyDatabase.Size = new System.Drawing.Size(101, 17);
            this.btrVerifyDatabase.TabIndex = 87;
            this.btrVerifyDatabase.Text = "Verify Database";
            this.btrVerifyDatabase.UseVisualStyleBackColor = true;
            // 
            // chkSameAsCELocale
            // 
            this.chkSameAsCELocale.AutoSize = true;
            this.chkSameAsCELocale.Location = new System.Drawing.Point(801, 383);
            this.chkSameAsCELocale.Name = "chkSameAsCELocale";
            this.chkSameAsCELocale.Size = new System.Drawing.Size(193, 17);
            this.chkSameAsCELocale.TabIndex = 88;
            this.chkSameAsCELocale.Text = "Set Viewer same as selected below";
            this.chkSameAsCELocale.UseVisualStyleBackColor = true;
            // 
            // btrFileLocation
            // 
            this.btrFileLocation.Location = new System.Drawing.Point(801, 340);
            this.btrFileLocation.Name = "btrFileLocation";
            this.btrFileLocation.Size = new System.Drawing.Size(238, 20);
            this.btrFileLocation.TabIndex = 89;
            this.btrFileLocation.Text = "sa";
            // 
            // groupBox1
            // 
            this.groupBox1.Controls.Add(this.chkUseRAS);
            this.groupBox1.Controls.Add(this.SetPCDatabase);
            this.groupBox1.Controls.Add(this.SetToXML);
            this.groupBox1.Location = new System.Drawing.Point(876, 197);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(94, 90);
            this.groupBox1.TabIndex = 90;
            this.groupBox1.TabStop = false;
            // 
            // btrPassword
            // 
            this.btrPassword.Location = new System.Drawing.Point(801, 362);
            this.btrPassword.Name = "btrPassword";
            this.btrPassword.Size = new System.Drawing.Size(129, 20);
            this.btrPassword.TabIndex = 91;
            this.btrPassword.Text = "1Oem2000";
            // 
            // lblRPTRev
            // 
            this.lblRPTRev.Location = new System.Drawing.Point(188, 275);
            this.lblRPTRev.Name = "lblRPTRev";
            this.lblRPTRev.Size = new System.Drawing.Size(58, 20);
            this.lblRPTRev.TabIndex = 92;
            // 
            // label18
            // 
            this.label18.AutoSize = true;
            this.label18.Location = new System.Drawing.Point(158, 278);
            this.label18.Name = "label18";
            this.label18.Size = new System.Drawing.Size(30, 13);
            this.label18.TabIndex = 93;
            this.label18.Text = "Rev:";
            // 
            // frmMain
            // 
            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
            this.ClientSize = new System.Drawing.Size(1356, 913);
            this.Controls.Add(this.label18);
            this.Controls.Add(this.lblRPTRev);
            this.Controls.Add(this.btrPassword);
            this.Controls.Add(this.groupBox1);
            this.Controls.Add(this.btrFileLocation);
            this.Controls.Add(this.chkSameAsCELocale);
            this.Controls.Add(this.btrVerifyDatabase);
            this.Controls.Add(this.txtRuntimeVersion);
            this.Controls.Add(this.btrRuntimeVersion);
            this.Controls.Add(this.btnRasOpen);
            this.Controls.Add(this.label17);
            this.Controls.Add(this.lstExportFormatType);
            this.Controls.Add(this.lstCeLocale);
            this.Controls.Add(this.btrSearchPath);
            this.Controls.Add(this.btrDataFile);
            this.Controls.Add(this.btnSQLStatement);
            this.Controls.Add(this.btnDBDriver);
            this.Controls.Add(this.label15);
            this.Controls.Add(this.btnRASCopyTo);
            this.Controls.Add(this.btnAddXMLDataSource);
            this.Controls.Add(this.btnAddSubreport);
            this.Controls.Add(this.btrFileDSN);
            this.Controls.Add(this.SetPreviewPagesStartWith);
            this.Controls.Add(this.GetPreviewPagesStartwith);
            this.Controls.Add(this.label12);
            this.Controls.Add(this.btnRecordCount);
            this.Controls.Add(this.btnReportKind);
            this.Controls.Add(this.label11);
            this.Controls.Add(this.btnCount);
            this.Controls.Add(this.label8);
            this.Controls.Add(this.btnPrintToPrinter);
            this.Controls.Add(this.grpBoxRPTOptions);
            this.Controls.Add(this.Dan);
            this.Controls.Add(this.CommandTable);
            this.Controls.Add(this.TableLinks);
            this.Controls.Add(this.ReportObjectComboBox1);
            this.Controls.Add(this.rtnReportObjects);
            this.Controls.Add(this.btnReportObjects);
            this.Controls.Add(this.rtnSQLStatement);
            this.Controls.Add(this.PageEvent);
            this.Controls.Add(this.ReportName);
            this.Controls.Add(this.btnReportName);
            this.Controls.Add(this.btnRecordSelectionForm);
            this.Controls.Add(this.RecordSelectionForm);
            this.Controls.Add(this.btnReportVersion);
            this.Controls.Add(this.ReportVersion);
            this.Controls.Add(this.ExportToStream);
            this.Controls.Add(this.btnCloserpt);
            this.Controls.Add(this.CRPageSetup);
            this.Controls.Add(this.ExportToPDFRAS);
            this.Controls.Add(this.ExportToRPTR);
            this.Controls.Add(this.crystalReportViewer1);
            this.Controls.Add(this.ReplaceConnection);
            this.Controls.Add(this.SetToCSV);
            this.Controls.Add(this.DataSet1);
            this.Controls.Add(this.TableToCommand);
            this.Controls.Add(this.SetSchema);
            this.Controls.Add(this.GetFormula);
            this.Controls.Add(this.IntSecurity);
            this.Controls.Add(this.PictureData);
            this.Controls.Add(this.AddChart);
            this.Controls.Add(this.FieldMapping);
            this.Controls.Add(this.TextObjects);
            this.Controls.Add(this.SetLogonInfo);
            this.Controls.Add(this.SaveAsDOC);
            this.Controls.Add(this.Export);
            this.Controls.Add(this.SetParam);
            this.Controls.Add(this.SetData);
            this.Controls.Add(this.ViewReport);
            this.Controls.Add(this.btnPOController);
            this.Controls.Add(this.btnSaveRptAs);
            this.Controls.Add(this.btnOpenReport);
            this.Controls.Add(this.btnSetPrinter);
            this.Controls.Add(this.rdoDefault);
            this.Controls.Add(this.rdoCurrent);
            this.Controls.Add(this.grpBoxDefault);
            this.Controls.Add(this.grpBoxCurrent);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.Name = "frmMain";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Unmanaged RAS 2010 Printing";
            this.Load += new System.EventHandler(this.frmMain_Load);
            this.grpBoxDefault.ResumeLayout(false);
            this.grpBoxDefaultPaper.ResumeLayout(false);
            this.grpBoxCurrent.ResumeLayout(false);
            this.grpBoxCurrentPaper.ResumeLayout(false);
            this.CRPageSetup.ResumeLayout(false);
            this.CRPageSetup.PerformLayout();
            this.grpBoxRPTOptions.ResumeLayout(false);
            this.grpBoxRPTOptions.PerformLayout();
            this.groupBox1.ResumeLayout(false);
            this.groupBox1.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

		}
		#endregion

		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
        
        static void Main() 
		{
			Application.Run(new frmMain());
		}

		private void EnableDisableDefaultControls(bool flag)
		{
			Label2.Enabled = flag;
			Label5.Enabled = flag;
			Label6.Enabled = flag;		
			grpBoxDefault.Enabled = flag;
			grpBoxDefaultPaper.Enabled = flag;
			cboDefaultPrinters.Enabled = flag;
			cboDefaultPaperSizes.Enabled = flag;
			cboDefaultPaperTrays.Enabled = flag; 
		}

		private void EnableDisableCurrentControls(bool flag) 
        {
			Label1.Enabled = flag;
			Label3.Enabled = flag;
			Label4.Enabled = flag;			
			grpBoxCurrent.Enabled = flag;
			grpBoxCurrentPaper.Enabled = flag;
			cboCurrentPrinters.Enabled = flag;
			cboCurrentPaperSizes.Enabled = flag;
			cboCurrentPaperTrays.Enabled = flag; 
		}

		private void frmMain_Load(object sender, System.EventArgs e)
		{
			if (System.Drawing.Printing.PrinterSettings.InstalledPrinters.Count > 0) 
			{
				foreach(String myPrinter in System.Drawing.Printing.PrinterSettings.InstalledPrinters ) 
				{
					cboCurrentPrinters.Items.Add(myPrinter);
				}
				cboCurrentPrinters.SelectedIndex = 0;
			} 
			else
			{
				rdoCurrent.Enabled = false;
				EnableDisableCurrentControls(false);
			}
			//For printers exposed to System account as per MS Kbase 
			//http://support.microsoft.com/default.aspx?scid=kb;en-us;184291

			//Look to HKEY_USERS\.Default\Software\Microsoft\Windows NT\CurrentVersion\Devices
			Microsoft.Win32.RegistryKey mySystemPrinters = 
				Microsoft.Win32.Registry.Users.OpenSubKey(@".DEFAULT\Software\Microsoft\Windows NT\CurrentVersion\Devices");
			foreach (String defaultPrinters in mySystemPrinters.GetValueNames()) 
			{
				cboDefaultPrinters.Items.Add(defaultPrinters); 
			}
			if (cboDefaultPrinters.Items.Count > 0) 
			{
				cboDefaultPrinters.SelectedIndex = 0;
			} 
			else 
			{
				rdoDefault.Enabled = false; 
			}
		}

        //btnRecordSelectionForm.Text = @"About the book Seventy years after the conclusion of the Falthan War, three great continents - and their gods - are again at war for truth and immortality. Husk is the remnant of a once-powerful magician, defeated decades ago by the Undying Man, Lord of Bhrudwo. He lies, eviscerated, in the dungeon of Andratan, planning his revenge.  The three people he has manipulated from afar to bring him what he needs are on their way ... with no means of knowing what they are about.But even Husk cannot know everything ...About the authorRussell Kirkpatrick’s love of literature and a chance encounter with fantasy novels as a teenager opened up a vast number of possibilities to him. He realised that he could combine storytelling with his interest in mapmaking in the one project. He hasn’t looked back since …";

		private void rdoDefault_CheckedChanged(object sender, System.EventArgs e)
		{
			EnableDisableDefaultControls(rdoDefault.Checked);
		}

		private void rdoCurrent_CheckedChanged(object sender, System.EventArgs e)
		{
			EnableDisableCurrentControls(rdoCurrent.Checked);		
		}

		private void cboCurrentPrinters_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			cboCurrentPaperSizes.Items.Clear(); 
			cboCurrentPaperTrays.Items.Clear();
            cboCurrentMediaType.Items.Clear();
			System.Drawing.Printing.PrintDocument pDoc = new System.Drawing.Printing.PrintDocument();

            pDoc.PrinterSettings.PrinterName = this.cboCurrentPrinters.Text;

			foreach(System.Drawing.Printing.PaperSize myPaperSize in pDoc.PrinterSettings.PaperSizes) 
			{
                cboCurrentPaperSizes.Items.Add(myPaperSize.RawKind + ": " + myPaperSize.PaperName);
			}
			if (cboCurrentPaperSizes.Items.Count > 0) 
			{
				cboCurrentPaperSizes.SelectedIndex = 0;
			}
			foreach(System.Drawing.Printing.PaperSource  myPaperSource in pDoc.PrinterSettings.PaperSources) 
			{
				cboCurrentPaperTrays.Items.Add(myPaperSource.RawKind + ": " + myPaperSource.SourceName); 
			}
            if (cboCurrentPaperTrays.Items.Count > 0)
            {
                cboCurrentPaperTrays.SelectedIndex = 0;
            }
            //try
            //{
            //    foreach (System.Drawing.Printing.PaperSourceKind myPaperMediaType in pDoc.PrinterSettings.PaperSources)
            //    {
            //        //cboCurrentMediaType.Items.Add(myPaperMediaType.GetType());
            //    }
            //}
            //catch (Exception ex)
            //{
            //    MessageBox.Show("ERROR: " + ex.Message);
            //    return;
            //}
            if (cboCurrentMediaType.Items.Count > 0)
            {
                //cboCurrentMediaType.SelectedIndex = 0;
            }

            ////////////////////////
            //Printer p = this.pDoc.SelectedItem as Printer;
            //if (p != null)
            //{
            //    if (this.cmbPrinterMediaType.Items.Count <= 0)
            //    {
            //        this.cmbPrinterMediaType.DisplayMember = "Name";
            //        this.cmbPrinterMediaType.ValueMember = "ID";

            //        int nRes;
            //        int nRes2;
            //        IntPtr pAddr;
            //        IntPtr pAddr2;
            //        Capability node;
            //        int offset;
            //        int offset2;

            //        nRes = WindowsAPI.DeviceCapabilitiesA(p.Name, p.PortName, (short)WindowsAPI.DeviceCapabilitiesFlags.DC_MEDIATYPES, (IntPtr)null, (IntPtr)null);
            //        if (nRes > 0)
            //        {
            //            pAddr = Marshal.AllocHGlobal((int)nRes * 2);
            //            nRes = WindowsAPI.DeviceCapabilitiesA(p.Name, p.PortName, (short)WindowsAPI.DeviceCapabilitiesFlags.DC_MEDIATYPES, pAddr, (IntPtr)null);

            //            nRes2 = WindowsAPI.DeviceCapabilitiesA(p.Name, p.PortName, (short)WindowsAPI.DeviceCapabilitiesFlags.DC_MEDIATYPENAMES, (IntPtr)null, (IntPtr)null);
            //            pAddr2 = Marshal.AllocHGlobal((int)nRes2 * 64);
            //            nRes2 = WindowsAPI.DeviceCapabilitiesA(p.Name, p.PortName, (short)WindowsAPI.DeviceCapabilitiesFlags.DC_MEDIATYPENAMES, pAddr2, (IntPtr)null);

            //            offset = pAddr.ToInt32();
            //            offset2 = pAddr2.ToInt32();

            //            if (nRes == nRes2)
            //            {
            //                for (int i = 0; i < nRes; i++)
            //                {
            //                    node = new Capability();
            //                    node.ID = Marshal.ReadInt16(new IntPtr(offset + i * 2));
            //                    node.Name = Marshal.PtrToStringAnsi(new IntPtr(offset2 + i * 64));

            //                    this.cmbPrinterMediaType.Items.Add(node);
            //                }
            //            }

            //            Marshal.FreeHGlobal(pAddr);
            //            Marshal.FreeHGlobal(pAddr2);
            //        }
            //        else
            //        {
            //            MessageBox.Show("Error getting MediaTypes from the printer!");
            //        }

            //    }
            //}

            /////////////////////////
		}

		private void cboDefaultPrinters_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			cboDefaultPaperSizes.Items.Clear(); 
			cboDefaultPaperTrays.Items.Clear(); 
			System.Drawing.Printing.PrintDocument pDoc = new System.Drawing.Printing.PrintDocument();
			
			pDoc.PrinterSettings.PrinterName = this.cboDefaultPrinters.Text;
			foreach(System.Drawing.Printing.PaperSize myPaperSize in pDoc.PrinterSettings.PaperSizes) 
			{
                cboDefaultPaperSizes.Items.Add(myPaperSize.RawKind + ": " + myPaperSize.PaperName); 
			}
			if (cboDefaultPaperSizes.Items.Count > 0) 
			{
				cboDefaultPaperSizes.SelectedIndex = 0;
			}
			foreach(System.Drawing.Printing.PaperSource  myPaperSource in pDoc.PrinterSettings.PaperSources) 
			{
                cboDefaultPaperTrays.Items.Add(myPaperSource.RawKind + ": " + myPaperSource.SourceName); 
			}
			if (cboDefaultPaperTrays.Items.Count > 0) 
			{
				cboDefaultPaperTrays.SelectedIndex = 0;
			}
		}

        bool IsRpt = true;
        bool IsLoggedOn; // = false;
        bool IsCRSE = false;
        bool CRUserDefined = false;
        bool NoPrinterNoDissoc = false;
        bool DesignPrinternotfound = false;
        bool NoPrinterWEB = false;

		private void grpBoxCurrent_Enter(object sender, System.EventArgs e)
		{
		
		}

        private void lstCeLocale_SelectedIndexChanged(object sender, EventArgs e)
        {
            //this is the routine to set the default language locale for the report. Must be done before the report is loaded.
            CrystalDecisions.ReportAppServer.CommonControls.CeLocale myceLocale = (CrystalDecisions.ReportAppServer.CommonControls.CeLocale)lstCeLocale.SelectedItem;

            try
            {
                rpt.ReportClientDocument.LocaleID = (CrystalDecisions.ReportAppServer.DataDefModel.CeLocale)myceLocale;
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR: " + ex.Message);
            }
        }

        private void btnRasOpen_Click(object sender, EventArgs e)
        {
            // NOTE: Cortez does not support unmanaged reporting so have to look into using version 14 Enterprise dll's to connect to CRSE 2011.
            CrystalDecisions.CrystalReports.Engine.ReportDocument rpt = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            rptClientDoc = new CrystalDecisions.ReportAppServer.ClientDoc.ReportClientDocument(); // ReportClientDocumentClass();
            DateTime dtStart;
            TimeSpan difference;

            // this line should return the number of concurent reports being executed
            int i = CrystalDecisions.CrystalReports.Engine.ReportDocument.GetConcurrentUsage();

            // do not modify this works
            // this line uses the local PC as the RAS server/services running
            //rptClientDoc.ReportAppServer = "VMDWCR2k8RAS"; //System.Environment.MachineName;
            // rassdk means load from local HD
            // ras requires access to the Ras Server folder
            String RPTPath = btnReportName.Text; // "rassdk://c:\\RASReports\\formulas.rpt"; c:\\RASReports\\formulas.rpt
            //Set the ReportAppServer and open the document
            rptClientDoc.ReportAppServer = "192.168.13.170";

            object RPTObject = (object)RPTPath;
            try
            {
                dtStart = DateTime.Now;

                rptClientDoc.Open(ref RPTObject, 0);
                IsRpt = false;
                difference = DateTime.Now.Subtract(dtStart);
                btnReportObjects.Text += "Report Document Load: " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + "\r\n";
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR: " + ex.Message);
                return;
            }
            IsCRSE = true;
            // do not modify this works

            btnOpenReport.Enabled = false;
            btnSaveRptAs.Enabled = true;
            ViewReport.Enabled = true;
            btnCloserpt.Enabled = true;
            ViewReport.Enabled = true;
            btnSetPrinter.Enabled = true;
            btnPOController.Enabled = true;
            btnPrintToPrinter.Enabled = true;
            btnSavedPrinterName.Text = "Dissociate checked on";
            //btnReportKind.Text = rpt.ReportDefinition.ReportKind.ToString();

            // determine the report locale:
            CrystalDecisions.ReportAppServer.DataDefModel.CeLocale preferredViewingLocaleID;
            preferredViewingLocaleID = rptClientDoc.LocaleID;
            CrystalDecisions.ReportAppServer.DataDefModel.PropertyBag PromptProperties = new PropertyBag();

            int dbConCount = rptClientDoc.DatabaseController.GetConnectionInfos(PromptProperties).Count;
            String DBDriver = "";

            for (int x = 0; x < dbConCount; x++)
            {
                try
                {
                    DBDriver = rptClientDoc.DatabaseController.GetConnectionInfos(PromptProperties)[x].Attributes.get_StringValue("Database DLL").ToString();
                    btnDBDriver.Text += DBDriver + " :";
                }
                catch (Exception ex)
                {
                    btnDBDriver.Text = "ERROR: " + ex.Message;
                    return;
                }
            }

            if (dbConCount == 0)
                btnDBDriver.Text = "NO Datasource in report";


            //// SP 4
            //System.Diagnostics.FileVersionInfo fileVersionInfo = System.Diagnostics.FileVersionInfo.GetVersionInfo(MyVerison.Location);
            //txtRuntimeVersion.Text += fileVersionInfo.FileVersion.ToString();
            if (CRVer == "12")
            {
                btnReportKind.Text = ".ReportKind Not supported in CR 2008";
            }

            // Record selection formula with comments included can only be retrieve via RAS
            CrystalDecisions.ReportAppServer.DataDefModel.ISCRFilter myRecordSelectionWithComments; // = new CrystalDecisions.ReportAppServer.DataDefModel.;
            myRecordSelectionWithComments = rptClientDoc.DataDefController.DataDefinition.RecordFilter;
            if (myRecordSelectionWithComments.FreeEditingText != null)
            {
                myRecordSelectionWithComments.FreeEditingText = rptClientDoc.DataDefController.RecordFilterController.GetFormulaText();
                btnRecordSelectionForm.Text = myRecordSelectionWithComments.FreeEditingText.ToString();
            }
            else
                btnRecordSelectionForm.Text = "No Record Selection formula";

            //btnRecordSelectionForm.Text = rpt.RecordSelectionFormula.ToString();

            btnReportVersion.Text = rptClientDoc.MajorVersion.ToString() + "." + rptClientDoc.MinorVersion.ToString();

            //getPrinterInfoOnOpen(rpt);
            getReportOptionsOnOpen(rptClientDoc);
        }

		private void btnOpenReport_Click(object sender, System.EventArgs e) 
		{
            rptClientDoc = new CrystalDecisions.ReportAppServer.ClientDoc.ReportClientDocument(); // ReportClientDocumentClass();
            DateTime dtStart;
            TimeSpan difference;

            // do not modify this works
            //// this line uses the local PC as the RAS server/services running
            ////rptClientDoc.ReportAppServer = "VMDWCR2k8RAS"; //System.Environment.MachineName;
            //// rassdk means load from local HD
            //// ras requires access to the Ras Server folder
            //String RPTPath = "rassdk://d:\\RASReports\\formulas.rpt";
            ////Set the ReportAppServer and open the document
            //rptClientDoc.ReportAppServer = "192.168.13.170";

            //object RPTObject = (object)RPTPath;
            //rptClientDoc.Open(ref RPTObject, 0);
            // do not modify this works

            openFileDialog.Filter = "Crystal Reports (*.rpt)|*.rpt|Crystal Reports Secure (*.rptr)|*.rptr";
            //openFileDialog1.Filter = "txt files (*.txt)|*.txt|All files (*.*)|*.*";
            openFileDialog.FilterIndex = 1;

            //rptClientDoc.MinorVersion();

			if (openFileDialog.ShowDialog() == DialogResult.OK) 
			{
				btnOpenReport.Enabled = false;
				btnSaveRptAs.Enabled = false;
                btnCloserpt.Enabled = false;
				object rptName = openFileDialog.FileName;

                dtStart = DateTime.Now;

                try
                {
                    // this one does not use crystalras.exe as a service
                    rpt.Load(rptName.ToString(), OpenReportMethod.OpenReportByTempCopy);
                    difference = DateTime.Now.Subtract(dtStart);
                    btnReportObjects.Text += "Report Document Load: " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + "\r\n";
                    // this one uses RAS
                    //rpt.Load(@"ras://\\" + Server.MapPath("" + Request.ApplicationPath) + @"\Reports\ChartComparison.rpt", OpenReportMethod.OpenReportByTempCopy);


                    //Member of CrystalDecisions.ReportAppServer.ClientDoc.ISCDClientDocument

                    //MessageBox.Show(myLocale.ProductLocale = rpt.DataDefinition .ToString());

                    string sFileName = rptName.ToString();
                    try
                    {
                        // Read File Details from CFileInfo Object
                        FileInfo oDetailedFileInfo = new FileInfo(sFileName);
                        //txtName.Text = oDetailedFileInfo.FileName;
                        //txtFiletype.Text = oDetailedFileInfo.FileType;
                        //txtFileSize.Text = oDetailedFileInfo.FileSize.ToString();
                        //txtAuthor.Text = oDetailedFileInfo.FileAuthor;
                        //txtCategory.Text = oDetailedFileInfo.FileCategory;
                        //txtComment.Text = oDetailedFileInfo.FileComment;
                        //txtSubject.Text = oDetailedFileInfo.FileSubject;
                        //txtTitle.Text = oDetailedFileInfo.FileTitle;
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Could not read File information\r\n"
                                        + ex.Message, "Error while getting Info",
                                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }


                    //MessageBox.Show(((System.IO.FileSystemInfo)(oFileInfo.Attributes.GetTypeCode().ToString());

                    //if (rptName.ToString() != null || rptName.ToString().Length == 0)
                    //{
                       //MessageBox.Show("My File's Name: \"" + oFileInfo.Name + "\"");
                    //   //For  calculating the size of files it holds.
                    //   MessageBox.Show("myFile total Size: " + oFileInfo.Length.ToString());

                    //}

                    //lblRPTRev = File.GetAttributes;

                    btnOpenReport.Enabled = false;
                    btnSaveRptAs.Enabled = true;
                    ViewReport.Enabled = true;
                    btnCloserpt.Enabled = true;
                    ViewReport.Enabled = true;
                    btnSetPrinter.Enabled = true;
                    btnPOController.Enabled = true;
                    btnPrintToPrinter.Enabled = true;
                    btnReportName.Text = rptName.ToString(); // +" Record Count: " + rpt.FormatEngine.GetLastPageNumber(new CrystalDecisions.Shared.ReportPageRequestContext()).ToString();
                    btnSavedPrinterName.Text = "Dissociate checked on";
                    btnReportKind.Text = rpt.ReportDefinition.ReportKind.ToString();
                    //btnReportName.Text = rptClientDoc.DisplayName.ToString();
                }
                catch (Exception ex)
                {
                    if (ex.Message.ToString() == "Object reference not set to an instance of an object.")
                        MessageBox.Show("ERROR: Object reference not set to an instance of an object.");
                    else
                        if (ex.Message.ToString() == "External component has thrown an exception.")
                        {
                            MessageBox.Show("ERROR: External component has thrown an exception.");
                        }
                        else
                        {
                            {
                                if (ex.InnerException.Message != null)
                                {
                                    MessageBox.Show("ERROR: " + ex.Message + " ;" + ex.InnerException.Message);

                                    //cool but of no use to release mode
                                    //string myURL = @"http://search.sap.com/ui/scn#query=" + ex.InnerException.Message + "&startindex=1&filter=scm_a_site%28scm_v_Site11%29&filter=scm_a_modDate%28*%29&timeScope=all";
                                    //string fixedString = myURL.Replace(" ", "%20");

                                    ////System.Diagnostics.Process.Start(@"C:\Program Files (x86)\Internet Explorer\iexplore.exe", myURL);
                                    //System.Diagnostics.Process.Start(@"C:\Program Files (x86)\Mozilla Firefox\firefox.exe", fixedString);

                                    ////string myURL = @"C:\Program Files (x86)\SAP BusinessObjects\Crystal Reports 2011\Help\en\crw.chm";
                                    ////System.Diagnostics.Process.Start(myURL);
                                    //cool but of no use to release mode

                                }
                                else
                                {
                                    MessageBox.Show("ERROR: " + ex.Message);
                                }
                            }
                        }

                    btnOpenReport.Enabled = true;
                    ViewReport.Enabled = false;
                    btnSaveRptAs.Enabled = false;
                    ViewReport.Enabled = false; 
                    btnCloserpt.Enabled = false;
                    btnSetPrinter.Enabled = false;
                    btnPOController.Enabled = false;
                    btnReportKind.Text = "";
                    return;
                }
                // then clone the report
                rpt1 = (CrystalDecisions.CrystalReports.Engine.ReportDocument)rpt.Clone();
                // this assigns the report to RAS for modification
                rptClientDoc = rpt.ReportClientDocument;
                rptClientDoc1 = rpt.ReportClientDocument;

                // determine the report locale:
                CrystalDecisions.ReportAppServer.DataDefModel.CeLocale preferredViewingLocaleID;
                preferredViewingLocaleID = rptClientDoc.LocaleID;

                int dbConCount = rptClientDoc.DatabaseController.GetConnectionInfos().Count;
                String DBDriver = "";

                for (int x = 0; x < dbConCount; x++)
                {
                    try
                    {
                        DBDriver = rptClientDoc.DatabaseController.GetConnectionInfos()[x].Attributes.get_StringValue("Database DLL").ToString();
                        btnDBDriver.Text += DBDriver + " :";
                    }
                    catch (Exception ex)
                    {
                        btnDBDriver.Text = "ERROR: " + ex.Message;
                        return;
                    }
                }

                if (dbConCount == 0)
                    btnDBDriver.Text = "NO Datasource in report";

                // this line should return the number of concurrent reports being executed
                int i = CrystalDecisions.CrystalReports.Engine.ReportDocument.GetConcurrentUsage();

                // SP 4
                btnReportKind.Text = "Eng: " + rpt.ReportDefinition.ReportKind.ToString() + " : RAS - " + rptClientDoc.ReportDefController.ReportDefinition.ReportKind.ToString();

                // SP 2 addition
                //crystalReportViewer1.SetFocusOn(UIComponent.Page);

                //CrystalDecisions.Shared.PrintLayoutSettings.PrintScaling.Scale = PrintLayoutSettings.PrintScaling.DoNotScale;

                //rpt.FormatEngine.GetLastPageNumber(new ReportPageRequestContext());
                //rpt.FormatSection += new FormatSectionEventHandler(report_FormatSection);
                //EventEnabledArgs enableArgs = new EventEnabledArgs();
                //enableArgs.FormattingEnabled = true;
                //rpt.EnableEvent(enableArgs);

                //CrystalDecisions.CrystalReports.Engine.FormatSectionEventArgs myTrigger = new FormatSectionEventArgs();

                                
                // this one uses the RAS Service
                //rptClientDoc.Open(ref rptName, (int) CdReportClientDocumentOpenOptionsEnum.cdOpenReportRetrieveMinimumReportDocument);

                //MessageBox.Show("Report version: " + rptClientDoc.MajorVersion.ToString() + "." + rptClientDoc.MinorVersion.ToString(), "RAS" ,MessageBoxButtons.OK,MessageBoxIcon.Information );
                
				//MessageBox.Show("Report opened.","RAS",MessageBoxButtons.OK,MessageBoxIcon.Information );

                //btnSQLString.text = "";
                
                // Record selection formula with comments included can only be retrieve via RAS
                CrystalDecisions.ReportAppServer.DataDefModel.ISCRFilter myRecordSelectionWithComments; // = new CrystalDecisions.ReportAppServer.DataDefModel.;
                myRecordSelectionWithComments = rptClientDoc.DataDefController.DataDefinition.RecordFilter;
                if (myRecordSelectionWithComments.FreeEditingText != null)
                {
                    myRecordSelectionWithComments.FreeEditingText = rptClientDoc.DataDefController.RecordFilterController.GetFormulaText();
                    btnRecordSelectionForm.Text = myRecordSelectionWithComments.FreeEditingText.ToString();
                }
                else
                    btnRecordSelectionForm.Text = "No Record Selection formula"; 

                //btnRecordSelectionForm.Text = rpt.RecordSelectionFormula.ToString();

                btnReportVersion.Text = rptClientDoc.MajorVersion.ToString() + "." + rptClientDoc.MinorVersion.ToString();

                //MessageBox.Show(rpt.FormatEngine.GetLastPageNumber(new CrystalDecisions.Shared.ReportPageRequestContext()).ToString());

                getPrinterInfoOnOpen(rpt);
                GetPreviewPagesStartwithOpen(rpt);
                getReportOptionsOnOpen(rptClientDoc);

                if (IsLoggedOn)
                {
                    dtStart = DateTime.Now;
                    GroupPath gp = new GroupPath();
                    string tmp = String.Empty;
                    try
                    {
                        rptClientDoc.RowsetController.GetSQLStatement(gp, out tmp);
                        btnSQLStatement.Text = tmp;
                    }
                    catch (Exception ex)
                    {
                        btnSQLStatement.Text = "ERROR: " + ex.Message;
                        return;
                    }
                    difference = DateTime.Now.Subtract(dtStart);
                    btnReportObjects.Text += "Get SQL Statement: " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + "\r\n";
                }
            }
		}

        private void timeCounter(object sender, EventArgs e)
        {
            DateTime dtStart;
            dtStart = DateTime.Now;
            btnSQLStatement.Text += "\nClicked View Report End time: \n" + dtStart.ToString();

            string[] dateValues = { "30/12/2011", "12/30/2011", "30/12/11", "12/30/11" };
            string pattern = "MM/dd/yyyy";
            DateTime parsedDate;

            foreach (var dateValue in dateValues)
            {
                if (DateTime.TryParseExact(dateValue, pattern, null, DateTimeStyles.None, out parsedDate))
                    MessageBox.Show("Converted: " + dateValue + " to: " + parsedDate);
                else
                    MessageBox.Show("Unable to convert: " + dateValue + " to a date and time.");
            }
            // The example displays the following output: 
            //    Unable to convert '30-12-2011' to a date and time. 
            //    Unable to convert '12-30-2011' to a date and time. 
            //    Unable to convert '30-12-11' to a date and time. 
            //    Converted '12-30-11' to 12/30/2011.

            //DateTime dtStart;
            //TimeSpan difference;
            //// init report 
            //dtStart = DateTime.Now;
            //ReportDocument rdReport = new ReportDocument();
            //difference = DateTime.Now.Subtract(dtStart);
            //textBox1.Text += "Report Doc initialization: " + difference.Seconds.ToString() + "\r\n";

            ////load report 
            //dtStart = DateTime.Now;
            //rdReport.Load("c:/test/TpCtLudek2008.rpt");
            //difference = DateTime.Now.Subtract(dtStart);
            //textBox1.Text += "Report Document Load: " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + "\r\n";

            ////view report 
            //dtStart = DateTime.Now;
            //crystalReportViewer1.ReportSource = rdReport;

            //difference = DateTime.Now.Subtract(dtStart);
            //textBox1.Text += "Sent to viewer: " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + "\r\n";

        }

        private void getPrinterInfoOnOpen(CrystalDecisions.CrystalReports.Engine.ReportDocument rpt)
        {
            CrystalDecisions.Shared.PrintLayoutSettings PrintLayout = new CrystalDecisions.Shared.PrintLayoutSettings();
            CrystalDecisions.CrystalReports.Engine.PrintOptions ENprOpts = rpt.PrintOptions;

            CrystalDecisions.ReportAppServer.ReportDefModel.PrintOptions rptPRT = new CrystalDecisions.ReportAppServer.ReportDefModel.PrintOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.PrintOptions rptPRTCloned = new CrystalDecisions.ReportAppServer.ReportDefModel.PrintOptions();
            PrinterSettings ps = new PrinterSettings();
            PageSettings pgs = new PageSettings();

            //rpt.PrintOptions.CustomPaperSource.ToString();
            rpt.PrintOptions.PaperSize.ToString();

            rptPRT = rptClientDoc.PrintOutputController.GetPrintOptions();
            rptPRTCloned = rptPRT.Clone(); // not used but if making changes you will need to clone the collection.
            PrintLayout.Scaling = PrintLayoutSettings.PrintScaling.DoNotScale;


            if (rpt.PrintOptions.SavedPrinterName.Length != 0)
            {
                btnSavedPrinterName.Text = rpt.PrintOptions.SavedPrinterName.ToString();
            }
            else
                btnSavedPrinterName.Text = "Printer is Display mode"; // rptPRT.SavedPrinterName.ToString();

            //SP 8
            try
            {
                if (rptPRT.DriverName == "" && rptPRT.SavedDriverName.ToString() != "winspool") // Page Setup OK button was not clicked
                {
                    CRPrinterName.Text = "Printer is Display mode";
                    float MyHeight = (rptPRT.PageContentHeight / isMetric) + (rptPRT.PageMargins.Top / isMetric) + (rptPRT.PageMargins.Bottom / isMetric);
                    float MyWidth = (rptPRT.PageContentWidth / isMetric) + (rptPRT.PageMargins.Left / isMetric) + (rptPRT.PageMargins.Right / isMetric);
                    // this formats the values to look the same as in CRD
                    string MyWidthST = string.Format("{0:00.000}", MyWidth);
                    string MyHeightST = string.Format("{0:00.000}", MyHeight);
                    CRPaperSize.Text = "Horiz: " + MyWidthST.Trim('0') + " x Vert: " + MyHeightST.TrimStart('0');
                    //btnPaperSizeName.Text = "User Defined Paper size";
                    MyHeight = 0;
                    MyWidth = 0;
                }

                if (rptPRT.DriverName == "" && rptPRT.SavedDriverName.ToString() == "winspool") // Design printer not found
                {
                    isMetric = 1000;
                    CRPrinterName.Text = "Design Printer not found";
                    float MyHeight = (rptPRT.PageContentHeight / isMetric); // + (rptPRT.PageMargins.Top / isMetric) + (rptPRT.PageMargins.Bottom / isMetric);
                    float MyWidth = (rptPRT.PageContentWidth / isMetric); // +(rptPRT.PageMargins.Left / isMetric) + (rptPRT.PageMargins.Right / isMetric);
                    // this formats the values to look the same as in CRD
                    string MyWidthST = string.Format("{0:00.000}", MyWidth);
                    string MyHeightST = string.Format("{0:00.000}", MyHeight);
                    CRPaperSize.Text = "Horiz: " + MyWidthST.Trim('0') + " x Vert: " + MyHeightST.TrimStart('0');
                    CRUserDefined = true;
                    DesignPrinternotfound = true;
                }

                if (rptPRT.DriverName == "DISPLAY") // No Printer Selected or user defined paper size - bug in getting paper size for User Defined - ADAPT01728796
                {
                    CRPrinterName.Text = "No Printer Checked";
                    CrNoPrinter.Checked = true;
                    if (rptPRT.SavedPaperName.ToString() == "")
                        CRUserDefined = true;
                    else
                        CRUserDefined = false;
                    float MyHeight = (rptPRT.PageContentHeight / isMetric) + (rptPRT.PageMargins.Top / isMetric) + (rptPRT.PageMargins.Bottom / isMetric);
                    float MyWidth = (rptPRT.PageContentWidth / isMetric) + (rptPRT.PageMargins.Left / isMetric) + (rptPRT.PageMargins.Right / isMetric);
                    // this formats the values to look the same as in CRD
                    string MyWidthST = string.Format("{0:00.000}", MyWidth);
                    string MyHeightST = string.Format("{0:00.000}", MyHeight);
                    CRPaperSize.Text = "W: " + MyWidthST.Trim('0') + " x H: " + MyHeightST.TrimStart('0');
                    DesignPrinternotfound = true;
                    NoPrinterNoDissoc = true;
                    NoPrinterWEB = true;
                }

                if (rptPRT.DriverName == "DISPLAY" && rptPRT.DissociatePageSizeAndPrinterPaperSize.Equals(false)) // No Printer Selected or user defined paper size Dissociate checked off
                {
                    CRPrinterName.Text = "Default Printer used";
                    CRUserDefined = false;
                    if (rptPRT.SavedPaperName.ToString() != "")
                        CRUserDefined = true;
                    else
                        CRUserDefined = false;
                    NoPrinterNoDissoc = true;
                }

                //else // No Printer Selected or user defined paper size - bug in getting paper size for User Defined - ADAPT01728796
                if (rptPRT.DriverName == "DISPLAY" && rptPRT.DissociatePageSizeAndPrinterPaperSize.Equals(true)) // No Printer Selected or user defined paper size Dissociate checked on
                {
                    CRPrinterName.Text = "Default Printer used";
                    CRUserDefined = false;
                    if (rptPRT.SavedPaperName.ToString() != "")
                        CRUserDefined = true;
                    else
                        CRUserDefined = false;
                    //NoPrinterNoDissoc = true;
                }

                if (rptPRT.DriverName.ToString() == "winspool") // this changes to actual printer name if printer is installed
                {
                    CRPrinterName.Text = rptPRT.PrinterName.ToString(); // +"User Defined Paper Size";
                    if (rptPRT.PaperSize.ToString() == "crPaperSizeUser")
                        CRUserDefined = true;
                    else
                        CRUserDefined = false;
                    float MyHeight = (rptPRT.PageContentHeight / isMetric) + (rptPRT.PageMargins.Top / isMetric) + (rptPRT.PageMargins.Bottom / isMetric);
                    float MyWidth = (rptPRT.PageContentWidth / isMetric) +(rptPRT.PageMargins.Left / isMetric) + (rptPRT.PageMargins.Right / isMetric);
                    // this formats the values to look the same as in CRD
                    string MyWidthST = string.Format("{0:00.000}", MyWidth);
                    string MyHeightST = string.Format("{0:00.000}", MyHeight);
                    CRPaperSize.Text = "W: " + MyWidthST.Trim('0') + " x H: " + MyHeightST.TrimStart('0');
                    btnPaperSizeName.Text = rptPRT.SavedPaperName.ToString();
                    DesignPrinternotfound = false;
                }

                if (rptPRT.SavedDriverName.ToString() == "winspool") // this changes to actual printer name if installed
                {
                    if (System.Drawing.Printing.PrinterSettings.InstalledPrinters.Count > 0)
                    foreach (String myPrinter1 in System.Drawing.Printing.PrinterSettings.InstalledPrinters)
                    {
                        if (myPrinter1.ToString() == rptPRT.SavedPrinterName.ToString())
                        {
                            CRPrinterName.Text = myPrinter1.ToString();
                        }
                        //else
                            //CRPrinterName.Text = "Design Printer not found";
                    }
                }

                if (rptPRT.DriverName == "" && rptPRT.SavedDriverName.ToString() == "" && rptPRT.DissociatePageSizeAndPrinterPaperSize.Equals(false)) // Use Default printer - dissociate unchecked
                {
                    CRPrinterName.Text = "Default Printer used";
                    CRUserDefined = false;
                    //NoPrinterNoDissoc = true;
                }
            }
            catch (Exception ex)
            {
                btnSQLStatement.Text = "Unknown Printer error: " + ex.Message;
                return;
            }

            // get the printer name if found
            if (rptPRT.PrinterName != "")
            {
                if (System.Drawing.Printing.PrinterSettings.InstalledPrinters.Count > 0)
                {
                    foreach (String myPrinter1 in System.Drawing.Printing.PrinterSettings.InstalledPrinters)
                    {
                        if (myPrinter1.ToString() == rptPRT.PrinterName.ToString())
                        {
                            CRPrinterName.Text = rptPRT.PrinterName.ToString();
                        }
                    }
                }
            }

            if (rptPRT.DriverName != "DISPLAY" && rptPRT.DriverName != "")
            #region PaperSource
            {
                if (System.Drawing.Printing.PrinterSettings.InstalledPrinters.Count > 0)
                {
                    foreach (String myPrinter in System.Drawing.Printing.PrinterSettings.InstalledPrinters)
                    {
                        if (myPrinter.ToString() == CRPrinterName.Text.ToString())
                        {
                            {
                                switch (CRPaperTray.Text)
                                {
                                    case "crPaperSourceAuto":
                                        CRPaperTray.Text = "Auto select";
                                        break;
                                    case "crPaperSourceCassette":
                                        CRPaperTray.Text = "Cassette";
                                        break;
                                    case "crPaperSourceEnvelope":
                                        CRPaperTray.Text = "Envelope";
                                        break;
                                    case "crPaperSourceEnvManual":
                                        CRPaperTray.Text = "Envelope manual feed";
                                        break;
                                    case "crPaperSourceFormSource":
                                        CRPaperTray.Text = "Form source";
                                        break;
                                    case "crPaperSourceLargeCapacity":
                                        CRPaperTray.Text = "Large capacity paper tray";
                                        break;
                                    case "crPaperSourceLargeFmt":
                                        CRPaperTray.Text = "Large format paper";
                                        break;
                                    case "crPaperSourceLower":
                                        CRPaperTray.Text = "Lower paper tray";
                                        break;
                                    case "crPaperSourceManual":
                                        CRPaperTray.Text = "Manual feed";
                                        break;
                                    case "crPaperSourceMiddle":
                                        CRPaperTray.Text = "Middle paper tray";
                                        break;
                                    case "crPaperSourceSmallFmt":
                                        CRPaperTray.Text = "Small format paper";
                                        break;
                                    case "crPaperSourceTractor":
                                        CRPaperTray.Text = "Tractor feed";
                                        break;
                                    case "crPaperSourceUpper":
                                        CRPaperTray.Text = "Upper paper tray";
                                        break;
                                    default:
                                        CRPaperTray.Text = "User Defined";
                                        break;
                                }
                            }
                        }
                    }
                }
                #endregion PaperSource
            }

            // MUST GET THIS FROM THE REPORT !!!!! AND THEN BE ABLE TO SET IT Fixed in SP 5
            CRPaperTray.Text += ": " + rptPRT.PaperSource.ToString();
            rpt.PrintOptions.PaperSource = rpt.PrintOptions.PaperSource;

            // Member                        Description 
            // crPaperSourceAuto             Auto select.  
            // crPaperSourceCassette         Cassette.  
            // crPaperSourceEnvelope         Envelope.  
            // crPaperSourceEnvManual        Envelope manual feed.  
            // crPaperSourceFormSource       Form source.  
            // crPaperSourceLargeCapacity    Large capacity paper tray.  
            // crPaperSourceLargeFmt         Large format paper.  
            // crPaperSourceLower            Lower paper tray.  
            // crPaperSourceManual           Manual feed.  
            // crPaperSourceMiddle           Middle paper tray.  
            // crPaperSourceSmallFmt         Small format paper.  
            // crPaperSourceTractor          Tractor feed.  
            // crPaperSourceUpper            Upper paper tray.  

            // If the printer exists then I can get the paper tray from the printer
            //System.Drawing.Printing.PrintDocument pDoc = new System.Drawing.Printing.PrintDocument();
            //CRPrinterName.Text = rpt.PrintOptions.PrinterName.ToString();

            // this info is saved in the RPT file
            if (rptPRT.PaperOrientation.ToString() != "crPaperOrientationPortrait")
            {
                PROrientation.Text = "LandScape";
            }
            else
            {
                PROrientation.Text = "Portrait";
            }

            // show margins
            float CRLeftInt = (rptPRT.PageMargins.Left / isMetric);
            CRLeft.Text = string.Format("{0:0.000}", CRLeftInt);
            float CRRightInt = (rptPRT.PageMargins.Right / isMetric);
            CRRight.Text = string.Format("{0:0.000}", CRRightInt);
            float CRTopInt = (rptPRT.PageMargins.Top / isMetric);
            CRTop.Text = string.Format("{0:0.000}", CRTopInt);
            float CRBottomInt = (rptPRT.PageMargins.Bottom / isMetric);
            CRBottom.Text = string.Format("{0:0.000}", CRBottomInt);

            if (rptPRT.DissociatePageSizeAndPrinterPaperSize.Equals(true))
            {
                Dissociate.Checked = true;
            }
            else
            {
                Dissociate.Checked = false;
            }

            string MypSize = rptPRT.PaperSize.ToString();
            // If No printer is saved in the RPT - did not click on Page Setup then the default 13 paper sizes are assigned to this value

            if ((!CRUserDefined && !NoPrinterNoDissoc) || DesignPrinternotfound && !NoPrinterWEB) // bug in getting paper size for User Defined - ADAPT01728796 this may have to change
            {
                switch (MypSize)
                {
                    case "crPaperSizePaper10x14":
                        CRPaperSize.Text = "10x14";
                        break;
                    case "crPaperSizePaper11x17":
                        CRPaperSize.Text = "11x17";
                        break;
                    case "crPaperSizePaperA3":
                        CRPaperSize.Text = "A3";
                        break;
                    case "crPaperSizePaperA4":
                        CRPaperSize.Text = "A4";
                        break;
                    case "crPaperSizePaperA4Small":
                        CRPaperSize.Text = "A4 Small";
                        break;
                    case "crPaperSizePaperA5":
                        CRPaperSize.Text = "A5";
                        break;
                    case "crPaperSizePaperB4":
                        CRPaperSize.Text = "B4";
                        break;
                    case "crPaperSizePaperB5":
                        CRPaperSize.Text = "B5";
                        break;
                    case "crPaperSizePaperCsheet":
                        CRPaperSize.Text = "C sheet";
                        break;
                    case "crPaperSizePaperDsheet":
                        CRPaperSize.Text = "D sheet";
                        break;
                    case "crPaperSizePaperEnvelope10":
                        CRPaperSize.Text = "Envelope10";
                        break;
                    case "crPaperSizePaperEnvelope11":
                        CRPaperSize.Text = "Envelope11";
                        break;
                    case "crPaperSizePaperEnvelope12":
                        CRPaperSize.Text = "Envelope12";
                        break;
                    case "crPaperSizePaperEnvelope14":
                        CRPaperSize.Text = "Envelope14";
                        break;
                    case "crPaperSizePaperEnvelope9":
                        CRPaperSize.Text = "Envelope9";
                        break;
                    case "crPaperSizePaperEnvelopeB4":
                        CRPaperSize.Text = "EnvelopeB4";
                        break;
                    case "crPaperSizePaperEnvelopeB5":
                        CRPaperSize.Text = "EnvelopeB5";
                        break;
                    case "crPaperSizePaperEnvelopeB6":
                        CRPaperSize.Text = "EnvelopeB6";
                        break;
                    case "crPaperSizePaperEnvelopeC3":
                        CRPaperSize.Text = "EnvelopeC3";
                        break;
                    case "crPaperSizePaperEnvelopeC4":
                        CRPaperSize.Text = "EnvelopeC4";
                        break;
                    case "crPaperSizePaperEnvelopeC5":
                        CRPaperSize.Text = "EnvelopeC5";
                        break;
                    case "crPaperSizePaperEnvelopeC6":
                        CRPaperSize.Text = "EnvelopeC6";
                        break;
                    case "crPaperSizePaperEnvelopeC65":
                        CRPaperSize.Text = "EnvelopeC65";
                        break;
                    case "crPaperSizePaperEnvelopeDL":
                        CRPaperSize.Text = "EnvelopeDL";
                        break;
                    case "crPaperSizePaperEnvelopeItaly":
                        CRPaperSize.Text = "EnvelopeItaly";
                        break;
                    case "crPaperSizePaperEnvelopeMonarch":
                        CRPaperSize.Text = "EnvelopeMonarch";
                        break;
                    case "crPaperSizePaperEnvelopePersonal":
                        CRPaperSize.Text = "Personal";
                        break;
                    case "crPaperSizePaperEsheet":
                        CRPaperSize.Text = "Esheet";
                        break;
                    case "crPaperSizePaperExecutive":
                        CRPaperSize.Text = "Executive";
                        break;
                    case "crPaperSizePaperFanfoldLegalGerman":
                        CRPaperSize.Text = "FanfoldLegalGerman";
                        break;
                    case "crPaperSizePaperFanfoldStdGerman":
                        CRPaperSize.Text = "FanfoldStdGerman";
                        break;
                    case "crPaperSizePaperFanfoldUS":
                        CRPaperSize.Text = "FanfoldUS";
                        break;
                    case "crPaperSizePaperFolio":
                        CRPaperSize.Text = "Folio";
                        break;
                    case "crPaperSizePaperLedger":
                        CRPaperSize.Text = "Ledger";
                        break;
                    case "crPaperSizePaperLegal":
                        CRPaperSize.Text = "Legal";
                        break;
                    case "crPaperSizePaperLetter":
                        CRPaperSize.Text = "Letter";
                        break;
                    case "crPaperSizePaperLetterSmall":
                        CRPaperSize.Text = "LetterSmall";
                        break;
                    case "crPaperSizePaperNote":
                        CRPaperSize.Text = "Note";
                        break;
                    case "crPaperSizePaperQuarto":
                        CRPaperSize.Text = "Quarto";
                        break;
                    case "crPaperSizePaperStatement":
                        CRPaperSize.Text = "Statement";
                        break;
                    case "crPaperSizePaperTabloid":
                        CRPaperSize.Text = "Tabloid";
                        break;
                    case "crPaperSizeDefault":
                        CRPaperSize.Text = CRPaperSize.Text; // + ": " + rptPRT.PaperName.ToString();
                        btnPaperSizeName.Text = "crPaperSizeDefault"; //"Page Setup not saved";
                        break;
                    case "crPaperSizeUser": // bug in getting paper size for User Defined - ADAPT01728796
                        CRPaperSize.Text = "User Defined: " + rptPRT.PaperSize.ToString();
                        //btnPaperSizeName.Text = rptPRT.PaperName.ToString();
                        break;
                    default: // this is printer defined if printer is installed and custom paper size is defined locally
                        //CRPaperSize.Text = "Printer Defined: " + rptPRT.PaperSize.ToString();
                        //CRPaperSize.Text = ;
                        btnPaperSizeName.Text = "ENUM: " + rptPRT.PaperSize.ToString() + " Name: " + rptPRT.SavedPaperName.ToString();
                        break;
                }
            }
            else // bug in getting paper size for User Defined - ADAPT01728796 this is work around but breaks if not user defined no way to tell,
                if (!NoPrinterNoDissoc && MypSize == "")
                {
                    btnPaperSizeName.Text = "User Defined- No Printer Size defined"; // use values that were previous set after getting them from the report file.
                }
                else
                {
                    switch (MypSize) // no printer and Dissocaite checked, these are the embedded Paper Sizes
                    {
                        case "crPaperSizePaperA3":
                            CRPaperSize.Text = "A3 (297x420mm)";
                            break;
                        case "crPaperSizePaperA4":
                            CRPaperSize.Text = "A4 (210x297mm)";
                            break;
                        case "crPaperSizePaperA4Small":
                            CRPaperSize.Text = "A4 Small(210x297mm)";
                            break;
                        case "crPaperSizePaperA5":
                            CRPaperSize.Text = "A5 (148x210mm)";
                            break;
                        case "crPaperSizePaperB4":
                            CRPaperSize.Text = "B4 (250x354mm)";
                            break;
                        case "crPaperSizePaperB5":
                            CRPaperSize.Text = "B5 (182x257mm)";
                            break;
                        case "crPaperSizePaperExecutive":
                            CRPaperSize.Text = "7.25x 10.5\" (Executive)";
                            break;
                        case "crPaperSizePaperLedger":
                            CRPaperSize.Text = "17x11\" (Ledger)";
                            break;
                        case "crPaperSizePaperLegal":
                            CRPaperSize.Text = "8.5x14\" (Legal)";
                            break;
                        case "crPaperSizePaperLetter":
                            CRPaperSize.Text = "8.5x11\" (Letter)";
                            break;
                        case "crPaperSizePaperLetterSmall":
                            CRPaperSize.Text = "8.5x11\" (Letter Small)";
                            break;
                        case "crPaperSizePaperStatement":
                            CRPaperSize.Text = "5.5x8.5\" (Statement)";
                            break;
                        case "crPaperSizePaperTabloid":
                            CRPaperSize.Text = "11x17\" (Tabloid)";
                            break;
                        case "crPaperSizeUser":
                            //Paper size in text box is handled above nothing to update here
                            break;
                        default:
                            if (btnPaperSizeName.Text != "crPaperSizeDefault" || btnPaperSizeName.Text != "")
                                btnPaperSizeName.Text = "ENUM: " + rptPRT.PaperSize.ToString();
                            if (rptPRT.SavedPaperName != null)
                                btnPaperSizeName.Text += " Name: " + rptPRT.SavedPaperName.ToString();
                            break;
                    }
                }
            NoPrinterNoDissoc = true;
        }

        private void GetPreviewPagesStartwithOpen(CrystalDecisions.CrystalReports.Engine.ReportDocument rpt)
        {
            // this actually gets the ZOOM mode and according to Vitaly R&D told him it affects how the print scale works also and it does affect the print out.
            // but no idea how to get it from the report
            CrystalDecisions.Shared.PrintLayoutSettings PrintLayout; // = new PrintLayoutSettings();

            //PrintLayout = rpt(CrystalDecisions.Shared.PrintLayoutSettings()); // PrintScaling.DoNotScale;
            //if (rpt.PrintOptions.PrintLayout.Scaling == true)
            //{
            //    GetPreviewPagesStartwith.Text = "Full Size";
            //}
            //if (GetPreviewPagesStartwith.Text == PrintLayout.Centered.ToString())
            //{
            //    GetPreviewPagesStartwith.Text = "Full Size";
            //}
            //if (GetPreviewPagesStartwith.Text == PrintLayout.FitHorizontalPages.ToString())
            //{
            //    GetPreviewPagesStartwith.Text = "Full Size";
            //}
        }

        private void TableLinks_Click(object sender, EventArgs e)
        {
            ISCDReportClientDocument rcd;
            rcd = rpt.ReportClientDocument;
            IsRpt = false;

            // Below to Set/add links
            int TableCount = 0;
            int tableLinksCount = 0;
            //int x = 0;

            TableCount = rptClientDoc.DataDefController.Database.Tables.Count;
            tableLinksCount = rptClientDoc.DataDefController.Database.TableLinks.Count;

            CrystalDecisions.ReportAppServer.DataDefModel.TableLinks RasTableLinks = new CrystalDecisions.ReportAppServer.DataDefModel.TableLinks();
            CrystalDecisions.ReportAppServer.DataDefModel.Tables newtableCollection = new CrystalDecisions.ReportAppServer.DataDefModel.Tables();

            //CrystalDecisions.ReportAppServer.DataDefModel.TableJoinClass.EnforceJoin

            for (int x = 0; x <= TableCount; x++)
            {
                CrystalDecisions.ReportAppServer.DataDefModel.Table newtable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
                newtable.Name = ("raslocTable" + x.ToString());
                newtableCollection.Add(newtable);
            }

            foreach (CrystalDecisions.ReportAppServer.DataDefModel.TableLink rasTableLink in rptClientDoc.DataDefController.Database.TableLinks)
            {
                rasTableLink.Clone();

                // fadb60e4-ac7c-421d-8d59-c6a2a2a1e35f

                if (rasTableLink.SourceTableAlias.ToString() + "." + rasTableLink.SourceFieldNames[0].ToString() == "InvValuationQuery_StockItem_WarehouseItem.Internal_ID")
                {
                    rasTableLink.SourceFieldNames[0] = "StockItem_Id";
                    rasTableLink.TargetFieldNames[0] = "StockItem_Id";
                }

                if (rasTableLink.SourceTableAlias.ToString() + "." + rasTableLink.SourceFieldNames[0].ToString() == "InvValuationQuery_StockItem_StockTotal.Internal_ID")
                {
                    rasTableLink.SourceFieldNames[0] = "StockItem_Id";
                    rasTableLink.TargetFieldNames[0] = "StockItem_Id";
                }

                if (rasTableLink.SourceTableAlias.ToString() + "." + rasTableLink.SourceFieldNames[0].ToString() == "InvValuationQuery_StockItem_WarehouseItem_BinItem.Internal_ID")
                {
                    rasTableLink.SourceFieldNames[0] = "WharehouseItem_Id";
                    rasTableLink.TargetFieldNames[0] = "WharehouseItem_Id";
                }

                if (rasTableLink.SourceTableAlias.ToString() + "." + rasTableLink.SourceFieldNames[0].ToString() == "InvValuationQuery_StockItem_WarehouseItem_FifoBucketItem.Internal_ID")
                {
                    rasTableLink.SourceFieldNames[0] = "WharehouseItem_Id";
                    rasTableLink.TargetFieldNames[0] = "WharehouseItem_Id";
                }

                if (rasTableLink.SourceTableAlias.ToString() + "." + rasTableLink.SourceFieldNames[0].ToString() == "InvValuationQuery_StockItem_WarehouseItem_WarehouseBinTotal.Internal_ID")
                {
                    rasTableLink.SourceFieldNames[0] = "WharehouseItem_Id";
                    rasTableLink.TargetFieldNames[0] = "WharehouseItem_Id";
                }

                if (rasTableLink.SourceTableAlias.ToString() + "." + rasTableLink.SourceFieldNames[0].ToString() == "InvValuationQuery_StockItem_WarehouseItem_WarehouseFifoTotal.Internal_ID")
                {
                    rasTableLink.SourceFieldNames[0] = "WharehouseItem_Id";
                    rasTableLink.TargetFieldNames[0] = "WharehouseItem_Id";
                }

                if (rasTableLink.SourceTableAlias.ToString() + "." + rasTableLink.SourceFieldNames[0].ToString() == "InvValuationQuery_StockItem_WarehouseItem_EccDetailsItem.Internal_ID")
                {
                    rasTableLink.SourceFieldNames[0] = "WharehouseItem_Id";
                    rasTableLink.TargetFieldNames[0] = "WharehouseItem_Id";
                }

                if (rasTableLink.SourceTableAlias.ToString() + "." + rasTableLink.SourceFieldNames[0].ToString() == "InvValuationQuery_StockItem_WarehouseItem_WarehouseEccTotal.Internal_ID")
                {
                    rasTableLink.SourceFieldNames[0] = "WharehouseItem_Id";
                    rasTableLink.TargetFieldNames[0] = "WharehouseItem_Id";
                }
                //add the link type to the table
                rptClientDoc.DatabaseController.AddTableLink(rasTableLink);
            }

            //rptClientDoc.VerifyDatabase();


            //// use c:\reports\reportlinks.rpt based on Order and Order_details tables
            //CrystalDecisions.ReportAppServer.DataDefModel.Table raslocTable1 = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
            //CrystalDecisions.ReportAppServer.DataDefModel.Table raslocTable2 = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
            //CrystalDecisions.ReportAppServer.DataDefModel.Table raslocTable3 = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
            //CrystalDecisions.ReportAppServer.DataDefModel.Table raslocTable4 = new CrystalDecisions.ReportAppServer.DataDefModel.Table();

            //raslocTable1 = ((CrystalDecisions.ReportAppServer.DataDefModel.Table)rptClientDoc.DatabaseController.Database.Tables[0]); // Name = "Detail"
            //raslocTable2 = ((CrystalDecisions.ReportAppServer.DataDefModel.Table)rptClientDoc.DatabaseController.Database.Tables[1]); // Name = "QueryOptions"
            //raslocTable3 = ((CrystalDecisions.ReportAppServer.DataDefModel.Table)rptClientDoc.DatabaseController.Database.Tables[2]); // Name = "SystemInformation"
            //raslocTable4 = ((CrystalDecisions.ReportAppServer.DataDefModel.Table)rptClientDoc.DatabaseController.Database.Tables[3]); // Name = "TranslatedText"

            //raslocTable1 = ((CrystalDecisions.ReportAppServer.DataDefModel.Table)rptClientDoc.DatabaseController.Database.Tables[3]); // Name = "Detail"
            //raslocTable2 = ((CrystalDecisions.ReportAppServer.DataDefModel.Table)rptClientDoc.DatabaseController.Database.Tables[4]); // Name = "QueryOptions"

            ////variables for the link
            //CrystalDecisions.ReportAppServer.DataDefModel.TableLink rasTableLink = new CrystalDecisions.ReportAppServer.DataDefModel.TableLink();
            //Strings sourceFields = new Strings();
            //Strings targetFields = new Strings();

            //rptClientDoc.DatabaseController.FindTableLink(raslocTable1, raslocTable2);
            //rasTableLink.SourceFieldNames.Clone();
            //rasTableLink.SourceTableAlias.Clone();

            //rptClientDoc.DataDefController.Database.TableLinks.RemoveAll();
            //IsRpt = false;

            
            //// Now remove all of the existing table links
            //rptClientDoc.DatabaseController.RemoveTableLink(rasTableLink);

            ////set the fields we want to link
            //sourceFields.Add("Orders.Order_ID");
            //targetFields.Add("Orders_1.Order_ID");

            ////set up the Join Type and link type properties before adding
            //rptClientDoc.DataDefController.Database.TableJoins[0].JoinOperator = CrTableJoinOperatorEnum.crTableJoinOperatorFullOuterJoin;
            //rasTableLink.JoinType = CrTableJoinTypeEnum.crTableJoinTypeEqualJoin;
            //rasTableLink.SourceTableAlias = raslocTable1.Alias;
            //rasTableLink.TargetTableAlias = raslocTable2.Alias;
            //rasTableLink.SourceFieldNames = sourceFields;
            //rasTableLink.TargetFieldNames = targetFields;

            ////add the link type to the table
            //rptClientDoc.DatabaseController.AddTableLink(rasTableLink);

            ////add the join type and link type to the table
            //rptClientDoc.DataDefController.Database.TableJoins[1].JoinOperator = CrTableJoinOperatorEnum.crTableJoinOperatorFullOuterJoin;
            //rasTableLink.JoinType = CrTableJoinTypeEnum.crTableJoinTypeOuterJoin;
            //rasTableLink.SourceTableAlias = raslocTable4.Alias;
            //rasTableLink.TargetTableAlias = raslocTable2.Alias;
            //rasTableLink.SourceFieldNames = sourceFields;
            //rasTableLink.TargetFieldNames = targetFields;

            ////add the link to the table
            //rptClientDoc.DatabaseController.AddTableLink(rasTableLink);

            ////add the join type and link type to the table
            //rptClientDoc.DataDefController.Database.TableJoins[2].JoinOperator = CrTableJoinOperatorEnum.crTableJoinOperatorFullOuterJoin;
            //rasTableLink.JoinType = CrTableJoinTypeEnum.crTableJoinTypeOuterJoin;
            //rasTableLink.SourceTableAlias = raslocTable4.Alias;
            //rasTableLink.TargetTableAlias = raslocTable3.Alias;
            //rasTableLink.SourceFieldNames = sourceFields;
            //rasTableLink.TargetFieldNames = targetFields;

            ////add the link to the table
            //rptClientDoc.DatabaseController.AddTableLink(rasTableLink);

            GroupPath gp = new GroupPath();
            string tmp = String.Empty;
            try
            {
                rptClientDoc.RowsetController.GetSQLStatement(gp, out tmp);
                btnSQLStatement.Text = tmp;
            }
            catch (Exception ex)
            {
                btnSQLStatement.Text = "ERROR: " + ex.Message;
                return;
            }

            //// save the report to a new folder
            //rcd.SaveAs(rcd.DisplayName, "c:\\test\\", 0);

        }

        private void btnTableLinks_TextChanged(object sender, EventArgs e)
        {
        
        }

        private void Closerpt_Click(object sender, EventArgs e)
        {
            btnOpenReport.Enabled = true;
            btnSaveRptAs.Enabled = false;
            btnCloserpt.Enabled = false;
            ViewReport.Enabled = false;
            btnSetPrinter.Enabled = false;
            btnPOController.Enabled = false;
            btnPrintToPrinter.Enabled = false;
            btnRecordSelectionForm.Text = "";
            btnReportVersion.Text = "";
            btnReportName.Text = "Select CeLocale before opening a report";
            btnSQLStatement.Text = "Log on must be set first before SQL can be retrieved";
            btnReportObjects.Text = "";
            ReportObjectComboBox1.ResetText();
            CRPaperTray.Text = "";
            btnReportStyle.Text = "";
            btnSavedPrinterName.Text = "";
            btnReportKind.Text = "";
            btnRecordCount.Text = "";
            GetPreviewPagesStartwith.Text = "";
            btnDBDriver.Text = "";
            btnHasSavedData.Checked = false;
            txtRecordCount.Text = "";
            btnDBDriver.Text = "";
            btnPaperSizeName.Text = "";
            chkSameAsCELocale.Checked = false;
            crystalReportViewer1.SetProductLocale(1033);
            CRUserDefined = false;
            NoPrinterNoDissoc = false;
            DesignPrinternotfound = false;
            NoPrinterWEB = false;

            //btrDataFile.Text = @"D:\Atest\131755\Data\file.ddf"; // - Server
            //btrSearchPath.Text = @"D:\Atest\131755\Data\Temp1\"; // - Database
            //btrFileLocation.Text = @"D:\Atest\482607\"; // - User Name 
            //btrPassword.Text = "1Oem2000"; // password

            CrNoPrinter.Checked = false;
            Dissociate.Checked = false;
            CRPaperSize.Text = "";
            PROrientation.Text = "";
            CRLeft.Text = "";
            CRRight.Text = "";
            CRTop.Text = "";
            CRBottom.Text = "";
            CRPrinterName.Text = "";
            btrVerifyDatabase.Checked = false;
            IsLoggedOn = false;

            checkBox1.CheckState = CheckState.Unchecked;
            checkBox2.CheckState = CheckState.Unchecked;
            checkBox3.CheckState = CheckState.Unchecked;
            checkBox17.CheckState = CheckState.Unchecked;
            checkBox4.CheckState = CheckState.Unchecked;
            checkBox5.CheckState = CheckState.Unchecked;
            checkBox6.CheckState = CheckState.Unchecked;
            checkBox7.CheckState = CheckState.Unchecked;
            checkBox8.CheckState = CheckState.Unchecked;
            checkBox9.CheckState = CheckState.Unchecked;
            checkBox10.CheckState = CheckState.Unchecked;
            checkBox11.CheckState = CheckState.Unchecked;
            checkBox12.CheckState = CheckState.Unchecked;
            checkBox13.CheckState = CheckState.Unchecked;
            checkBox14.CheckState = CheckState.Unchecked;
            checkBox15.CheckState = CheckState.Unchecked;
            checkBox16.CheckState = CheckState.Unchecked;
            chkUseRAS.CheckState = CheckState.Unchecked;
            cbPreferredView.Text = "";
            cbConvertDateTimeType.Text = "";
            crMaxNumOfRecords.Text = "";
            crNumOfBrowsingRecords.Text = "";
            crNumOfCachedBatches.Text = "";
            //checkBox23.Checked = myRPTOpts.ReportStyle;
            crRowsetBatchSize.Text = "";

            //rpt.Close();
            //rpt.Dispose();
            //rpt1.Close();
            //rpt.Dispose();

            rpt.ReportClientDocument.Close();
            crystalReportViewer1.ReportSource = null;
            //crystalReportViewer1.Dispose();
            crystalReportViewer1.Refresh();
            try
            {
                reportClientDocument.Close();
                reportClientDocument2.Close();
            }
            catch
            { }
            //rpt.Dispose();

            //// this manually deletes the files left behind - note good practice for debugging also.
            //string myUser = Environment.GetEnvironmentVariable("USERPROFILE");
            //string myDirectory = myUser + @"\AppData\Local\Temp\";
            //try
            //{
            //    foreach (FileInfo f in new DirectoryInfo(myDirectory).GetFiles("*.subrpt"))
            //        f.Delete();
            //}
            //catch
            //{
            //    MessageBox.Show("*.subrpt file in use");
            //}
            //try
            //{
            //    foreach (FileInfo f in new DirectoryInfo(myDirectory).GetFiles("*.rpt"))
            //        f.Delete();
            //}
            //catch
            //{
            //    MessageBox.Show("*.rpt file in use");
            //}
            //try
            //{
            //    foreach (FileInfo f in new DirectoryInfo(myDirectory).GetFiles("*.tmp"))
            //        f.Delete();
            //}
            //catch
            //{
            //    MessageBox.Show("*.tmp file in use");
            //}

            //File.Delete(@"C:\Users\I819003\AppData\Local\Temp\*.subrpt");
            //File.Delete(@"C:\Users\I819003\AppData\Local\Temp\*.rpt");
            GC.Collect();
            IsRpt = true;

        }

		private void btnSaveReportAs_Click(object sender, System.EventArgs e)
		{
            saveFileDialog.Filter = "Crystal Reports (*.rpt)|*.rpt";
            if (DialogResult.OK == saveFileDialog.ShowDialog())
            {

                object saveFolder = System.IO.Path.GetDirectoryName(saveFileDialog.FileName);
                string saveFileName = System.IO.Path.GetFileName(saveFileDialog.FileName);

                if (!IsRpt)
                {
                    rptClientDoc.SaveAs(saveFileName, ref saveFolder,
                        (int)CdReportClientDocumentSaveAsOptionsEnum.cdReportClientDocumentSaveAsOverwriteExisting);
                }
                else
                {
                    try
                    {
                        rpt.SaveAs(saveFolder + "\\" + saveFileName, true);
                    }
                    catch (Exception ex)
                    {
                        btnSQLStatement.Text = "ERROR: " + ex.Message;
                        // SetLogonInfo_Click();
                        //return;
                    }
                }
            }
		}

		private void btnSetPrinter_Click(object sender, System.EventArgs e)
		{
            // THIS WORKS BUT IT DOESN'T UPDATE THE REPORT SETTINGS - No Printer to checked off
            System.Drawing.Printing.PrintDocument pDoc = new System.Drawing.Printing.PrintDocument();
            System.Drawing.Printing.PageSettings page = new System.Drawing.Printing.PageSettings();

            CrystalDecisions.ReportAppServer.Controllers.PrintReportOptions rasPROpts = new CrystalDecisions.ReportAppServer.Controllers.PrintReportOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.PrintOptions newOpts = new CrystalDecisions.ReportAppServer.ReportDefModel.PrintOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.PrintOptions newOptsCloned = new CrystalDecisions.ReportAppServer.ReportDefModel.PrintOptions();

            //System.Drawing.Printing.PrinterSettings printerSettings = new System.Drawing.Printing.PrinterSettings();

            //CrystalDecisions.CrystalReports.Engine.PrintOptions CrPrintOpts = rpt.PrintOptions;

            //printerSettings.PrinterName = rpt.PrintOptions.PrinterName;

            ////rpt.PrinterName = ComboBox3.Text  ’  Pick up Printer Name from ComboBox.
            //CrPrintOpts.PrinterName = cboCurrentPrinters.SelectedItem.ToString();
            //System.Drawing.Printing.PageSettings pageSettings = new System.Drawing.Printing.PageSettings();
            //pageSettings.PrinterSettings.PrinterName = CrPrintOpts.PrinterName;

            ////rpt.PrintOptions.CopyFrom(printerSettings, printerSettings.DefaultPageSettings);

            CrystalDecisions.Shared.PrintLayoutSettings PrintLayout = new CrystalDecisions.Shared.PrintLayoutSettings();
            if (rpt.PrintOptions.DissociatePageSizeAndPrinterPaperSize == true)
            {
                PrintLayout.Scaling = PrintLayoutSettings.PrintScaling.Scale;
            }
            else
            {
                PrintLayout.Scaling = PrintLayoutSettings.PrintScaling.DoNotScale;
            }

            // DISPLAY = no printer. 
            // CER - MUST BE ABLE TO SET PRINTER TO A PRINTER
            // See this blog on how to set no printer http://scn.sap.com/community/crystal-reports-for-visual-studio/blog/2010/09/15/how-to-check-no-printer-on-a-crystal-report-using-the-ras-sdk-in-net
            // requires cloning a report with no printer not checked and then using those properties in the real report
            if (CrNoPrinter.Checked == true)
            {
                CrystalDecisions.CrystalReports.Engine.ReportDocument rpt1 = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
                CrystalDecisions.ReportAppServer.ClientDoc.ISCDReportClientDocument rptClientDoc2;

                rpt1.Load(@"c:\reports\ClonePrinterInfo.rpt");
                rptClientDoc2 = rpt1.ReportClientDocument;
                newOptsCloned = rptClientDoc2.PrintOutputController.GetPrintOptions();
                newOpts = newOptsCloned;
                
                rptClientDoc.PrintOutputController.ModifyPrintOptions(newOptsCloned); 
                rptClientDoc.PrintOutputController.ModifyPaperOrientation(CrPaperOrientationEnum.crPaperOrientationLandscape);
                rptClientDoc.PrintOutputController.ModifyPrinterName(newOptsCloned.PrinterName);
                rptClientDoc.PrintOutputController.ModifyUserPaperSize(newOptsCloned.PageContentHeight, newOptsCloned.PageContentWidth);
                rptClientDoc.PrintOutputController.ModifyPageMargins(newOptsCloned.PageMargins.Left, newOptsCloned.PageMargins.Right, newOptsCloned.PageMargins.Top, newOptsCloned.PageMargins.Bottom);
                //rptClientDoc.Save();
            }
            else
            {
                if (rdoCurrent.Checked)
                {
                    newOpts.PrinterName = cboCurrentPrinters.SelectedItem.ToString();
                    newOpts.DriverName = "winspool";

                    string MySTRTemp = cboCurrentPaperSizes.SelectedItem.ToString();
                    int MyENUM = 0;
                    int MyENUM1 = 0;

                    // parse the enum values from the drop down list boxes
                    MyENUM = MySTRTemp.LastIndexOf(@":");
                    MySTRTemp = cboCurrentPaperSizes.Text.Substring(0, MyENUM);
                    
                    // this will return false if enum cannot be converted
                    bool myNum = Int32.TryParse(MySTRTemp, out MyENUM1);
                    newOpts.PaperSize = (CrPaperSizeEnum)MyENUM1;
                    //newOpts.PaperSize = cboCurrentPaperSizes.SelectedIndex;
                    CRPaperSize.Text = cboCurrentPaperSizes.SelectedItem.ToString();

                    string MyPaperSource = cboCurrentPaperTrays.SelectedItem.ToString();
                    MySTRTemp = cboCurrentPaperTrays.SelectedItem.ToString();
                    MyENUM = MySTRTemp.LastIndexOf(@":");
                    MySTRTemp = cboCurrentPaperTrays.Text.Substring(0, MyENUM);

                    // this will return false if enum cannot be converted
                    myNum = Int32.TryParse(MySTRTemp, out MyENUM1);
                    newOpts.PaperSource = (CrPaperSourceEnum)MyENUM1;
                }
                else
                {
                    newOpts.PrinterName = cboDefaultPrinters.SelectedItem.ToString();
                    newOpts.DriverName = "winspool";

                    string MySTRTemp = cboDefaultPaperSizes.SelectedItem.ToString();
                    int MyENUM = 0;
                    int MyENUM1 = 0;

                    // parse the enum values from the drop down list boxes
                    MyENUM = MySTRTemp.LastIndexOf(@":");
                    MySTRTemp = cboDefaultPaperSizes.Text.Substring(0, MyENUM);

                    // this will return false if enum cannot be converted
                    bool myNum = Int32.TryParse(MySTRTemp, out MyENUM1);
                    newOpts.PaperSize = (CrPaperSizeEnum)MyENUM1;
                    //newOpts.PaperSize = cboCurrentPaperSizes.SelectedIndex;
                    CRPaperSize.Text = cboDefaultPaperSizes.SelectedItem.ToString();

                    string MyPaperSource = cboDefaultPaperTrays.SelectedItem.ToString();
                    MySTRTemp = cboDefaultPaperTrays.SelectedItem.ToString();
                    MyENUM = MySTRTemp.LastIndexOf(@":");
                    MySTRTemp = cboDefaultPaperTrays.Text.Substring(0, MyENUM);

                    // this will return false if enum cannot be converted
                    myNum = Int32.TryParse(MySTRTemp, out MyENUM1);
                    newOpts.PaperSource = (CrPaperSourceEnum)MyENUM1;
                }

                CrNoPrinter.Checked = false;
                CRPrinterName.Text = newOpts.PrinterName;
                //CRPaperTray.Text = newOpts.PaperSource.ToString();
                CRPaperTray.Text = cboCurrentPaperTrays.SelectedItem.ToString();
                
                try
                {
                    rptClientDoc.PrintOutputController.ModifyPrintOptions(newOpts);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("ERROR: " + ex.Message);
                    return;
                }
            }

            //crystalReportViewer1.ReportSource = rptClientDoc.ReportSource;
            IsRpt = false;
		}

        private void btnPOController_Click_1(object sender, System.EventArgs e) // Print To P button
		{
            System.Drawing.Printing.PrintDocument pDoc = new System.Drawing.Printing.PrintDocument();
            CrystalDecisions.ReportAppServer.Controllers.PrintReportOptions rasPROpts = new CrystalDecisions.ReportAppServer.Controllers.PrintReportOptions();
            CrystalDecisions.Shared.PrintLayoutSettings PrintLayout = new CrystalDecisions.Shared.PrintLayoutSettings();
            CrystalDecisions.ReportAppServer.ReportDefModel.PrintOptions RASPO = new CrystalDecisions.ReportAppServer.ReportDefModel.PrintOptions();

            //pDoc.DefaultPageSettings.PrinterSettings.FromPage = 1;
            //pDoc.DefaultPageSettings.PrinterSettings.ToPage = 3;

            RASPO.PrinterDuplex = CrPrinterDuplexEnum.crPrinterDuplexSimplex;

            // don't use this, use the new button
            //PrintLayout.Scaling = PrintLayoutSettings.PrintScaling.DoNotScale;

            if (pDoc.PrinterSettings.DefaultPageSettings.Color)
            {
                MessageBox.Show("Printer Supports Color", pDoc.PrinterSettings.SupportsColor.ToString());
            }

            if (rdoCurrent.Checked)
            {
                //CrystalDecisions.ReportAppServer.ReportDefModel.ISCRPrintOptions.DissociatePageSizeAndPrinterPaperSize


                rasPROpts.PrinterName = cboCurrentPrinters.Text;
                //Yunfeng: 
                int[] sizes = PaperSizeGetter.Get_PaperSizes(cboCurrentPrinters.Text, "");
                int paperSizeid = sizes[this.cboCurrentPaperSizes.SelectedIndex];
                if (paperSizeid > 0)
                {
                    rasPROpts.PaperSize = (CrystalDecisions.ReportAppServer.ReportDefModel.CrPaperSizeEnum)paperSizeid;
                }

                rasPROpts.BinName = cboCurrentPaperTrays.SelectedItem.ToString();
                //rasPROpts.PaperSource = (CrPaperSourceEnum)myPaperSource.RawKind;
                //rasPROpts.Bin = (short)myPaperSource.RawKind;

                int st;
                int ot;
                rasPROpts.NumberOfCopies = 1;
                //rasPROpts.AddPrinterPageRange(1, 1);
                //rasPROpts.AddPrinterPageRange(5, 7);
                //rasPROpts.GetNthPrinterPageRange(1, st, ot);

                rasPROpts.PrinterDuplex = CrPrinterDuplexEnum.crPrinterDuplexSimplex;

                System.Drawing.Printing.Duplex myDup = new Duplex();
                myDup = Duplex.Simplex;
                rasPROpts.PrinterDuplex = (CrPrinterDuplexEnum)myDup;

                rptClientDoc.PrintOutputController.ModifyPaperOrientation(CrPaperOrientationEnum.crPaperOrientationPortrait);

                // (CrystalDecisions.ReportAppServer.ReportDefModel.CrPaperOrientationEnum.crPaperOrientationPortrait)
                if (pDoc.DefaultPageSettings.PaperSize.Height > pDoc.DefaultPageSettings.PaperSize.Width)
                {
                    RASPO.DissociatePageSizeAndPrinterPaperSize = true;
                    rptClientDoc.PrintOutputController.ModifyPaperOrientation(CrPaperOrientationEnum.crPaperOrientationPortrait);
                }
                else
                {
                    RASPO.DissociatePageSizeAndPrinterPaperSize = true;
                    rptClientDoc.PrintOutputController.ModifyPaperOrientation(CrPaperOrientationEnum.crPaperOrientationLandscape);
                }

                string MyRptName = rpt.FileName.ToString();
                MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 2));
                rasPROpts.JobTitle = MyRptName;
            }
            else
            {
                rasPROpts.PrinterName = cboCurrentPrinters.Text;

                int[] sizes = PaperSizeGetter.Get_PaperSizes(cboCurrentPrinters.Text, "");
                int paperSizeid = sizes[this.cboCurrentPaperSizes.SelectedIndex];
                if (paperSizeid > 0)
                {
                    rasPROpts.PaperSize = (CrystalDecisions.ReportAppServer.ReportDefModel.CrPaperSizeEnum)paperSizeid;
                }

                //rasPROpts.PaperSize = (CrPaperSizeEnum)cboDefaultPaperSizes.SelectedIndex;

                //rasPROpts.PaperSource = (CrPaperSourceEnum)cboDefaultPaperTrays.SelectedIndex;

                rasPROpts.BinName = cboDefaultPaperTrays.SelectedText;
                rasPROpts.NumberOfCopies = 1;

                rasPROpts.PrinterDuplex = CrPrinterDuplexEnum.crPrinterDuplexSimplex;

                System.Drawing.Printing.Duplex myDup = new Duplex();
                myDup = Duplex.Simplex;
                rasPROpts.PrinterDuplex = (CrPrinterDuplexEnum)myDup;

                // (CrystalDecisions.ReportAppServer.ReportDefModel.CrPaperOrientationEnum.crPaperOrientationPortrait)
                if (pDoc.DefaultPageSettings.PaperSize.Height > pDoc.DefaultPageSettings.PaperSize.Width)
                {
                    RASPO.DissociatePageSizeAndPrinterPaperSize = true;
                    rptClientDoc.PrintOutputController.ModifyPaperOrientation(CrPaperOrientationEnum.crPaperOrientationPortrait);
                }
                else
                {
                    RASPO.DissociatePageSizeAndPrinterPaperSize = true;
                    rptClientDoc.PrintOutputController.ModifyPaperOrientation(CrPaperOrientationEnum.crPaperOrientationLandscape);
                }

                string MyRptName = rpt.FileName.ToString();
                MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 2));
                rasPROpts.JobTitle = MyRptName;
            }

            try
            {
                rptClientDoc.PrintOutputController.PrintReport(rasPROpts);
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR: " + ex.Message);
                return;
            }
            //MessageBox.Show("Printing report.", "RAS", MessageBoxButtons.OK, MessageBoxIcon.Information);
            IsRpt = false; 
		}

        public void PrinterSetup() // Sage Software routine
        {
            //if (SuppressUI != 0) throw new InvalidOperationException("PrinterSetup cannot be called while SuppressUI is set.");

            System.Drawing.Printing.PrintDocument pDoc = new System.Drawing.Printing.PrintDocument();
            CrystalDecisions.Shared.PrintLayoutSettings PrintLayout = new CrystalDecisions.Shared.PrintLayoutSettings();
            System.Drawing.Printing.PrinterSettings printerSettings = new System.Drawing.Printing.PrinterSettings();

            printerSettings.PrinterName = cboCurrentPrinters.SelectedItem.ToString();

            // Create print dialog and copy Crystal print options to it
            using (System.Windows.Forms.PrintDialog printDialog = new System.Windows.Forms.PrintDialog())
            {
                printDialog.UseEXDialog = true;
                rpt.PrintOptions.CopyTo(printerSettings, printerSettings.DefaultPageSettings);
                if (printerSettings.PrinterName != null) printerSettings.PrinterName = printerSettings.PrinterName;
                printDialog.PrinterSettings = printerSettings;

                //// This is a dummy form created so that RenamePrintButton can find the print dialog window
                //using (System.Windows.Forms.Form placeHolder = new System.Windows.Forms.Form())
                //{

                //    // Spool up thread to rename Print button to OK
                //    Thread renamePrintButtonThread = new Thread(new ParameterizedThreadStart(RenamePrintButton));
                //    renamePrintButtonThread.Start(placeHolder.Handle);

                //    // Show print dialog and store options from print dialog
                //    if (printDialog.ShowDialog(placeHolder) == System.Windows.Forms.DialogResult.OK)
                //    {
                //        printerSettings = printDialog.PrinterSettings;
                //        printerName = printerSettings.PrinterName;
                //        rpt.PrintOptions.CopyFrom(printerSettings, printerSettings.DefaultPageSettings);
                //    }

                //    // Clean up RenamePrintButton thread
                //    renamePrintButtonThread.Abort();
                //    renamePrintButtonThread.Join();
                //}
            }
        }

        private void btnPrintToPrinter_Click(object sender, EventArgs e)
        {
            System.Drawing.Printing.PrintDocument pDoc = new System.Drawing.Printing.PrintDocument();
            CrystalDecisions.Shared.PrintLayoutSettings PrintLayout = new CrystalDecisions.Shared.PrintLayoutSettings();
            System.Drawing.Printing.PrinterSettings printerSettings = new System.Drawing.Printing.PrinterSettings();

            //System.Drawing.Printing.PrinterSettings _printerSettings = new PrinterSettings();

            printerSettings.PrinterName = cboCurrentPrinters.SelectedItem.ToString();

            // don't use this, use the new button
            PrintLayout.Scaling = PrintLayoutSettings.PrintScaling.DoNotScale;

            // Sage used this to get the info from the printer an update the selected printer with what the report used
            //rpt.PrintOptions.CopyTo(printerSettings, printerSettings.DefaultPageSettings);

            System.Drawing.Printing.PageSettings pSettings = new System.Drawing.Printing.PageSettings(printerSettings);

            //rpt.PrintOptions.DissociatePageSizeAndPrinterPaperSize = false;
            rpt.PrintOptions.PrinterDuplex = PrinterDuplex.Default;
            rpt.PrintOptions.PaperOrientation = PaperOrientation.Portrait;

            pSettings.Margins.Left = 1;
            pSettings.Margins.Right = 1;
            pSettings.Margins.Top = 1;
            pSettings.Margins.Bottom = 1;
            pSettings.PaperSource = pSettings.PaperSource;

            rpt.PrintOptions.PrinterName = printerSettings.PrinterName.ToString();

            //System.Drawing.Printing.PageSettings pageSettings = new System.Drawing.Printing.PageSettings(printerSettings);
            //pSettings.PrinterSettings.PrinterName = pDoc.PrinterSettings.PrinterName;

            //int[] sizes = PaperSizeGetter.Get_PaperSizes(cboCurrentPrinters.Text);
            //int paperSizeid = sizes[this.cboCurrentPaperSizes.SelectedIndex];
            //if (paperSizeid > 0)
            //{
            //    //pSettings.PaperSize = pDoc.PrinterSettings.PaperSizes.(paperSizeid);
            //}

            //CrystalDecisions.CrystalReports.Engine.PrintOptions.PaperOrientation

            //rpt.PrintOptions.PaperOrientation = PaperOrientation.Landscape;
            //rpt.PrintOptions.PaperOrientation = PaperOrientation.Portrait;

            //rptClientDoc.PrintOutputController.ModifyPaperOrientation(CrPaperOrientationEnum.crPaperOrientationPortrait);

            //if (pDoc.DefaultPageSettings.PaperSize.Height == pDoc.DefaultPageSettings.PaperSize.Width)
            //{
            //    rpt.PrintOptions.DissociatePageSizeAndPrinterPaperSize = true;
            //    rptClientDoc.PrintOutputController.ModifyPaperOrientation(CrPaperOrientationEnum.crPaperOrientationPortrait);
            //}
            //else
            //{
            //    rpt.PrintOptions.DissociatePageSizeAndPrinterPaperSize = true;
            //    rptClientDoc.PrintOutputController.ModifyPaperOrientation(CrPaperOrientationEnum.crPaperOrientationLandscape);
            //}

            ////not required . CR setting simplex works
            //System.Drawing.Printing.Duplex myDup = new Duplex();
            //myDup = Duplex.Simplex;
            //printerSettings.Duplex = myDup;

            // XPS printer only allows 1 copy
            //pDoc.PrinterSettings.Copies = 2;


            rpt.PrintToPrinter(printerSettings, pSettings, false, PrintLayout);

            //MessageBox.Show(rpt.PrintOptions.PrinterName.ToString());

            IsRpt = true;

            //Dim printerSettings As New System.Drawing.Printing.PrinterSettings
            //printerSettings.PrinterName = ComboBox3.Text  ’  Pick up Printer Name from ComboBox.
            //Dim pageSettings As New System.Drawing.Printing.PageSettings(printerSettings)

            //reportDoc.PrintOptions.CopyTo(printerSettings, pageSettings)
            //printerSettings.Copies = 1

            //Dim PrintLayout As New CrystalDecisions.Shared.PrintLayoutSettings
            //If reportDoc.PrintOptions.DissociatePageSizeAndPrinterPaperSize = True Then
            //PrintLayout.Scaling = PrintLayoutSettings.PrintScaling.Scale
            //Else
            //PrintLayout.Scaling = PrintLayoutSettings.PrintScaling.DoNotScale
            //End If

            //reportDoc.PrintToPrinter(printerSettings, pageSettings, False, PrintLayout)


            //// Check if custom paper bin has been selected
            //if (printerDef.NoticeBin.HasValue && printerDef.NoticeBin != 0)
            //{
            //    rpt.PrintOptions.CustomPaperSource = new System.Drawing.Printing.PaperSource();
            //    rpt.PrintOptions.CustomPaperSource.RawKind = printerDef.NoticeBin.Value;
            //}
            //// Print report to selected printer
            //rpt.PrintOptions.PrinterName = cboCurrentPrinters.Text; ;
            //rpt.PrintToPrinter(1, false, 0, 0);


            //System.Drawing.Printing.

            //pDoc.DefaultPageSettings.PrinterSettings.GetHdevmode();


            ////pDoc.PrinterSettings.PaperSizes

            //if (pDoc.PrinterSettings.SupportsColor)
            //{
            //    MessageBox.Show("Printer Supports Color", pDoc.PrinterSettings.SupportsColor.ToString());
            //}

            //newOpts.PrinterName = cboCurrentPrinters.Text;
            //newOpts.PaperSize = pDoc.PrinterSettings.PaperSizes[cboCurrentPaperSizes.SelectedIndex].Kind;

            ////rasPROpts.PaperSource = (CrPaperSourceEnum) pDoc.PrinterSettings.PaperSources[cboDefaultPaperTrays.SelectedIndex].Kind; 

            ////CrystalDecisions.ReportAppServer.ReportDefModel.CrPaperSourceEnum.crPaperSourceManual;
            //// above line does not work to select paper tray

            //newOpts.PrinterName = cboCurrentPrinters.Text;
            //newOpts.PaperSize = (CrPaperSizeEnum)pDoc.PrinterSettings.PaperSizes[cboDefaultPaperSizes.SelectedIndex].Kind;
            //newOpts.PaperSource = (CrPaperSourceEnum)pDoc.PrinterSettings.PaperSources[cboDefaultPaperTrays.SelectedIndex].Kind;
            //newOpts.DissociatePageSizeAndPrinterPaperSize = true;
            //newOpts.PaperOrientation = CrPaperOrientationEnum.crPaperOrientationLandscape;

            //// print to file
            //PrinterSettings printerSettings = new PrinterSettings();
            //PageSettings pageSettings = new PageSettings();
            //rpt.PrintOptions.CopyTo(printerSettings, pageSettings);
            //printerSettings.PrintToFile = true;
            //printerSettings.PrintFileName = "filepath\\" + "filename";
            //pageSettings.PaperSize = new System.Drawing.Printing.PaperSize("Legal", 850, 1400); //8.5x14

            //rpt.PrintToPrinter(printerSettings, pageSettings, true);

            //MessageBox.Show("Printing report.", "RAS", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void btnRASCopyTo_Click(object sender, EventArgs e)
        {
            sysPrinterSettings = new System.Drawing.Printing.PrinterSettings();
            sysPageSettings = new System.Drawing.Printing.PageSettings();
            sysPageSettings = sysPrinterSettings.DefaultPageSettings;

            CrystalDecisions.ReportAppServer.ReportDefModel.PrintOptions printOptions = new CrystalDecisions.ReportAppServer.ReportDefModel.PrintOptions();
            printOptions = rptClientDoc.PrintOutputController.GetPrintOptions();

            using (System.Windows.Forms.PrintDialog printDialog = new System.Windows.Forms.PrintDialog())
            {
                //CopyTo
                printOptions.CopyToPrinterSettingsAndPageSettings(eromPrinterSettings, eromPageSettings);
                ConvertDotNetToErom.EromPrinterSettingsAndPageSettingsToDotNet(eromPrinterSettings, eromPageSettings, sysPrinterSettings, sysPageSettings);

                printDialog.PrinterSettings = sysPrinterSettings;
                printDialog.UseEXDialog = true;
                if (printDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    sysPrinterSettings = printDialog.PrinterSettings;
                    sysPageSettings = printDialog.PrinterSettings.DefaultPageSettings;
                }
            }

            //CopyFrom
            ConvertDotNetToErom.DotNetPrinterSettingsAndPageSettingsToErom(sysPrinterSettings, sysPageSettings, eromPrinterSettings, eromPageSettings);
            printOptions.CopyFromPrinterSettingsAndPageSettings(eromPrinterSettings, eromPageSettings);

        }

        private void crystalReportViewer1_Load(object sender, EventArgs e)
        {

        }

        private void ViewReport_Click(object sender, EventArgs e)
        {
            DateTime dtStart;
            dtStart = DateTime.Now;
            btnSQLStatement.Text += "\nClicked View Report Start time: \n" + dtStart.ToString();

            //crystalReportViewer1.Refresh();

            //// Get the ViewerToolbar control
            //for (int zz = 0; zz < 7; zz++)
            //{
            //    System.Windows.Forms.Control oControl = crystalReportViewer1.Controls[zz];
            //    MessageBox.Show("oControl: = " + oControl.Controls.Find("Main Report",true));
            //}
            //oControl.TabIndex = 2;
            //DocumentControl tab2 = ((PageView)crystalReportViewer1.Controls[0]).CreateNewReportDocument("new doc");

            //rpt.Close();

            //Formulas RPT2 = new Formulas();

            ////crystalReportViewer1.ReportSource = new CrystalReport1New1();
            //crystalReportViewer1.ReportSource = RPT2;

            //RPT2.Close();

            try
            {
                btnRecordCount.Text = rpt.Rows.Count.ToString();
            }
            catch (Exception ex)
            {
                MessageBox.Show("no data dumb ass");
            }

            //IsRpt = false;
            //crystalReportViewer1.ToolPanelView = ToolPanelViewType.GroupTree;
            crystalReportViewer1.SetFocusOn(UIComponent.GroupTree);
            //crystalReportViewer1.TabIndex = 3;
            //crystalReportViewer1.ReuseParameterValuesOnRefresh = true;
            //frmMain.ActiveForm.Focus();
            //crystalReportViewer1.ShowGroupTree();

            //CrystalDecisions.CrystalReports.ViewerObjectModel.FieldObjectInstance myClip = new CrystalDecisions.CrystalReports.ViewerObjectModel.FieldObjectInstance();
            //myClip.AllowClipping = true;

            // this gets the locale when set before the report was opened and sets the viewer to the same language
            if (chkSameAsCELocale.Checked)
            {
                int x = (int)rpt.ReportClientDocument.LocaleID;
                crystalReportViewer1.SetProductLocale(x);
            }

            try
            {
                if (!IsRpt)
                {
                    crystalReportViewer1.ReportSource = rptClientDoc.ReportSource;
                    //rptClientDoc.DataDefController.SavedDataFilterController.
                }
                else
                {
                    crystalReportViewer1.ReportSource = rpt;
                    //rpt.VerifyDatabase();
                    //rpt.RecordSelectionFormula = "({NewDataSet/Employee.Internal_ID} > 5.00)";
                }
            }
            catch (Exception ex)
            {
                //crystalReportViewer1.ReportSource = rpt;
                btnSQLStatement.Text = "ERROR: " + ex.Message;
            }

            // next line causes a delay due to the engine having to go to the last page.
            if (rpt.Rows.Count > 0)
            {
                rpt.FormatEngine.GetLastPageNumber(new ReportPageRequestContext());
            }

            // set up the format export types:
            int myFOpts = (int)(
                CrystalDecisions.Shared.ViewerExportFormats.RptFormat |
                CrystalDecisions.Shared.ViewerExportFormats.PdfFormat |
                CrystalDecisions.Shared.ViewerExportFormats.RptrFormat |
                CrystalDecisions.Shared.ViewerExportFormats.XLSXFormat |
                CrystalDecisions.Shared.ViewerExportFormats.CsvFormat |
                CrystalDecisions.Shared.ViewerExportFormats.EditableRtfFormat |
                CrystalDecisions.Shared.ViewerExportFormats.ExcelRecordFormat |
                CrystalDecisions.Shared.ViewerExportFormats.RtfFormat |
                CrystalDecisions.Shared.ViewerExportFormats.WordFormat |
                CrystalDecisions.Shared.ViewerExportFormats.XmlFormat |
                CrystalDecisions.Shared.ViewerExportFormats.ExcelFormat |
                CrystalDecisions.Shared.ViewerExportFormats.ExcelRecordFormat);
            //CrystalDecisions.Shared.ViewerExportFormats.NoFormat); // no exports allowed
            //int myFOpts = (int)(CrystalDecisions.Shared.ViewerExportFormats.AllFormats);

            crystalReportViewer1.AllowedExportFormats = myFOpts;
            crystalReportViewer1.EnableToolTips = true;
            
            //crystalReportViewer1.Hide();
            //crystalReportViewer1.Show();

            //CrystalDecisions.Windows.Forms.ViewerDocument VTime = crystalReportViewer1.ViewTimeSelectionFormula.; // rpt.RecordSelectionFormula.ToString(); // = new CrystalDecisions.Windows.Forms.ViewerDocument.ViewTimeSelectionFormula();
            //crystalReportViewer1.ViewTimeSelectionFormula = rpt.RecordSelectionFormula.ToString();

            //crystalReportViewer1.ViewTimeSelectionFormula = " (  {Checks.CheckID} < 1000  )  ";

            //public float ZoomingScale { set; get; }
            //CrystalDecisions.Windows.Forms.PageControl myZoom = new CrystalDecisions.Windows.Forms.PageControl();

            //crystalReportViewer1.Zoom(2);
            crystalReportViewer1.ShowProgressAnimation(false);
            crystalReportViewer1.SetFocusOn(UIComponent.Page);
            //crystalReportViewer1.ShowParameterPanelButton = true;

            //CrystalDecisions.Windows.Forms.ParameterPromptControl myPrompts;

            //crystalReportViewer1.Zoom(150);

            //rpt.DataDefinition.RecordSelectionFormula = "{ReportProblemDemo.Name} like '*Kathy*'";
            //rpt.DataDefinition.RecordSelectionFormula = "1=1";
            

            //rpt.VerifyDatabase();

            //CrystalDecisions.ReportAppServer.ReportDefModel.PrintOptions rptPRT = new CrystalDecisions.ReportAppServer.ReportDefModel.PrintOptionsClass();
            //rptPRT = rptClientDoc.PrintOutputController.GetPrintOptions();

            ////MessageBox.Show("Printer Name: " + rpt.PrintOptions.PrinterName.ToString());

            //rptClientDoc.PrintOutputController.GetPrintOptions();

            //MessageBox.Show("Printer Driver: " + rptPRT.DriverName.ToString());
            //MessageBox.Show("Printer Name: " + rptPRT.PrinterName.ToString());


            //MessageBox.Show("my formula: " + rpt.RecordSelectionFormula.ToString());


            // Get the ViewerToolbar control
            //System.Windows.Forms.Control oControl = crystalReportViewer1.Controls[2];

            //DocumentControl tab2 = ((PageView)crystalReportViewer1.Controls[0]).CreateNewReportDocument("new doc");

            //Button oButton = new Button();
            //oButton.Name = "newButton";
            //oButton.Text = "My New Button";

            //oControl.Controls.Add(oButton);
            //crystalReportViewer1.Dispose();
            //crystalReportViewer1.ReportSource = rptClientDoc;

            //loop through the Parameter control buttons:
            //For Each ctl As Control In CurrentCrystalReportViewer.Controls
            //If ctl.Name = "InteractiveParameterPanel" Then
            //'This control is the parameter panel
            //For Each subCtl As Control In ctl.Controls
            //If TypeOf subCtl Is Windows.Forms.ToolBar Then
            //'This controls is the toolbar that holds the "Apply" and "Delete" parameter buttons
            //Dim parmTool As ToolBar = subCtl
            //parmTool.ImageList = myImageList
 
            //'we only need the apply button, so hide the rest
            //For Each btn As ToolBarButton In parmTool.Buttons
            //    If btn.Text = "Delete" Or btn.Text = "" Then
            //        btn.Visible = False
            //    ElseIf btn.Text = "Apply"
            //        btn.Text = "Refresh Report"
            //        btn.ToolTipText = "Refresh report with parameter changes"
            //        btn.ImageIndex = 0
            //    End if
            //Next
            //Exit For
            //End If
            //Next
            //End If
            //Next

            //difference = DateTime.Now.Subtract(dtStart);
            //btnReportObjects.Text += "View Report " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + "\r\n";

            //System.Windows.Forms.PrintDialog WinPRDiag = new PrintDialog();
            ////WinPRDiag.UseEXDialog = true;
            //WinPRDiag.AllowSomePages = true;
            //WinPRDiag.AllowCurrentPage = true;
            //WinPRDiag.AllowSelection = true;
            //WinPRDiag.AllowPrintToFile = true;
            //WinPRDiag.ShowDialog();

            GroupPath gp = new GroupPath();
            string tmp = String.Empty;
            if (IsLoggedOn)
            {
                try
                {
                    rptClientDoc.RowsetController.GetSQLStatement(gp, out tmp);
                    btnSQLStatement.Text += "\n" + tmp + "\n";
                }
                catch (Exception ex)
                {
                    btnSQLStatement.Text += "\nERROR: " + ex.Message;
                }
            }
        }

        private void SetData_Click(object sender, EventArgs e)
        {
//            //string connString = "Provider=SQLOLEDB;Data Source=vancsdb02.crystald.net;Database=Northwind;User ID=devtech;Password=devtech";
            string connString = "Provider=SQLOLEDB;Data Source=VMMSSQL2K8;Database=xtreme;User ID=sb;Password=1Oem2000";
//            //string sqlString = "Select * From Orders";
//            //string sqlString = "SELECT Orders.Order ID, 'Orders'.'PA-PHONE-NO(1) FROM xtreme.dbo.Orders Orders";
//            //string sqlString =  @"SELECT ""Orders"".""Order ID"", ""Orders"".""PA-PHONE-NO(1)"" FROM ""xtreme"".""dbo"".""Orders"" ""Orders""";
            string sqlString = "SELECT 'Orders'.'Customer ID', 'Orders'.'Order Date' FROM 'xtreme'.'dbo'.'Orders' 'Orders'";
            string sqlString2 = "Select * From \"Orders Detail\"";


//            string sqlString = @"SELECT WorkflowMaster.Description, WorkflowMaster.WorkflowName, OldWorkflowVersions.WorkflowName, TrackingMaster.WorkflowName, 
            //OldWorkflowVersions.Description, TrackingMaster.StartDate, OldWorkflowVersions.Status, WorkflowMaster.Status, OldWorkflowVersions.Version, WorkflowMaster.Version,
            //OldWorkflowVersions.DateDeployed, WorkflowMaster.DateDeployed FROM   (SysproOutdoors_WF.dbo.WorkflowMaster WorkflowMaster 
            //FULL OUTER JOIN SysproOutdoors_WF.dbo.OldWorkflowVersions OldWorkflowVersions ON (WorkflowMaster.Version=OldWorkflowVersions.Version) 
            //AND (WorkflowMaster.WorkflowName=OldWorkflowVersions.WorkflowName)) FULL OUTER JOIN SysproOutdoors_WF.dbo.TrackingMaster TrackingMaster ON WorkflowMaster.WorkflowName=TrackingMaster.WorkflowName";


            OleDbConnection oleConn = new OleDbConnection(connString);
            OleDbDataAdapter oleAdapter = new OleDbDataAdapter(sqlString, oleConn);
            OleDbDataAdapter oleAdapter2 = new OleDbDataAdapter(sqlString2, oleConn);
            DataTable dt1 = new DataTable("Query");
            DataTable dt2 = new DataTable("\"Orders Detail\"");

            oleAdapter.Fill(dt1);
            oleAdapter2.Fill(dt2);

            System.Data.DataSet ds = new System.Data.DataSet();
            ds.Tables.Add(dt1);
            ds.Tables.Add(dt2);
            
            ds.WriteXml(@"D:\Atest\803264\New\list_of_workflows.xml");
            ds.WriteXmlSchema(@"D:\Atest\803264\New\list_of_workflows.xsd");

            ds.ReadXml(@"D:\Atest\Dev Element\data_ReplicateCRIssue.xml", XmlReadMode.ReadSchema);

            ISCRDataSet DS1 = (ISCRDataSet) CrystalDecisions.ReportAppServer.DataSetConversion.DataSetConverter.Convert(ds);
            
            // uses this for OLE DB DS record set
            rptClientDoc.DatabaseController.SetDataSource(DS1, "FunctionSales", "FunctionTotalPrice");
            //rptClientDoc.DatabaseController.SetDataSource(DataSetConverter.Convert(ds), "Orders_Detail", "\"Orders Detail\"");

            MessageBox.Show("Data Source Set", "RAS", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //rptClientDoc.DataDefController.FormulaFieldController.ToString();
            //rptClientDoc.DataDefController.DataDefinition.ResultFields.ToString();
            //ds.Clear();
            //ds.Dispose();
            IsRpt = false;
        }

        private void SetParam_Click(object sender, EventArgs e)
        {
            ReportDocumentSetParameters(rpt);
        
        //{
            //CDReportClientDocument rcDoc = rptClientDoc.ReportClientDocument;
            //CrystalDecisions.ReportAppServer.DataDefModel.ParameterField nonInteractiveParam = (CrystalDecisions.ReportAppServer.DataDefModel.ParameterField)rptClientDoc.DataDefinition.ParameterFields[0];
            //CrystalDecisions.ReportAppServer.DataDefModel.ParameterField interactiveParam = (CrystalDecisions.ReportAppServer.DataDefModel.ParameterField)nonInteractiveParam.Clone(true);
            ////interactiveParam.Usage = interactiveParam.Usage | (Int32)CrParameterFieldUsageEnum.crParameterFieldUsageShownOnPanel;
            //rptClientDoc.DataDefController.ParameterFieldController.Modify(nonInteractiveParam, interactiveParam);

            //CrystalDecision.Shared.ParameterDiscreteValue 
        }

        private void ReportDocumentSetParameters(CrystalDecisions.CrystalReports.Engine.ReportDocument rpt)
        {

            SetCrystalParam(rpt, "@My Parameter", "100");

            //CrystalReportViewer viewer = new CrystalReportViewer();
            //viewer.ReportSource = rpt;
            //viewer.RefreshReport();
            //return rpt.ParameterFields&#91;0&#93;.HasCurrentValue;

            //SetCrystalParam(rpt, "@FROMSEQ", "0000");
            //SetCrystalParam(rpt, "@TOSEQ", "9999");
            //SetCrystalParam(rpt, "@REPRINT", "1");
            //SetCrystalParam(rpt, "@MULTICUR", "Y");
            //SetCrystalParam(rpt, "@CMPNAME", "Sample Company Litmited");
            //SetCrystalParam(rpt, "@FUNCDEC", "2");
            //SetCrystalParam(rpt, "@INCTAX", "1");


            ////SetCrystalParamsToNull(rpt);
            //SetCrystalParam(rpt, "@CMPNAME", "Universal Corporation");
            //SetCrystalParam(rpt, "@LEVEL1NAME", "Contract");
            //SetCrystalParam(rpt, "@FROMCONT", "1");
            //SetCrystalParam(rpt, "@TOCONT", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ");
            //SetCrystalParam(rpt, "@FROMUFMTCONT", "1");
            //SetCrystalParam(rpt, "@TOUFMTCONT", "ZZZZZZZZZZZZZZZZ");
            //SetCrystalParam(rpt, "@LEVEL2NAME", "Project");
            //SetCrystalParam(rpt, "@FROMPROJ", "1");
            //SetCrystalParam(rpt, "@TOPROJ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ");
            //SetCrystalParam(rpt, "@FROMCUSTOMER", "1");
            //SetCrystalParam(rpt, "@TOCUSTOMER", "ZZZZZZZZZZZZ");
            //SetCrystalParam(rpt, "@FROMCONTSTART", "19000101");
            //SetCrystalParam(rpt, "@TOCONTSTART", "99991231");
            //SetCrystalParam(rpt, "@FROMPROJSTART", "19000101");
            //SetCrystalParam(rpt, "@TOPROJSTART", "99991231");
            //SetCrystalParam(rpt, "@CONTSTATUS", "0");
            //SetCrystalParam(rpt, "@PROJSTATUS", "0");
            //SetCrystalParam(rpt, "@SWINCLLABOR", "1");
            //SetCrystalParam(rpt, "@SWINCLOVERHEAD", "1");
            //SetCrystalParam(rpt, "@SWCUSTCUR", "1");
            //SetCrystalParam(rpt, "@SWMULTI", "1");
            //SetCrystalParam(rpt, "@LEVEL4NAME", "Contracts");
            //SetCrystalParam(rpt, "@HCURN", "CAD");
            //SetCrystalParam(rpt, "@HCURNDEC", "2");
            //SetCrystalParam(rpt, "@USEPERCENT", "1");
            //SetCrystalParam(rpt, "@LEVEL3NAME", "Category");
            ////rpt.SetParameterValue("LEVEL3NAME", "Category");
            ////rpt.SetParameterValue("USEPERCENT", "1", "category");

            //foreach (CrystalDecisions.CrystalReports.Engine.ParameterFieldDefinition pField in (ParameterFieldDefinitions)rpt.DataDefinition.ParameterFields)
            //{
            //    switch (pField.Name)
            //    {
            //        case "@percentage":
            //            {
            //                SetCrystalParam(rpt, "@percentage", "50");
            //            }
            //            break;

            //        //case "@st":
            //        //    {
            //        //        SetCrystalParam(rpt, "@st", "184");
            //        //    }
            //        //    break;
            //        //case "@sg":
            //        //    {
            //        //        SetCrystalParam(rpt, "@sg", "1,1");
            //        //    }
            //        //    break;
            //        //case "@si":
            //        //    {
            //        //        SetCrystalParam(rpt, "@si", null);
            //        //    }
            //        //    break;
            //        //case "@sd":
            //        //    {
            //        //        SetCrystalParam(rpt, "@sd", "4/1/1825 00:00:00");
            //        //    }
            //        //    break;
            //        //case "@ed":
            //        //    {
            //        //        SetCrystalParam(rpt, "@ed", "4/1/2012 00:00:00");
            //        //    }
            //        //    break;
            //        //case "@Range":
            //        //    {
            //        //        SetCrystalParam(rpt, "@Range", "M");
            //        //    }
            //        //    break;
            //        //case "@uid":
            //        //    {
            //        //        SetCrystalParam(rpt, "@uid", "3");
            //        //    }
            //        //    break;
            //        //case "@rid":
            //        //    {
            //        //        SetCrystalParam(rpt, "@rid", "6");
            //        //    }
            //        //    break;
            //        //case "test":
            //        //    {
            //        //        SetCrystalParam(rpt, "test", "6");
            //        //    }
            //        //    break;
            //    }
            //}
        }

        private void SetCrystalParam(CrystalDecisions.CrystalReports.Engine.ReportDocument rpt, string parameterName, string listOfValues)
        {
            int ParCount = rpt.DataDefinition.ParameterFields.Count;

            foreach (CrystalDecisions.CrystalReports.Engine.ParameterFieldDefinition crParamField in rpt.DataDefinition.ParameterFields)
            {

                if ("@" + crParamField.Name.ToLower() == parameterName.ToLower())
                {
                    try
                    {
                        CrystalDecisions.Shared.ParameterValues myparameterValues = new CrystalDecisions.Shared.ParameterValues();
                        CrystalDecisions.Shared.ParameterDiscreteValue crDiscreteValue = new CrystalDecisions.Shared.ParameterDiscreteValue();

                        crDiscreteValue.Value = listOfValues;
                        myparameterValues.IndexOf(crParamField.Name);
                        myparameterValues.Add(crDiscreteValue);
                        crParamField.ApplyCurrentValues(myparameterValues);
                        return;
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                        return;
                    }
                }
            }
        }

            //CrystalDecisions.Shared.ParameterDiscreteValue val1 = new CrystalDecisions.Shared.ParameterDiscreteValue();
            //val1.Value = "184";
            //CrystalDecisions.Shared.ParameterDiscreteValue val2 = new CrystalDecisions.Shared.ParameterDiscreteValue();
            //val2.Value = "3";
            //CrystalDecisions.Shared.ParameterDiscreteValue val3 = new CrystalDecisions.Shared.ParameterDiscreteValue();
            //val3.Value = "6";
            //CrystalDecisions.Shared.ParameterDiscreteValue val4 = new CrystalDecisions.Shared.ParameterDiscreteValue();
            //val4.Value = "NULL";
            //CrystalDecisions.Shared.ParameterDiscreteValue val5 = new CrystalDecisions.Shared.ParameterDiscreteValue();
            //val5.Value = "'4/1/1825 00:00:00'";
            //CrystalDecisions.Shared.ParameterDiscreteValue val6 = new CrystalDecisions.Shared.ParameterDiscreteValue();
            //val6.Value = "'4/1/2012 00:00:00'";
            //CrystalDecisions.Shared.ParameterDiscreteValue val7 = new CrystalDecisions.Shared.ParameterDiscreteValue();
            //val7.Value = "M";
            //CrystalDecisions.Shared.ParameterValues pvals = new CrystalDecisions.Shared.ParameterValues();

            //pvals.Add(val3);
            //pvals.Add(val4);
            //pvals.Add(val5);
            //pvals.Add(val6);
            //pvals.Add(val7);
            //pvals.Add(val1);
            //pvals.Add(val2);

            //197 (st)
            //64  (uid) 
            //55  (rid) 
            //'100' (si) 
            //'1825-04-01 00:00:00' (StartDate) 
            //'2012-04-01 00:00:00' (EndDate)
            //'M' or 'W' (Range)
            /*
             * 
            //set rptClientDoc.ParameterFields(0).CurrentValues.Add(val1);
            pfield = CrystalDecisions.ReportAppServer.DataDefModel.ParameterField();
            pfield = rcd.DataDefController.DataDefinition.ParameterFields(0);
            rcdpvals = CrystalDecisions.ReportAppServer.DataDefModel.Values;
            //retrieve the current values
            rcdpvals = pfield.CurrentValues;

   //     }
*/

        private void ExportToPDFRAS_Click(object sender, EventArgs e)
        {
            //CrystalDecisions.CrystalReports.Engine.ReportDocument rpt = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            ISCDReportClientDocument rcd;

            //rpt.Load("c:\\Reports\\Group.rpt");

            rcd = rptClientDoc;

            // Declare a PrintOutputController to allow documents to be exported to PDF
            PrintOutputController rasPrintOutputController;
            CrReportExportFormatEnum rasReportExportFormat;
            CrystalDecisions.Shared.DiskFileDestinationOptions diskOpts = CrystalDecisions.Shared.ExportOptions.CreateDiskFileDestinationOptions();
            //CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions PDFExpOpts = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();

            diskOpts.DiskFileName = "c:\\reports\\reports1.pdf";

            //PDFExpOpts.FormatOptions = CreateBookmarksFromGroupTree = true;
            //PDFExpOpts.FirstPageNumber = 1;
            //PDFExpOpts.LastPageNumber = 1;
            //PDFExpOpts.UsePageRange = true;
            //rcd.PrintOutputController.ExportEx(PDFExpOpts);

            // Set the CrReportExportFormatEnum to export the report as a PDF file.
            rasReportExportFormat = CrReportExportFormatEnum.crReportExportFormatPDF;
            
            rasPrintOutputController = rcd.PrintOutputController;

            // Use the Export() method of the PrintOutputController to export the report to a ByteArray.
            ByteArray tempByteArray = rasPrintOutputController.Export(rasReportExportFormat, 0);
            Byte[] byteStreamOutput = tempByteArray.ByteArray;

            System.IO.Stream oStream;
            byte[] byteArray = null;

            oStream = rpt.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
            byteArray = new byte[oStream.Length];
            oStream.Read(byteArray, 0, Convert.ToInt32(oStream.Length - 1));

            // this is used to verify the file so I saved it to disk
            System.IO.File.Create(diskOpts.DiskFileName, Convert.ToInt32(oStream.Length - 1)).Close();

            System.IO.File.OpenWrite(diskOpts.DiskFileName).Write(byteArray, 0, Convert.ToInt32(oStream.Length - 1));
            System.IO.File.SetAttributes(diskOpts.DiskFileName, System.IO.FileAttributes.Directory);
            oStream.Close();

           //rcd.Open("c:\\Reports\\Group.rpt");

            ////bool CreateBookmarksFromGroupTree { set; get; }
            //CrystalDecisions.ReportAppServer.ReportDefModel.ISCRPDFExportFormatOptions pdfOpts = new PDFExportFormatOptions();
            //CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions exportOpts = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
            //CrystalDecisions.Shared.DiskFileDestinationOptions diskOpts = CrystalDecisions.Shared.ExportOptions.CreateDiskFileDestinationOptions();

            //diskOpts.DiskFileName = "c:\\reports\\reports1.pdf";

            ////pdfOpts.CreateBookmarksFromGroupTree = true;
            //exportOpts.FormatOptions = pdfOpts;

            //rcd.PrintOutputController.Export(CrReportExportFormatEnum.crReportExportFormatPDF);
            //.rcd.PrintOutputController.Export(exportOpts);

        }

        private void lstExportFormatType_SelectedIndexChanged(object sender, EventArgs e)
        {
            // This gets populated when you click on the export ENUM
            string ExportTypeSelected = lstExportFormatType.SelectedItem.ToString();

            if (ExportTypeSelected == "crReportExportFormatCrystalReports")
            #region RPT
            {
                // This works do not alter
                // this gets the report name and sets the export name to be the same less the extension
                string outputFileName = "";
                string MyRptName = rpt.FileName.ToString();
                outputFileName = MyRptName.Substring(9, rpt.FileName.Length - 9);
                outputFileName = outputFileName.Substring(0, (outputFileName.Length - 4)) + "1.rpt";

                try
                {
                    if (File.Exists(outputFileName))
                    {
                        File.Delete(outputFileName);
                    }

                    CrystalDecisions.ReportAppServer.ReportDefModel.RPTExportFormatOptions RasRPTExpOpts = new RPTExportFormatOptions();

                    try
                    {
                        RasRPTExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatCrystalReports);
                    }
                    catch (Exception ex)
                    {
                        btnSQLStatement.Text = "ERROR: " + ex.Message;
                        //return;
                    }

                    // Set them now:
                    //RasPDFExpOpts.CreateBookmarksFromGroupTree = false;
                    //RasPDFExpOpts.EndPageNumber = 1;
                    //RasPDFExpOpts.StartPageNumber = 1;

                    CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions exportOpts1 = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
                    exportOpts1.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatCrystalReports;
                    exportOpts1.FormatOptions = RasRPTExpOpts;

                    // And Export
                    rptClientDoc.PrintOutputController.ExportEx(exportOpts1).Save(outputFileName, true);
                    MessageBox.Show("Export to RPT Completed. NOTE: report is *1.RPT", "", MessageBoxButtons.OK, MessageBoxIcon.Information);

                }
                catch (Exception ex)
                {
                    btnSQLStatement.Text = "ERROR: " + ex.Message;
                    return;
                }
                // This works do not alter
            }
            #endregion RPT

            if (ExportTypeSelected == "crReportExportFormatMSExcel")
            #region MSExcel
            {
                // This works do not alter
                // this gets the report name and sets the export name to be the same less the extension
                string outputFileName = "";
                string MyRptName = rpt.FileName.ToString();
                outputFileName = MyRptName.Substring(9, rpt.FileName.Length - 9);
                outputFileName = outputFileName.Substring(0, (outputFileName.Length - 3)) + "xls";

                try
                {
                    if (File.Exists(outputFileName))
                    {
                        File.Delete(outputFileName);
                    }

                    CrystalDecisions.ReportAppServer.ReportDefModel.ExcelExportFormatOptions RasXLSExpOpts = new ExcelExportFormatOptions();
                    RasXLSExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatMSExcel);
                    // textBox1 = "Excel - BaseAreaGroupNumber:       " + RasXLSExpOpts.BaseAreaGroupNumber.ToString() + "\n";
                    //textBox1 += "Excel - BaseAreaType:              " + RasXLSExpOpts.BaseAreaType.ToString() + "\n";
                    //textBox1 += "Excel - FormulaExportPageAreaType: " + RasXLSExpOpts.ExportPageAreaPairType.ToString() + "\n";
                    //textBox1 += "Excel - ExportPageBreaks:          " + RasXLSExpOpts.ExportPageBreaks.ToString() + "\n";
                    //textBox1 += "Excel - ConstantColWidth:          " + RasXLSExpOpts.ConstantColWidth.ToString() + "\n";
                    //textBox1 += "Excel - ConvertDatesToStrings:     " + RasXLSExpOpts.ConvertDatesToStrings.ToString() + "\n";
                    //textBox1 += "Excel - StartPageNumber:           " + RasXLSExpOpts.StartPageNumber.ToString() + "\n";
                    //textBox1 += "Excel - EndPageNumber:             " + RasXLSExpOpts.EndPageNumber.ToString() + "\n";
                    //textBox1 += "Excel - ExportPageBreaks:          " + RasXLSExpOpts.ExportPageBreaks.ToString() + "\n";
                    //textBox1 += "Excel - MRelativeObjectPosition:   " + RasXLSExpOpts.MaintainRelativeObjectPosition.ToString() + "\n";
                    //textBox1 += "Excel - ShowGridlines:             " + RasXLSExpOpts.ShowGridlines.ToString() + "\n";
                    //textBox1 += "Excel - UseConstantColWidth:       " + RasXLSExpOpts.UseConstantColWidth.ToString() + "\n";

                    // Set them now:
                    //RasXLSExpOpts.BaseAreaType = CrAreaSectionKindEnum.crAreaSectionKindPageHeader;
                    //RasXLSExpOpts.UseConstantColWidth = false;
                    //RasXLSExpOpts.ShowGridlines = false;
                    //RasXLSExpOpts.StartPageNumber = 3;
                    //RasXLSExpOpts.EndPageNumber = 10;

                    // Save the udpated info
                    rptClientDoc.set_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatMSExcel, RasXLSExpOpts);

                    CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions exportOpts1 = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
                    exportOpts1.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatMSExcel;
                    exportOpts1.FormatOptions = RasXLSExpOpts;

                    // And Export
                    rptClientDoc.PrintOutputController.ExportEx(exportOpts1).Save(outputFileName, true);
                    MessageBox.Show("Export to Excel Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);

                }
                catch (Exception ex)
                {
                    btnSQLStatement.Text = "ERROR: " + ex.Message;
                    return;
                }
                // This works do not alter
            }
            #endregion MSExcel

            if (ExportTypeSelected == "crReportExportFormatPDF")
            #region PDF
            {
                // This works do not alter
                // this gets the report name and sets the export name to be the same less the extension
                string outputFileName = "";
                string MyRptName = rpt.FileName.ToString();
                outputFileName = MyRptName.Substring(9, rpt.FileName.Length - 9);
                outputFileName = outputFileName.Substring(0, (outputFileName.Length - 3)) + "pdf";

                try
                {
                    if (File.Exists(outputFileName))
                    {
                        File.Delete(outputFileName);
                    }

                    CrystalDecisions.ReportAppServer.ReportDefModel.PDFExportFormatOptions RasPDFExpOpts = new PDFExportFormatOptions();

                    try
                    {
                        RasPDFExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatPDF);
                    }
                    catch (Exception ex)
                    {
                        btnSQLStatement.Text = "ERROR: " + ex.Message;
                        //return;
                    }

                    // Set them now:
                    //RasPDFExpOpts.CreateBookmarksFromGroupTree = false;
                    //RasPDFExpOpts.EndPageNumber = 1;
                    //RasPDFExpOpts.StartPageNumber = 1;

                    // Save the udpated info
                    if (RasPDFExpOpts != null )
                        rptClientDoc.set_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatPDF, RasPDFExpOpts);

                    CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions exportOpts1 = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
                    exportOpts1.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatPDF;
                    exportOpts1.FormatOptions = RasPDFExpOpts;

                    // And Export
                    rptClientDoc.PrintOutputController.ExportEx(exportOpts1).Save(outputFileName, true);
                    MessageBox.Show("Export to PDF Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);

                }
                catch (Exception ex)
                {
                    btnSQLStatement.Text = "ERROR: " + ex.Message;
                    return;
                }
                // This works do not alter
                }
            #endregion PDF

            if (ExportTypeSelected == "crReportExportFormatMSWord") // crReportExportFormatEditableRTF // crReportExportFormatRTF
            #region EditableDoc
            {
                // This works do not alter
                // this gets the report name and sets the export name to be the same less the extension
                string outputFileName = "";
                string MyRptName = rpt.FileName.ToString();
                outputFileName = MyRptName.Substring(9, rpt.FileName.Length - 9);
                outputFileName = outputFileName.Substring(0, (outputFileName.Length - 3)) + "doc";

                try
                {
                    if (File.Exists(outputFileName))
                    {
                        File.Delete(outputFileName);
                    }

                    CrystalDecisions.ReportAppServer.ReportDefModel.RTFWordExportFormatOptions RasDOCExpOpts = new RTFWordExportFormatOptions();

                    try
                    {
                        RasDOCExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatMSWord);
                    }
                    catch (Exception ex)
                    {
                        btnSQLStatement.Text = "ERROR: " + ex.Message;
                        //return;
                    }

                    // Save the udpated info
                    if (RasDOCExpOpts != null)
                    {
                        try
                        {
                            if (RasDOCExpOpts != null)
                                rptClientDoc.set_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatMSWord, RasDOCExpOpts);
                        }
                        catch (Exception ex)
                        {
                            btnSQLStatement.Text = "\nERROR: " + ex.Message;
                        }
                    }

                    CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions exportOpts1 = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
                    exportOpts1.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatMSWord;
                    exportOpts1.FormatOptions = RasDOCExpOpts;

                    // And Export
                    try
                    {
                        rptClientDoc.PrintOutputController.ExportEx(exportOpts1).Save(outputFileName, true);
                    }
                    catch (Exception ex)
                    {
                        btnSQLStatement.Text += "\nERROR: " + ex.Message;
                    }
                    MessageBox.Show("Export to Word Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
                    btnSQLStatement.Text += "ERROR: " + ex.Message;
                    return;
                }
            }
            #endregion EditableDoc

            if (ExportTypeSelected == "crReportExportFormatEditableRTF") // crReportExportFormatEditableRTF // crReportExportFormatRTF
            #region EditableRTF
            {
                // This works do not alter
                // this gets the report name and sets the export name to be the same less the extension
                string outputFileName = "";
                string MyRptName = rpt.FileName.ToString();
                outputFileName = MyRptName.Substring(9, rpt.FileName.Length - 9);
                outputFileName = outputFileName.Substring(0, (outputFileName.Length - 3)) + "rtf";

                try
                {
                    if (File.Exists(outputFileName))
                    {
                        File.Delete(outputFileName);
                    }

                    CrystalDecisions.ReportAppServer.ReportDefModel.RTFWordExportFormatOptions RasRTFExpOpts = new RTFWordExportFormatOptions();

                    try
                    {
                        RasRTFExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatEditableRTF);
                    }
                    catch (Exception ex)
                    {
                        btnSQLStatement.Text = "ERROR: " + ex.Message;
                        //return;
                    }

                    // Set them now:
                    //RasRTFExpOpts.EndPageNumber = 1;
                    //RasRTFExpOpts.StartPageNumber = 1;

                    // Save the udpated info
                    if (RasRTFExpOpts != null)
                        rptClientDoc.set_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatEditableRTF, RasRTFExpOpts);

                    CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions exportOpts1 = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
                    exportOpts1.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatEditableRTF;
                    exportOpts1.FormatOptions = RasRTFExpOpts;

                    // And Export
                    rptClientDoc.PrintOutputController.ExportEx(exportOpts1).Save(outputFileName, true);
                    MessageBox.Show("Export to Editable RTF Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);

                }
                catch (Exception ex)
                {
                    btnSQLStatement.Text = "ERROR: " + ex.Message;
                    return;
                }
                // This works do not alter
            }
            #endregion EditableRTF

            if (ExportTypeSelected == "crReportExportFormatRTF") 
            #region RTF
            {
                // This works do not alter
                // this gets the report name and sets the export name to be the same less the extension
                string outputFileName = "";
                string MyRptName = rpt.FileName.ToString();
                outputFileName = MyRptName.Substring(9, rpt.FileName.Length - 9);
                outputFileName = outputFileName.Substring(0, (outputFileName.Length - 3)) + "rtf";

                try
                {
                    if (File.Exists(outputFileName))
                    {
                        File.Delete(outputFileName);
                    }

                    CrystalDecisions.ReportAppServer.ReportDefModel.RTFWordExportFormatOptions RasRTFExpOpts = new RTFWordExportFormatOptions();

                    try
                    {
                        RasRTFExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatMSWord);
                    }
                    catch (Exception ex)
                    {
                        btnSQLStatement.Text = "ERROR: " + ex.Message;
                        //return;
                    }

                    // Set them now:
                    //RasRTFExpOpts.EndPageNumber = 1;
                    //RasRTFExpOpts.StartPageNumber = 1;

                    // Save the udpated info
                    //if (RasRTFExpOpts != null)
                    //    rptClientDoc.set_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatMSWord, RasRTFExpOpts);

                    CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions exportOpts1 = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
                    exportOpts1.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatMSWord;
                    exportOpts1.FormatOptions = RasRTFExpOpts;

                    // And Export
                    rptClientDoc.PrintOutputController.ExportEx(exportOpts1).Save(outputFileName, true);
                    MessageBox.Show("Export to RTF Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);

                }
                catch (Exception ex)
                {
                    btnSQLStatement.Text = "ERROR: " + ex.Message;
                    return;
                }
                // This works do not alter
            }
            #endregion RTF

            if (ExportTypeSelected == "crReportExportFormatText")
            #region TXT
            {
                // This works do not alter
                // this gets the report name and sets the export name to be the same less the extension
                string outputFileName = "";
                string MyRptName = rpt.FileName.ToString();
                outputFileName = MyRptName.Substring(9, rpt.FileName.Length - 9);
                outputFileName = outputFileName.Substring(0, (outputFileName.Length - 3)) + "txt";
                try
                {
                    if (File.Exists(outputFileName))
                    {
                        File.Delete(outputFileName);
                    }

                    //CrystalDecisions.ReportAppServer.ReportDefModel. RasRTFExpOpts = new RTFWordExportFormatOptions();
                    CrystalDecisions.ReportAppServer.ReportDefModel.TextExportFormatOptions RastxtExpOpts = new TextExportFormatOptions();

                    try
                    {
                        RastxtExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatText);
                    }
                    catch (Exception ex)
                    {
                        btnSQLStatement.Text = "ERROR: " + ex.Message;
                        //return;
                    }

                    // Set them now:
                    //RastxtExpOpts.CharactersPerInch = 9;
                    //RastxtExpOpts.LinesPerPage = 0;

                    // Save the udpated info
                    if (RastxtExpOpts != null)
                        rptClientDoc.set_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatEditableRTF, RastxtExpOpts);

                    CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions exportOpts1 = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
                    exportOpts1.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatText;
                    exportOpts1.FormatOptions = RastxtExpOpts;

                    // And Export
                    rptClientDoc.PrintOutputController.ExportEx(exportOpts1).Save(outputFileName, true);
                    MessageBox.Show("Export to Txt Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);

                }
                catch (Exception ex)
                {
                    btnSQLStatement.Text = "ERROR: " + ex.Message;
                    return;
                }
            }
            #endregion TXT

            // same as txt - can be update to some other format type
            if (ExportTypeSelected == "crReportExportFormatPaginatedTxt")
            #region PageTXT
            {
                // This works do not alter
                // this gets the report name and sets the export name to be the same less the extension
                string outputFileName = "";
                string MyRptName = rpt.FileName.ToString();
                outputFileName = MyRptName.Substring(9, rpt.FileName.Length - 9);
                outputFileName = outputFileName.Substring(0, (outputFileName.Length - 3)) + "txt";
                try
                {
                    if (File.Exists(outputFileName))
                    {
                        File.Delete(outputFileName);
                    }

                    //CrystalDecisions.ReportAppServer.ReportDefModel. RasRTFExpOpts = new RTFWordExportFormatOptions();
                    CrystalDecisions.ReportAppServer.ReportDefModel.TextExportFormatOptions RasPgTxtExpOpts = new TextExportFormatOptions();

                    try
                    {
                        RasPgTxtExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatText);
                    }
                    catch (Exception ex)
                    {
                        btnSQLStatement.Text = "ERROR: " + ex.Message;
                        //return;
                    }

                    // Set them now:
                    //RasPgTxtExpOpts.CharactersPerInch = 9;
                    //RasPgTxtExpOpts.StartPageNumber = 1;
                    //RasPgTxtExpOpts.EndPageNumber = 0;
                    //RasPgTxtExpOpts.ExportCharsetType;
                    //RasPgTxtExpOpts.InsertFromFeedCharacter = "chr";
                    //RasPgTxtExpOpts.LinesPerInch = 0;
                    //RasPgTxtExpOpts.MinimumLinesPerPage = 0;
                    //RasPgTxtExpOpts.PageAreaExportType = CrPageAreaExportTypeEnum.crPageAreaExportTypeAsInReport;
                    //RasPgTxtExpOpts.PageAreaExportType = CrPageAreaExportTypeEnum.crPageAreaExportTypeDoNotExport;
                    //RasPgTxtExpOpts.PageAreaExportType = CrPageAreaExportTypeEnum.crPageAreaExportTypeOncePerReport;


                    // Save the udpated info
                    if (RasPgTxtExpOpts != null)
                        rptClientDoc.set_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatEditableRTF, RasPgTxtExpOpts);

                    CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions exportOpts1 = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
                    exportOpts1.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatText;
                    exportOpts1.FormatOptions = RasPgTxtExpOpts;

                    // And Export
                    rptClientDoc.PrintOutputController.ExportEx(exportOpts1).Save(outputFileName, true);
                    MessageBox.Show("Export to Paginated Text Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);

                }
                catch (Exception ex)
                {
                    btnSQLStatement.Text = "ERROR: " + ex.Message;
                    return;
                }
            }
            #endregion PageTXT

            if (ExportTypeSelected == "crReportExportFormatCharacterSeparatedValues")
            #region CSV
            {
                // This works do not alter
                // this gets the report name and sets the export name to be the same less the extension
                string outputFileName = "";
                string MyRptName = rpt.FileName.ToString();
                outputFileName = MyRptName.Substring(9, rpt.FileName.Length - 9);
                outputFileName = outputFileName.Substring(0, (outputFileName.Length - 3)) + "csv";
                try
                {
                    if (File.Exists(outputFileName))
                    {
                        File.Delete(outputFileName);
                    }

                    //CrystalDecisions.ReportAppServer.ReportDefModel. RasRTFExpOpts = new RTFWordExportFormatOptions();
                    CrystalDecisions.ReportAppServer.ReportDefModel.CharacterSeparatedValuesExportFormatOptions RasCSVExpOpts = new CharacterSeparatedValuesExportFormatOptions();

                    try
                    {
                        RasCSVExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatCharacterSeparatedValues);
                    }
                    catch (Exception ex)
                    {
                        btnSQLStatement.Text = "ERROR: " + ex.Message;
                        //return;
                    }

                    // Set them now:
                    RasCSVExpOpts.Delimiter = ",";
                    //RasCSVExpOpts.ReportSectionsOption


                    // Save the udpated info
                    if (RasCSVExpOpts != null)
                        rptClientDoc.set_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatCharacterSeparatedValues, RasCSVExpOpts);

                    CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions exportOpts1 = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
                    exportOpts1.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatCharacterSeparatedValues;
                    exportOpts1.FormatOptions = RasCSVExpOpts;

                    // And Export
                    rptClientDoc.PrintOutputController.ExportEx(exportOpts1).Save(outputFileName, true);
                    MessageBox.Show("Export to CSV Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);

                }
                catch (Exception ex)
                {
                    btnSQLStatement.Text = "ERROR: " + ex.Message;
                    return;
                }
            }
            #endregion CSV
        }

        private void getSavedExportOptions(CrystalDecisions.CrystalReports.Engine.ReportDocument rpt)
        {
            // to save the report export options example:
            //RasCSVExptOpts.Delimiter = "#";
            //rptClientDoc.set_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatCharacterSeparatedValues, RasCSVExptOpts);

            Array valArray1 = Enum.GetValues(typeof(CrReportExportFormatEnum));
            foreach (object obj in valArray1)
            {
                lstExportFormatType.Items.Add(obj);
            }

            CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions RASexportOpts = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.CharacterSeparatedValuesExportFormatOptions RasCSVExptOpts = new CharacterSeparatedValuesExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.DataOnlyExcelExportFormatOptions RasExcelDataOnlyExpOpts = new DataOnlyExcelExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.EditableRTFExportFormatOptions RasEditRTFExpOpts = new CrystalDecisions.ReportAppServer.ReportDefModel.EditableRTFExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.ExcelExportFormatOptions RasXLSExpOpts = new ExcelExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.HTMLExportFormatOptions RasHTMLExpOpts = new HTMLExportFormatOptions();
            //CrystalDecisions.ReportAppServer.ReportDefModel.PageBasedExportFormatOptions RasPageBasedExpOpts = new PageBasedExportFormatOptions();
            //CrystalDecisions.ReportAppServer.ReportDefModel.PageBasedExportFormatOptions2 RasPageBasedExpOpts2 = new PageBasedExportFormatOptions2();
            CrystalDecisions.ReportAppServer.ReportDefModel.PaginatedTextExportFormatOptions RasPaginTextExpOpts = new PaginatedTextExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.PDFExportFormatOptions RasPDFExpOpts = new PDFExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.RPTExportFormatOptions RasRPTExpOpts = new RPTExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.RTFWordExportFormatOptions RasRTFWordExpOpts = new RTFWordExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.TextExportFormatOptions RastxtExpOpts = new TextExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.XMLExportFormatOptions RasXMLExpOpts = new XMLExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.IndentAndSpacingFormat RasIndentSpaceExpOpts = new IndentAndSpacingFormat();

            //CrystalDecisions.ReportAppServer.ReportDefModel.CrReportExportFormatEnum.crReportExportFormatPaginatedTxt
 
            string textBox1 = String.Empty;
            string MyObjectType = ReportObjectComboBox1.SelectedItem.ToString();
            btnReportObjects.Text = "";

            foreach (CrystalDecisions.ReportAppServer.ReportDefModel.CrReportExportFormatEnum SavedExpType in valArray1)
            {
                switch (SavedExpType.ToString())
                {
                    case "crReportExportFormatMSWord": 
                        try
                        {   // RasWordExpOpts is not MS word it's RTF word doc.... not the same thing.
                            RasEditRTFExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatEditableRTF);
                        }
                        catch (Exception ex)
                        {
                            textBox1 = "MS Word (97-2003) Editable - Not saved\n";
                            break;
                        }
                        textBox1 = "MS Word (97-2003) - Editable: \n";

                        if (RasEditRTFExpOpts != null)
                        {
                            textBox1 += "EndPageNumber:    Will always be zero - not allowed to select range\n";
                            textBox1 += "StartPageNumber:  Will always be zero - not allowed to select range\n";
                        }
                        try
                        {
                            textBox1 += "InsertPageBreaks: " + RasEditRTFExpOpts.InsertPageBreaks.ToString() + "\n";
                        }
                        catch (Exception ex)
                        { }

                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText(" 'End' \n\n");
                        textBox1 = "";
                        break;

                    case "crReportExportFormatMSExcel":
                        try
                        {
                            RasXLSExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatMSExcel);
                        }
                        catch (Exception ex)
                        {
                            textBox1 += "MSExcel or Record Style - Not saved\n 'End' \n\n";
                            break;
                        }
                        textBox1 += "\nMSExcel or Record Style : \n";

                        if (RasXLSExpOpts != null)
                        {
                            textBox1 += "BaseAreaGroupNumber:       " + RasXLSExpOpts.BaseAreaGroupNumber.ToString() + "\n";
                            textBox1 += "BaseAreaType:              " + RasXLSExpOpts.BaseAreaType.ToString() + "\n";
                            textBox1 += "FormulaExportPageAreaType: " + RasXLSExpOpts.ExportPageAreaPairType.ToString() + "\n";
                            textBox1 += "ExportPageBreaks:          " + RasXLSExpOpts.ExportPageBreaks.ToString() + "\n";
                            textBox1 += "ConstantColWidth:          " + RasXLSExpOpts.ConstantColWidth.ToString() + "\n";
                            textBox1 += "ConvertDatesToStrings:     " + RasXLSExpOpts.ConvertDatesToStrings.ToString() + "\n";
                            textBox1 += "StartPageNumber:           " + RasXLSExpOpts.StartPageNumber.ToString() + "\n";
                            textBox1 += "EndPageNumber:             " + RasXLSExpOpts.EndPageNumber.ToString() + "\n";
                            textBox1 += "ExportPageBreaks:          " + RasXLSExpOpts.ExportPageBreaks.ToString() + "\n";
                            textBox1 += "MRelativeObjectPosition:   " + RasXLSExpOpts.MaintainRelativeObjectPosition.ToString() + "\n";
                            textBox1 += "ShowGridlines:             " + RasXLSExpOpts.ShowGridlines.ToString() + "\n";
                            textBox1 += "UseConstantColWidth:       " + RasXLSExpOpts.UseConstantColWidth.ToString() + "\n";
                        }

                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText(" 'End' \n\n");
                        textBox1 = "";
                        break;

                    case "crReportExportFormatPDF":
                        try
                        {
                            RasPDFExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatPDF);
                        }
                        catch (Exception ex)
                        {
                            textBox1 += "PDF - Not saved\n";
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText(" 'End' \n\n");
                            break;
                        }
                        if (RasPDFExpOpts != null)
                        {
                            textBox1 += "\nPDF: \n";
                            if (RasPDFExpOpts.CreateBookmarksFromGroupTree != false)
                            {
                                textBox1 += "CreateBookmarksFromGroupTree: True";
                            }
                            else
                            {
                                textBox1 += "CreateBookmarksFromGroupTree: False";
                            }
                            textBox1 += "StartPageNumber:           " + RasPDFExpOpts.StartPageNumber.ToString() + "\n";
                            textBox1 += "EndPageNumber:             " + RasPDFExpOpts.EndPageNumber.ToString() + "\n";
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText(" 'End' \n\n");
                            textBox1 = "";
                        }
                        else
                        {
                            textBox1 += "PDF - Not saved\n\n";
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText(" 'End' \n\n");
                            textBox1 = "";
                            break;
                        }

                        break;

                    case "crReportExportFormatCharacterSeparatedValues":
                        try
                        {
                            RasCSVExptOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatCharacterSeparatedValues);
                        }
                        catch (Exception ex)
                        {
                            textBox1 += "CSV - Not saved\n\n";
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText(" 'End' \n\n");
                            textBox1 = "";
                            break;
                        }
                        textBox1 += "\nCSV: \n";
                        if (RasCSVExptOpts != null)
                        {
                            textBox1 += "Delimiter:            " + RasCSVExptOpts.Delimiter.ToString() + "\n";
                            textBox1 += "ExportMode:           " + RasCSVExptOpts.ExportMode.ToString() + "\n";
                            textBox1 += "GroupSectionsOption:  " + RasCSVExptOpts.GroupSectionsOption.ToString() + "\n";
                            textBox1 += "ReportSectionsOption: " + RasCSVExptOpts.ReportSectionsOption.ToString() + "\n";
                            textBox1 += "Separator:            " + RasCSVExptOpts.Separator.ToString() + "\n";
                        }

                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText(" 'End' \n\n");
                        textBox1 = "";
                        break;

                    case "crReportExportFormatText":
                        try
                        {
                            RastxtExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatText);
                        }
                        catch (Exception ex)
                        {
                            textBox1 += "Text - Not saved\n\n";
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText(" 'End' \n\n");
                            textBox1 = "";
                            break;
                        }
                        if (RastxtExpOpts != null)
                        {
                            textBox1 += "\nText: \n";
                            textBox1 += "CharactersPerInch:      " + RastxtExpOpts.CharactersPerInch.ToString() + "\n";
                            textBox1 += "LinesPerPage:           " + RastxtExpOpts.LinesPerPage.ToString() + "\n";
                        }

                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText(" 'End' \n\n");
                        textBox1 = "";
                        break;

                    case "crReportExportFormatXML":
                        try
                        {
                            RasXMLExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatXML);
                        }
                        catch (Exception ex)
                        {
                            textBox1 += "Text - Not saved\n\n";
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText(" 'End' \n\n");
                            textBox1 = "";
                            break;
                        }
                        if (RasXMLExpOpts != null)
                        {
                            textBox1 += "\nText: \n";
                            textBox1 += "ExportSelection:      " + RasXMLExpOpts.ExportSelection.ToString() + "\n";
                        }

                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText(" 'End' \n\n");
                        textBox1 = "";
                        break;
                    default:
                        break;
                }
            }
        }

        private void Export_Click(object sender, EventArgs e)
        {
            CrystalDecisions.Shared.PdfRtfWordFormatOptions pdfOpts = CrystalDecisions.Shared.ExportOptions.CreatePdfRtfWordFormatOptions();
            CrystalDecisions.Shared.ExcelDataOnlyFormatOptions excelOptsDataOnly = CrystalDecisions.Shared.ExportOptions.CreateDataOnlyExcelFormatOptions();
            CrystalDecisions.Shared.ExcelFormatOptions excelOpts = CrystalDecisions.Shared.ExportOptions.CreateExcelFormatOptions();
            CrystalDecisions.Shared.MicrosoftMailDestinationOptions mailOpts = CrystalDecisions.Shared.ExportOptions.CreateMicrosoftMailDestinationOptions();
            CrystalDecisions.Shared.DiskFileDestinationOptions diskOpts = CrystalDecisions.Shared.ExportOptions.CreateDiskFileDestinationOptions();
            CrystalDecisions.Shared.ExportOptions exportOpts = new CrystalDecisions.Shared.ExportOptions();
            CrystalDecisions.Shared.PdfFormatOptions PDFExpOpts = new CrystalDecisions.Shared.PdfFormatOptions();
            //CrystalDecisions.Shared.HTMLFormatOptions HTMLExpOpts1 = new CrystalDecisions.Shared.HTMLFormatOptions();
            CrystalDecisions.Shared.HTMLFormatOptions HTMLExpOpts = CrystalDecisions.Shared.ExportOptions.CreateHTMLFormatOptions(); 
            CrystalDecisions.Shared.ExchangeFolderDestinationOptions ExchExpOpts = new ExchangeFolderDestinationOptions();
            CrystalDecisions.Shared.TextFormatOptions TxtExpOpts = new TextFormatOptions();
            CrystalDecisions.Shared.CharacterSeparatedValuesFormatOptions csvExpOpts = new CrystalDecisions.Shared.CharacterSeparatedValuesFormatOptions();
            //CrystalDecisions.Shared.ExchangeDestinationType ExchExpType = new ExchangeDestinationType();
            CrystalDecisions.ReportAppServer.ReportDefModel.HTMLExportFormatOptions RasHTMLExpOpts = new HTMLExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.TextExportFormatOptions txtFmtOpts = new TextExportFormatOptions();
            //CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions TxtExpOpts = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions RASexportOpts = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.CharacterSeparatedValuesExportFormatOptions RASCSVExptOpts = new CharacterSeparatedValuesExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.PDFExportFormatOptions RasPDFExpOpts = new PDFExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.DataOnlyExcelExportFormatOptions RasExcelOpts = new DataOnlyExcelExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.ExcelExportFormatOptions myExcel = new ExcelExportFormatOptions();

            //reportDocument.Load("TestReport.rpt");

            //ExportOptions exportOptions = new ExportOptions();

            rptClientDoc = rpt.ReportClientDocument;

            #region ExportText

            //diskOpts.ExportDestinationType = ExportDestinationType.DiskFile;

            //diskOpts.ExportDestinationOptions = new DiskFileDestinationOptions()

            //{
            //    diskOpts.DiskFileName = @"D:\Atest\Nadas\Output.pdf";
            //}

            //RASexportOpts.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatPDF;

            ////RASexportOpts.FormatOptions = new PdfFormatOptions();
            //RasPDFExpOpts.CreateBookmarksFromGroupTree = true;
            //RASexportOpts.FormatOptions = RasPDFExpOpts;

            ////RasPDFExpOpts.StartPageNumber = 1;
            ////RasPDFExpOpts.EndPageNumber = 2;
            //RasPDFExpOpts.CreateBookmarksFromGroupTree = true;

            //string MyRptName = rpt.FileName.ToString();
            ////MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 1)) + "pdf";
            //MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 1)) + "xlxs";

            //rptClientDoc.PrintOutputController.ExportEx(RASexportOpts).Save(@"D:\Atest\Nadas\" + MyRptName, true);

            //exportOpts.ExportDestinationType = ExportDestinationType.DiskFile;

            //exportOpts.ExportDestinationOptions = new DiskFileDestinationOptions()

            //{
            //    DiskFileName = @"D:\Atest\Nadas\Output.pdf"
            //};

            //exportOpts.ExportFormatType = ExportFormatType.PortableDocFormat;

            //exportOpts.ExportFormatOptions = new PdfFormatOptions()

            //{
            //    CreateBookmarksFromGroupTree = true
            //};

            //rpt.Export(exportOpts);




            //PDFExpOpts.FirstPageNumber = 1;
            //PDFExpOpts.LastPageNumber = 2;

            //RasPDFExpOpts.StartPageNumber = 1;
            //RasPDFExpOpts.EndPageNumber = 2;

            //TxtExpOpts.CharactersPerInch = 0;
            //TxtExpOpts.LinesPerPage = 0;

            //rpt.Load(@"c:\reports\World Sales Report.rpt");

            //// This works do not modify
            //// This requires you do set the report export option in the report designer first
            //rpt.Load(@"D:\Atest\Ido\Union 28 Payroll Upload1.rpt");

            //diskOpts.DiskFileName = @"D:\Atest\Ido\Union 28 Payroll UploadExportIsolated.csv";

            //csvExpOpts = new CharacterSeparatedValuesFormatOptions();

            //csvExpOpts.ExportMode = CsvExportMode.Standard;
            //csvExpOpts.GroupSectionsOption = CsvExportSectionsOption.ExportIsolated;
            //csvExpOpts.ReportSectionsOption = CsvExportSectionsOption.DoNotExport;
            //csvExpOpts.SeparatorText = ",";
            //csvExpOpts.Delimiter = "|";

            //exportOpts.DestinationOptions = diskOpts;
            //exportOpts.ExportDestinationType = ExportDestinationType.DiskFile;
            //exportOpts.ExportFormatType = ExportFormatType.CharacterSeparatedValues;
            //exportOpts.ExportFormatOptions = csvExpOpts;

            //rpt.Export(exportOpts);
            //// This works do not modify


            // This works do not modify
            //rpt.Load(@"C:\CortezReports\CortezSPs1.rpt");
            //rptClientDoc = rpt.ReportClientDocument;

            //RASCSVExptOpts.ExportMode = CrCSVExportModeEnum.crCSVExportModeStandard;
            //RASCSVExptOpts.GroupSectionsOption = CrCSVExportSectionsOptionEnum.crCSVExportSectionsOptionExportIsolated;
            //RASCSVExptOpts.ReportSectionsOption = CrCSVExportSectionsOptionEnum.crCSVExportSectionsOptionDoNotExport;
            //RASCSVExptOpts.Separator = "";
            //RASCSVExptOpts.Delimiter = "";

            //RASexportOpts.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatCharacterSeparatedValues;
            //RASexportOpts.FormatOptions = RASCSVExptOpts;

            //rptClientDoc.PrintOutputController.ExportEx(RASexportOpts).Save(@"C:\CortezReports\CortezSPs1.csv", true);
            //MessageBox.Show("Export to CSV Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);
            // This works do not modify

            //// This works do not modify

            //try
            //{
            //    rpt.Load(@"C:\Reports\World Sales Reportyyy.rpt");
            //}
            //catch (Exception ex)
            //{
            //    btnSQLStatement.Text = ex.Message + " - Report does not exist";
            //    return;
            //}


            //rptClientDoc = rpt.ReportClientDocument;

            //// this gets the report name and sets the export name to be the same less the extension
            //string MyRptName = rpt.FileName.ToString();
            //MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 1)) + "pdf";

            //RasPDFExpOpts.StartPageNumber = 1;
            //RasPDFExpOpts.EndPageNumber = 2;
            //RasPDFExpOpts.CreateBookmarksFromGroupTree = true;

            //rptClientDoc.PrintOutputController.ExportEx(RASexportOpts).Save(@"C:\Reports\" + MyRptName, true);
            ////// This works do not modify

            //// open the exported file with associated file type
            //Process p = new Process();
            //p.StartInfo.WorkingDirectory = @"C:\Reports\";
            //p.StartInfo.FileName = @"C:\Program Files (x86)\Adobe\Reader 10.0\Reader\AcroRd32.exe";
            //p.StartInfo.CreateNoWindow = true;
            //p.StartInfo.Arguments = MyRptName.ToString();
            //p.Start();
            //p.WaitForExit();

            //// Bhushan
            ////create ReportDocument
            ////ReportDocument reportDoc;
            //rpt = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            ////assign report file (a_dataclasses.rpt)
            //rpt.FileName = @"c:\reports\World Sales Report.rpt";

            // CrystalDecisions.Shared.ExportOptions crExportOptions = new  CrystalDecisions.Shared.ExportOptions();
            //crExportOptions.ExportDestinationOptions = reportDocloc.ExportOptions;
            ////declare export path
            //string ExportPath = "C:\\temp";
 
            //crExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
            //crExportOptions.FormatOptions = null;
            //crExportOptions.ExportFormatType =
            //ExportFormatType.HTML40;
            //HTMLFormatOptions HTML40Formatopts = new
            //HTMLFormatOptions();
            //HTML40Formatopts.HTMLBaseFolderName = ExportPath;
            //HTML40Formatopts.HTMLFileName = "default1.htm";

            //HTML40Formatopts.HTMLEnableSeparatedPages = true;
            //HTML40Formatopts.HTMLHasPageNavigator = false;
            //crExportOptions.FormatOptions = HTML40Formatopts;
            ////export to html format
            //rpt.Export(crExportOptions);
            //// Bhushan


            //exportOpts.ExportFormatOptions = excelOpts;
            //excelOpts.ExcelAreaType = AreaSectionKind.PageFooter;
            //excelOpts.ExcelConstantColumnWidth = 36;
            //excelOpts.ExcelUseConstantColumnWidth = true;
            
            //excelOptsDataOnly.UseWorksheetFunctionsForSummaries = true;
            //excelOptsDataOnly.MaintainColumnAlignment = true;

            // this gets the report name and sets the export name to be the same less the extension
            //string MyRptName = rpt.FileName.ToString();
            ////MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 1)) + "pdf";
            ////MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 1)) + "xlsx";
            ////MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 1)) + "xls";
            //MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 1)) + "txt";
            //MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 1)) +"html";


           	//ReportDocument m_report = new ReportDocument();

            //// This works do not alter
            //string outputFileName = @"C:\\CortezReports\\CortezSPs1.xls";
            //try
            //{
            //    if (File.Exists(outputFileName))
            //    {
            //        File.Delete(outputFileName);
            //    }

            //    CrystalDecisions.ReportAppServer.ReportDefModel.ExcelExportFormatOptions RasXLSExpOpts = new ExcelExportFormatOptions();
            //    //RasXLSExpOpts = rptClientDoc.get_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatMSExcel);
            //    // textBox1 = "Excel - BaseAreaGroupNumber:       " + RasXLSExpOpts.BaseAreaGroupNumber.ToString() + "\n";
            //    //textBox1 += "Excel - BaseAreaType:              " + RasXLSExpOpts.BaseAreaType.ToString() + "\n";
            //    //textBox1 += "Excel - FormulaExportPageAreaType: " + RasXLSExpOpts.ExportPageAreaPairType.ToString() + "\n";
            //    //textBox1 += "Excel - ExportPageBreaks:          " + RasXLSExpOpts.ExportPageBreaks.ToString() + "\n";
            //    //textBox1 += "Excel - ConstantColWidth:          " + RasXLSExpOpts.ConstantColWidth.ToString() + "\n";
            //    //textBox1 += "Excel - ConvertDatesToStrings:     " + RasXLSExpOpts.ConvertDatesToStrings.ToString() + "\n";
            //    //textBox1 += "Excel - StartPageNumber:           " + RasXLSExpOpts.StartPageNumber.ToString() + "\n";
            //    //textBox1 += "Excel - EndPageNumber:             " + RasXLSExpOpts.EndPageNumber.ToString() + "\n";
            //    //textBox1 += "Excel - ExportPageBreaks:          " + RasXLSExpOpts.ExportPageBreaks.ToString() + "\n";
            //    //textBox1 += "Excel - MRelativeObjectPosition:   " + RasXLSExpOpts.MaintainRelativeObjectPosition.ToString() + "\n";
            //    //textBox1 += "Excel - ShowGridlines:             " + RasXLSExpOpts.ShowGridlines.ToString() + "\n";
            //    //textBox1 += "Excel - UseConstantColWidth:       " + RasXLSExpOpts.UseConstantColWidth.ToString() + "\n";

            //    // Set them now:
            //    RasXLSExpOpts.BaseAreaType = CrAreaSectionKindEnum.crAreaSectionKindWholeReport;
            //    RasXLSExpOpts.UseConstantColWidth = false;
            //    RasXLSExpOpts.ShowGridlines = false;
            //    RasXLSExpOpts.StartPageNumber = 3;
            //    RasXLSExpOpts.EndPageNumber = 10;

            //    // Save the udpated info
            //    //rptClientDoc.set_SavedExportOptions(CrReportExportFormatEnum.crReportExportFormatMSExcel, RasXLSExpOpts);

            //    CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions exportOpts1 = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
            //    exportOpts1.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatMSExcel;
            //    exportOpts1.FormatOptions = RasXLSExpOpts;

            //    // And Export
            //    rptClientDoc.PrintOutputController.ExportEx(exportOpts1).Save(outputFileName, true);
            //    MessageBox.Show("Export to Excel Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);

            //}
            //catch (Exception ex)
            //{
            //    btnSQLStatement.Text = "ERROR: " + ex.Message;
            //    return;
            //}
            //// This works do not alter


            //diskOpts.DiskFileName = @"D:\Atest\117658\" + MyRptName;

            //exportOpts.ExportDestinationType = ExportDestinationType.DiskFile;
            //exportOpts.ExportFormatType = ExportFormatType.ExcelWorkbook;
            //exportOpts.ExportFormatOptions =excelOpts;

            //try
            //{
            //    rpt.Export(exportOpts);
            //}
            //catch (Exception ex)
            //{
            //    btnSQLStatement.Text = "ERROR: " + ex.Message;
            //    return;
            //}


            //MessageBox.Show("Export to HTML Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);

            ////DO not CHANGE THis Works
            //// Export to RAS HTML 4.0 NOT SUPPORTED 
            // this gets the report name and sets the export name to be the same less the extension
            //string MyRptName = rpt.FileName.ToString();
            //MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 1)); // folder name only

            //HTMLExportFormatOptions htmlOpts = new HTMLExportFormatOptions();
            //HTMLExpOpts.HTMLBaseFolderName = @"c:\test\";
            //HTMLExpOpts.HTMLFileName = @"c:\test\" + MyRptName;
            //HTMLExpOpts.HTMLHasPageNavigator = false;
            //HTMLExpOpts.HTMLEnableSeparatedPages = false;
            //HTMLExpOpts.HTMLHasPageSection = true;
            //// New to SP 3 - Engine only, no RAS equivolent
            //// To export the same way as CR Designer does
            //HTMLExpOpts.HTMLEnableSeparatedPages = true;

            //exportOpts.ExportDestinationType = ExportDestinationType.DiskFile;
            //exportOpts.ExportFormatType = ExportFormatType.HTML40;
            //exportOpts.ExportFormatOptions = HTMLExpOpts;

            //HTMLExpOpts.HTMLHasPageSection = true;
            //rpt.Export(exportOpts);
            //MessageBox.Show("Export to HTML Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);
            ////DO not CHANGE This Works

            //// MHTML Export
            //// Export to RAS HTML 4.0 NOT SUPPORTED 
            //HTMLExportFormatOptions htmlOpts = new HTMLExportFormatOptions();
            //HTMLExpOpts.HTMLBaseFolderName = @"c:\test\";
            //HTMLExpOpts.HTMLFileName = @"c:\test\" + MyRptName;
            //HTMLExpOpts.HTMLHasPageNavigator = false;
            //HTMLExpOpts.HTMLEnableSeparatedPages = false;
            //HTMLExpOpts.HTMLHasPageSection = true;
            //// New to SP 3 - Engine only, no RAS equivolent
            //// To export the same way as CR Designer does
            //HTMLExpOpts.HTMLEnableSeparatedPages = true;

            //exportOpts.ExportDestinationType = ExportDestinationType.DiskFile;
            //exportOpts.ExportFormatType = ExportFormatType.HTML40;
            //exportOpts.ExportFormatOptions = HTMLExpOpts;
            //RASexportOpts.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatMHTML;

            //HTMLExpOpts.HTMLHasPageSection = true;
            //rptClientDoc.PrintOutputController.Export(CrReportExportFormatEnum.crReportExportFormatMHTML);
            //MessageBox.Show("Export to MHTML Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);
            //// MHTML Export

            ////// For the example     
            ////const string ex1 = @"C:\Program Files (x86)\Internet Explorer\iexplore.exe";
            ////const string ex2 = @"C:\test\CortezSPs1\";
            //////const string ex2 = @"c:\test\" + MyRptName.ToString();
            ////// Use ProcessStartInfo class     
            ////ProcessStartInfo startInfo = new ProcessStartInfo();     
            ////startInfo.CreateNoWindow = false;     
            ////startInfo.UseShellExecute = false;
            ////startInfo.FileName = "CortezSPs1.htm";     
            ////startInfo.WindowStyle = ProcessWindowStyle.Hidden;     
            ////startInfo.Arguments = ex1 + ex2;      
            ////try     
            ////{   // Start the process with the info we specified.         
            ////    // Call WaitForExit and then the using statement will close.         
            ////    using (Process exeProcess = Process.Start(startInfo))         
            ////    {         
            ////        exeProcess.WaitForExit();         
            ////    }     
            ////}
            ////catch (Exception ex)
            ////{
            ////    btnSQLStatement.Text = "ERROR: " + ex.Message;
            ////    return;
            ////}

                
                
            ////DO not CHANGE This Works
            //CrystalDecisions.CrystalReports.Engine.ReportDocument rpt1 = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            //ISCDReportClientDocument rcd;

            ////rpt1.ReportClientDocument.LocaleID = CrystalDecisions.ReportAppServer.DataDefModel.CeLocale.ceLocaleGerman;
            ////rpt1.Load(@"c:\reports\Alerting German.rpt");
            //rpt1.Load(@"D:\Atest\Bhushan\a_topcpu_with_data.rpt");

            //rcd = rpt1.ReportClientDocument;
            //HTMLExportFormatOptions htmlOpts = new HTMLExportFormatOptions();

            //htmlOpts.BaseFile = @"D:\Atest\Bhushan\html\World Sales Report.html";
            //htmlOpts.PageNavigator = false;
            //htmlOpts.SeparatePages = false;
            //CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions exportOpts1 = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
            //exportOpts1.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatMHTML; // crReportExportFormatHTML;
            //exportOpts1.FormatOptions = htmlOpts;

            //rcd.PrintOutputController.ExportEx(exportOpts1).Save(@"c:\test\html6\World Sales Report.html", true);
            //MessageBox.Show("Export to HTML Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);

            //rpt1.Close();
            //rpt1.Dispose();
            ////DO not CHANGE This Works



            //RASexportOpts.ExportFormatType = CrystalDecisions.ReportAppServer.ReportDefModel.CrReportExportFormatEnum.crReportExportFormatHTML;
            //RASexportOpts.FormatOptions = HTMLExpOpts;
            //rpt.ExportToDisk(ExportFormatType.HTML40, "c:\\test\\html4\\d.html");

            //rptClientDoc.PrintOutputController.ExportEx(RASexportOpts).Save(@"c:\test\html3\" + MyRptName, true);
            // Export to HTML end

            //diskOpts.DiskFileName = "c:\\reports\\World Sales Report.pdf";
            //diskOpts.DiskFileName = "c:\\test\\hyper.txt";

            //mailOpts.MailMessage = "See attached Action Plan";
            //mailOpts.MailSubject = "Action Plan";
            //mailOpts.MailToList = "dewwilliams@msn.com";
            //mailOpts.UserName = "yourmailaddress@msn.com";
            //mailOpts.Password = "";
            //exportOpts.ExportDestinationOptions = mailOpts;

            //exportOpts.ExportDestinationType = CrystalDecisions.Shared.ExportDestinationType.MicrosoftMail;
            //exportOpts.ExportDestinationType = CrystalDecisions.Shared.ExportDestinationType.DiskFile;
            ////exportOpts.ExportFormatOptions = PDFExpOpts;
            ////exportOpts.ExportFormatOptions = HTMLExpOpts;
            ////exportOpts.ExportFormatType = CrystalDecisions.Shared.ExportFormatType.PortableDocFormat;
            ////exportOpts.ExportFormatType = CrystalDecisions.Shared.ExportFormatType.HTML40;
            //exportOpts.ExportFormatType = CrystalDecisions.Shared.ExportFormatType.Text;

            ////exportOpts.ExportFormatType = CrystalDecisions.Shared.ExportFormatType.ExcelRecord;

            #endregion ExportText

            //string MyRptName = rpt.FileName.ToString();
            //MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 1)) + "txt";

            //// Engine to export
            //diskOpts.DiskFileName = @"C:\Reports\" + MyRptName;
            //exportOpts.ExportDestinationOptions = diskOpts;
            //exportOpts.ExportDestinationType = ExportDestinationType.DiskFile;
            //exportOpts.ExportFormatType = ExportFormatType.Text;

            //TxtExpOpts.CharactersPerInch = 16;
            //TxtExpOpts.LinesPerPage = 0;

            //exportOpts.ExportFormatOptions = TxtExpOpts;
            //rpt.Export(exportOpts);

            ////RAS to export
            //txtFmtOpts.CharactersPerInch = 16;
            //txtFmtOpts.LinesPerPage = 0;
            //RASexportOpts.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatText;
            //RASexportOpts.FormatOptions = txtFmtOpts;
            //rptClientDoc.PrintOutputController.ExportEx(RASexportOpts).Save(@"D:\Atest\482607\Latest\" + MyRptName, true);

            

            //rptClientDoc.PrintOutputController.Export(CrReportExportFormatEnum.crReportExportFormatText);


            //Exact Code:
            //_exexportOptions = new CrystalDecisions.Shared.ExportOptions();
            //_exexportOptions.ExportFormatType = ExportFormatType.Text;
            //_exexportOptions.ExportDestinationType = ExportDestinationType.DiskFile;

            //DiskFileDestinationOptions _DiskFileDestinationOptions = new DiskFileDestinationOptions();
            //_DiskFileDestinationOptions.DiskFileName = @"C:\Export_CRWNET.txt";
            //_exexportOptions.ExportDestinationOptions = _DiskFileDestinationOptions;
            //reportdocument.Export(_exexportOptions);     



            //CrystalDecisions.ReportAppServer.Controllers.PrintOutputControllerClass.ExportEx(CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions)

            ////export Rtf to mapi 
            //CrystalDecisions.CrystalReports.Engine.ReportDocument repdoc = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            //CrystalDecisions.Shared.DiskFileDestinationOptions diskOpts = new CrystalDecisions.Shared.DiskFileDestinationOptions();
            //CrystalDecisions.Shared.ExportOptions ExpOpts = new CrystalDecisions.Shared.ExportOptions();
            //CrystalDecisions.Shared.HTMLFormatOptions htmlopts = new CrystalDecisions.Shared.HTMLFormatOptions();
            //CrystalDecisions.Shared.MicrosoftMailDestinationOptions MailOpts = new CrystalDecisions.Shared.MicrosoftMailDestinationOptions();

            ////repdoc = rptClientDoc;
            //rpt.Load("c:\\report2.rpt");

            //rpt = repdoc.ExportOptions;

            //CrystalDecisions.Shared.ExchangeFolderDestinationOptions ExchExpOpts = new ExchangeFolderDestinationOptions();
            //CrystalDecisions.Shared.ExchangeDestinationType ExchExpType = new ExchangeDestinationType();

            //ReportDocument doc = (ReportDocument)CrystalReportViewer1.ReportSource;

            //exportOpts.ExportDestinationType = CrystalDecisions.Shared.ExportDestinationType.DiskFile;

            //string MyHTMLName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 4) - (MyRptName.LastIndexOf(@"\") + 1));

            //string MyRptFileLoc = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 4) - (MyRptName.LastIndexOf(@"\") + 1));

            // Export to RAS HTML 4.0 NOT SUPPORTED 
            ////HTMLExportFormatOptions htmlOpts = new HTMLExportFormatOptions();
            //HTMLExpOpts.HTMLBaseFolderName = @"c:\test\" + MyRptName.ToString();
            //HTMLExpOpts.HTMLFileName = "\\" + MyRptName + ".html";
            //HTMLExpOpts.HTMLHasPageNavigator = false;
            //HTMLExpOpts.HTMLEnableSeparatedPages = false;
            //HTMLExpOpts.HTMLHasPageSection = true;
            ////New to SP 3 - Engine only, no RAS equivolent
            //HTMLExpOpts.HTMLEnableSeparatedPages = true;

            //exportOpts.ExportDestinationType = ExportDestinationType.DiskFile;
            //exportOpts.ExportFormatType = ExportFormatType.HTML32;
            //exportOpts.ExportFormatOptions = HTMLExpOpts;
            //rpt.Export(exportOpts);

            ////System.MAPI mapi = new MAPI();
            ////mapi.AddAttachment("c:\\temp\\file1.txt");
            ////mapi.AddAttachment("c:\\temp\\file2.txt");
            ////mapi.AddRecipientTo("person1@somewhere.com");
            ////mapi.AddRecipientTo("person2@somewhere.com");
            ////mapi.SendMailPopup("testing", "body text");



            ////System.Net.Mail.MailMessage mail = new System.Net.Mail.MailMessage();
            //////mail.To.Add(txtTo.Text);
            ////mail.To.Add("don.williams@sap.com"); 
            //////mail.From = new MailAddress(txtFrom.Text);
            ////mail.Subject = "Attached is a HTML file - .net Export test ";
            //////mail.Body = txtMessage.Text;
            ////mail.IsBodyHtml = true;

            ////System.Net.Mail.Attachment attachment;
            ////attachment = new System.Net.Mail.Attachment(HTMLExpOpts.HTMLBaseFolderName + "\\" + MyRptName + ".htm");
            ////mail.Attachments.Add(attachment);

            //Send the message.
            //SmtpClient client = new SmtpClient("DEWDFECCR06.wdf.sap.corp");
            // Add credentials if the SMTP server requires them.
//            client.Credentials = CredentialCache.DefaultNetworkCredentials;

            ////try
            ////{
            ////    //client.UseDefaultCredential = true;
            ////    client.Send(mail);
            ////}
            ////catch (Exception ex)
            ////{
            ////    Console.WriteLine("Exception caught in CreateMessageWithAttachment(): {0}",
            ////          ex.ToString());
            ////}


            //rpt.Export(exportOpts);
            //MessageBox.Show("Export to HTML Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);

            ////// this works DO NOT EDIT
            //ExchExpOpts.FolderPath = "don.williams@sap.com#Inbox"; // Should be an exchange folder...
            //ExchExpOpts.Profile = "Default Outlook Profile"; //_exchangeProfile; // "MS Exchange Settings"; // "Outlook";
            //ExchExpOpts.Password = "password";

            //exportOpts.ExportFormatOptions = PDFExpOpts;
            //exportOpts.ExportDestinationType = CrystalDecisions.Shared.ExportDestinationType.ExchangeFolder;
            //exportOpts.ExportFormatType = CrystalDecisions.Shared.ExportFormatType.PortableDocFormat;
            //exportOpts.ExportDestinationOptions = ExchExpOpts;
            //rpt.Export(exportOpts);
            //MessageBox.Show("Mail to Exchange folder sent Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);
            ////// this works DO NOT EDIT

            // this works DO NOT EDIT
            exportOpts.ExportDestinationType = CrystalDecisions.Shared.ExportDestinationType.MicrosoftMail;
            exportOpts.ExportFormatType = CrystalDecisions.Shared.ExportFormatType.PortableDocFormat;
            //exportOpts.ExportFormatType = CrystalDecisions.Shared.ExportFormatType.HTML32;

            exportOpts.ExportFormatOptions = pdfOpts;
            //pdfOpts.FirstPageNumber = 3;
            //pdfOpts.LastPageNumber = 3;
            //pdfOpts.UsePageRange = true;

            // this does not work, name of the file is the Title saved in the RPT
            rpt.SummaryInfo.ReportTitle = "Dons Report";

            mailOpts.MailToList = "Don Williams";
            mailOpts.MailSubject = "Attached is a PDF file - .net Export test ";
            mailOpts.MailSubject = "This is the Subject";
            //MailOpts.MailCCList = "John Doe";
            mailOpts.UserName = "don.williams@sap.com";
            mailOpts.Password = "12Paigeepooh";
            exportOpts.ExportDestinationOptions = mailOpts;
            rpt.Export(exportOpts);
            MessageBox.Show("Mail sent Completed", "", MessageBoxButtons.OK, MessageBoxIcon.Information);
            // this works DO NOT EDIT

        }

        private void SaveAsDOC_Click(object sender, EventArgs e)
        {
            CrystalDecisions.Shared.PdfRtfWordFormatOptions DOCOpts = CrystalDecisions.Shared.ExportOptions.CreatePdfRtfWordFormatOptions();
            CrystalDecisions.Shared.DiskFileDestinationOptions diskOpts = CrystalDecisions.Shared.ExportOptions.CreateDiskFileDestinationOptions();
            CrystalDecisions.Shared.ExportOptions exportOpts = new CrystalDecisions.Shared.ExportOptions();

            rptClientDoc = new ReportClientDocument();

            //DOCOpts.UsePageRange = false;
            exportOpts.ExportFormatOptions = DOCOpts;

            diskOpts.DiskFileName = "c:\\reports1.doc";

            //exportOpts.ExportDestinationOptions = DOCOpts;

            exportOpts.ExportDestinationType = CrystalDecisions.Shared.ExportDestinationType.DiskFile;
            exportOpts.ExportFormatType = CrystalDecisions.Shared.ExportFormatType.WordForWindows;

            rpt.Export(exportOpts);

        }

        private void SetLogonInfo_Click(object sender, EventArgs e)
        {
            //string connString = "Provider=SQLOLEDB;Data Source=dwcb12003;Database=xtreme;User ID=sa;Password=1Oem2000";
            //rptClientDoc.DatabaseController.LogonEx("van-w-13-dwilli", "xtreme", "sa", "1Oem2000");
            //rptClientDoc.DatabaseController.LogonEx("192.168.43.128", "TestDB", "sb", "1Oem2000");
            //rptClientDoc.DatabaseController.logon("sb", "1Oem2000");
            //rpt.SetDatabaseLogon("sb", "1Oem2000"); 
            //rptClientDoc.DatabaseController.Database.Tables[0].QualifiedName.ToString();
            //rptClientDoc.DatabaseController.Database.Tables[0].QualifiedName = "xtreme.SessionName.Orders";
            //rptClientDoc.DatabaseController.SetTableLocationByServerDatabaseName("cspRpt_Astellas_Query_Rate_Per_Month_Wk;1", "VMW2K8CRSE2K8", "astellastest", "sb", "1Oem2000");

            CrystalDecisions.CrystalReports.Engine.ReportObjects crReportObjects;
            CrystalDecisions.CrystalReports.Engine.SubreportObject crSubreportObject;
            CrystalDecisions.CrystalReports.Engine.ReportDocument crSubreportDocument;
            CrystalDecisions.CrystalReports.Engine.Database crDatabase;
            CrystalDecisions.CrystalReports.Engine.Tables crTables;
            TableLogOnInfo crTableLogOnInfo;

            CrystalDecisions.Shared.ConnectionInfo crConnectioninfo = new CrystalDecisions.Shared.ConnectionInfo();

            //btrDataFile.Text = rpt.Database.Tables[0].LogOnInfo.ConnectionInfo.ServerName.ToString();
            //btrSearchPath.Text = rpt.Database.Tables[0].LogOnInfo.ConnectionInfo.DatabaseName.ToString();
            //btrFileLocation.Text = rpt.Database.Tables[0].LogOnInfo.ConnectionInfo.UserID.ToString();
            //btrPassword.Text = rpt.Database.Tables[0].LogOnInfo.ConnectionInfo.Password.ToString();

            rpt.DataSourceConnections.ToString();

            //set up the database and tables objects to refer to the current report
            crDatabase = rpt.Database;
            crTables = crDatabase.Tables;

            crConnectioninfo.ServerName = btrDataFile.Text.ToString();
            crConnectioninfo.UserID = btrFileLocation.Text.ToString(); // "sa"; // "sa"; // Hana i819003
            crConnectioninfo.Password = btrPassword.Text.ToString(); //  "1Oem2000"; // Hana Password4
            crConnectioninfo.DatabaseName = btrSearchPath.Text.ToString();

            int tableIndex = 0;
            bool mainSecureDB;

            //System.Data.Odbc.OdbcConnection MyPcODBC = new System.Data.Odbc.OdbcConnection();
            //MyPcODBC.Database.ToString();

                
            CrystalDecisions.Shared.DataSourceConnections DSCon;
            //rpt.DataSourceConnections.Count.ToString();

            ////Get the Database Tables Collection for your report
            //CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            //boTables = rptClientDoc.DatabaseController.Database.Tables;

            //CrystalDecisions.ReportAppServer.DataDefModel.Procedure boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Procedure();
            ////For each table in the report:
            //// - Set the Table Name properties.
            //// - Set the table location in the report to use the new modified table
            //boTable.Name = "cspRpt_Astellas_Query_Rate_Per_Month_Wk;1";
            //boTable.QualifiedName = "astellastest.dbo.cspRpt_Astellas_Query_Rate_Per_Month_Wk;1";
            //boTable.Alias = "cspRpt_Astellas_Query_Rate_Per_Month_Wk;1";

            //rpt.ReportClientDocument.DatabaseController.SetTableLocation(boTables[0], boTable);

            // Don't delete this line - used for testing report with Parms.
            //ReportDocumentSetParameters(rpt);
            bool ConWorks = false;

            // get the DB name from the report
            CrystalDecisions.Shared.NameValuePair2 nvp2 = (NameValuePair2)rpt.Database.Tables[0].LogOnInfo.ConnectionInfo.Attributes.Collection[1];

            //NameValuePair2 test = rpt.Database.Tables[0].LogOnInfo.ConnectionInfo.LogonProperties.LookupNameValuePair("UseDSNProperties");
            ////MessageBox.Show(test.Name.ToString());
            //test.Value = true;

            //((CrystalDecisions.Shared.NameValuePair2)((new System.Collections.ArrayList.ArrayListDebugView(((CrystalDecisions.Shared.DbConnectionAttributes)(((CrystalDecisions.Shared.NameValuePair2)
            //    ((new System.Collections.ArrayList.ArrayListDebugView(rpt.Database.Tables[0].LogOnInfo.ConnectionInfo.Attributes.Collection)).Items[3])).Value)).Collection)).Items[2])).Value = true;

            //CrystalDecisions.Shared.DbConnectionAttributes nvp2DSN = 
            //rpt.Database.Tables[0].LogOnInfo.ConnectionInfo.Attributes.Collection)).Items[3])).Value)).Collection)).Items[2]) = true;

            //btnSQLStatement.Text = "Data Sources are the not the same: Database: " + nvp2.Value.ToString();


            //loop through all the tables and pass in the connection info
            foreach (CrystalDecisions.CrystalReports.Engine.Table crTable in crTables)
            {
                mainSecureDB = rpt.Database.Tables[tableIndex].LogOnInfo.ConnectionInfo.IntegratedSecurity;
                string mainTableName = crTable.Name.ToString();
                tableIndex++;

                //btrDataFile - Server
                //btrSearchPath - Database
                //btrFileLocation - User Name 
                //btrPassword - password

                //pass the necessary parameters to the connectionInfo object
                //crConnectioninfo.ServerName = btrDataFile.Text.ToString(); //"192.168.13.172"; // VMW2K8CRSE2K8 192.168.13.172 //10.161.15.19 VANN00517670A Hana 10.161.12.206
                crConnectioninfo.ServerName = btrDataFile.Text.ToString(); // "10.161.12.206a";
                if (!mainSecureDB)
                {
                    crConnectioninfo.ServerName = btrDataFile.Text.ToString();
                    crConnectioninfo.UserID = btrFileLocation.Text.ToString(); // "sa"; // "sa"; // Hana i819003
                    crConnectioninfo.Password = btrPassword.Text.ToString(); //  "1Oem2000"; // Hana Password4
                    crConnectioninfo.DatabaseName = btrSearchPath.Text.ToString(); // ""; // QTYLTD  AKLTD SQL61L // Hana XTREME.CUSTOMER
                    //crConnectioninfo.DatabaseName = "xtreme_new"; // QTYLTD  AKLTD SQL61L // Hana XTREME.CUSTOMER
                    
                    //crConnectioninfo.UserID = btrFileLocation.Text.ToString(); // "sa"; // Hana i819003
                    //crConnectioninfo.Password = btrPassword.Text.ToString(); // "1Oem2000"; // Hana Password4
                    //crConnectioninfo.DatabaseName = btrSearchPath.Text.ToString(); // "XTREME"; // QTYLTD  AKLTD SQL61L // Hana XTREME.CUSTOMER
                }
                else
                {
                    crConnectioninfo.IntegratedSecurity = true;
                    crConnectioninfo.UserID = btrFileLocation.Text.ToString(); // "sa"; // Hana i819003
                    crConnectioninfo.Password = btrPassword.Text.ToString(); // "1Oem2000"; // Hana Password4
                    crConnectioninfo.DatabaseName = btrSearchPath.Text.ToString(); // "XTREME"; // QTYLTD  AKLTD SQL61L // Hana XTREME.CUSTOMER
                }

                crTableLogOnInfo = crTable.LogOnInfo;
                crTableLogOnInfo.ConnectionInfo = crConnectioninfo;
                crTable.ApplyLogOnInfo(crTableLogOnInfo);

                // SQL Server
                try
                {
                    crTable.Location = btrSearchPath.Text.ToString() + ".dbo." + crTable.Location; //"orders"; // crTable.Location;
                }
                catch (Exception ex)
                {
                    if (ex.Message == "Fetching SQL statements is not supported for this report.")
                    {
                        CrystalDecisions.ReportAppServer.Controllers.DatabaseController databaseController = rpt.ReportClientDocument.DatabaseController;
                        ISCRTable oldTable = (ISCRTable)databaseController.Database.Tables[0];

                        if (nvp2.Name.ToString() == crConnectioninfo.DatabaseName.ToString())
                        {
                            if (((dynamic)oldTable).CommandText.ToString() != null)
                            {
                                btnSQLStatement.Text = "Main Report Command: " + ((dynamic)oldTable).CommandText.ToString();
                                btnSQLStatement.Text += "\n";
                            }
                        }
                        else
                            btnSQLStatement.Text += "\nWrong log on Server Name: Database: " + nvp2.Value.ToString() + " does not exist\n";
                    }
                    else
                    {
                        btnSQLStatement.Text = "ERROR: " + ex.Message;
                    }
                }

                if (crTable.TestConnectivity())
                    ConWorks = true;
                else
                    ConWorks = false;

                //rpt.VerifyDatabase();

                //ISCRTable CurTable = rptClientDoc.DatabaseController.Database.Tables.FindTableByAlias("Customer1");
                //if (CurTable.Alias == "Customer1")
                //{
                //    ISCRTable NewTable = CurTable.Clone();
                //    NewTable.Name = "Customer";
                //    NewTable.QualifiedName = "xtreme.dbo.Customer";
                //    NewTable.Alias = "CustomerYoshi";
                //    rptClientDoc.DatabaseController.SetTableLocation(CurTable, NewTable);
                //    IsRpt = false;
                //}


                //crTable.Location = "Addresses_cws";
                //crTable.Name = "Address"; // read only 

                // SQL Server
                //crTable.Location = crDatabase + ".dbo." + "Addresses_cws"; // crTable.Location;
                //crTable.Location = "exec cspRpt_Astellas_Query_Rate_Per_Month_Wk NULL, NULL, NULL, NULL, NULL, NULL, NULL";

                //foreach (CrystalDecisions.CrystalReports.Engine.Table tbl in rpt.Database.Tables)
                //{
                //    tbl.Location = "Addresses_cws";
                //}

            }

            if (ConWorks)
            {
                //gp.FromString("2-0");
                GroupPath gp = new GroupPath();
                string tmp = String.Empty;
                try
                {
                    rptClientDoc.RowsetController.GetSQLStatement(gp, out tmp);
                    btnSQLStatement.Text = tmp;
                    btnSQLStatement.AppendText("\n");
                }
                catch (Exception ex)
                {
                    if (ex.Message == "Fetching SQL statements is not supported for this report.")
                    {
                        CrystalDecisions.ReportAppServer.Controllers.DatabaseController databaseController = rpt.ReportClientDocument.DatabaseController;
                        ISCRTable oldTable = (ISCRTable)databaseController.Database.Tables[0];

                        if (nvp2.Name.ToString() == crConnectioninfo.DatabaseName.ToString())
                        {
                            if (((dynamic)oldTable).CommandText.ToString() != null)
                            {
                                btnSQLStatement.Text = "Main Report Command: " + ((dynamic)oldTable).CommandText.ToString();
                                btnSQLStatement.Text += "\n";
                            }
                        }
                        else
                            btnSQLStatement.Text += "\nWrong log on Server Name: Database: " + nvp2.Value.ToString() + " does not exist\n";
                    }
                    else
                    {
                        btnSQLStatement.Text = "ERROR: " + ex.Message;
                    }
                }

                //set the crSections object to the current report's sections
                CrystalDecisions.CrystalReports.Engine.Sections crSections = rpt.ReportDefinition.Sections;
                int flcnt = 0;
                bool SecureDB;

                //loop through all the sections to find all the report objects
                foreach (CrystalDecisions.CrystalReports.Engine.Section crSection in crSections)
                {
                    crReportObjects = crSection.ReportObjects;
                    //loop through all the report objects to find all the subreports
                    foreach (CrystalDecisions.CrystalReports.Engine.ReportObject crReportObject in crReportObjects)
                    {
                        if (crReportObject.Kind == ReportObjectKind.SubreportObject)
                        {
                            try
                            {
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();

                                //you will need to typecast the reportobject to a subreport 
                                //object once you find it
                                crSubreportObject = (CrystalDecisions.CrystalReports.Engine.SubreportObject)crReportObject;
                                string mysubname = crSubreportObject.SubreportName.ToString();
                                //mysubname = " ";
                                //open the subreport object
                                crSubreportDocument = crSubreportObject.OpenSubreport(crSubreportObject.SubreportName);

                                CrystalDecisions.CrystalReports.Engine.Database crSubDatabase;
                                CrystalDecisions.CrystalReports.Engine.Tables crSubTables;
                                TableLogOnInfo crTableSubLogOnInfo;

                                CrystalDecisions.Shared.ConnectionInfo crSubConnectioninfo = new CrystalDecisions.Shared.ConnectionInfo();

                                //set the database and tables objects to work with the subreport
                                crSubDatabase = crSubreportDocument.Database;
                                //crSubTables = crSubTables.Tables;
                                tableIndex = 0;

                                // get the DB name from the report
                                CrystalDecisions.Shared.NameValuePair2 nvp2Sub = (NameValuePair2)crSubreportDocument.Database.Tables[tableIndex].LogOnInfo.ConnectionInfo.Attributes.Collection[1];

                                //btnSQLStatement.Text = "Data Sources are the not the same: Database: " + nvp2.Value.ToString();

                                //loop through all the tables in the subreport and 
                                //set up the connection info and apply it to the tables
                                foreach (CrystalDecisions.CrystalReports.Engine.Table crTable in crTables)
                                {   // check if integrated security is enabled
                                    SecureDB = crSubreportDocument.Database.Tables[tableIndex].LogOnInfo.ConnectionInfo.IntegratedSecurity;
                                    string TableName = crTable.Name.ToString();
                                    tableIndex++;
                                    //crConnectioninfo.ServerName = "10.161.12.206"; //192.168.13.156 VMW2K8CRSE2K8 VANN00517670A 10.161.15.19 10.161.12.206
                                    //if (!SecureDB)
                                    crConnectioninfo.ServerName = btrDataFile.Text.ToString(); //"192.168.13.172"; // VMW2K8CRSE2K8 192.168.13.172 //10.161.15.19 VANN00517670A Hana 10.161.12.206
                                    if (!SecureDB)
                                    {
                                        crConnectioninfo.UserID = btrFileLocation.Text.ToString(); // "sa"; // Hana i819003
                                        crConnectioninfo.Password = btrPassword.Text.ToString(); // "1Oem2000"; // Hana Password4
                                        crConnectioninfo.DatabaseName = btrSearchPath.Text.ToString(); // "XTREME"; // QTYLTD  AKLTD SQL61L // Hana XTREME.CUSTOMER
                                    }
                                    else
                                    //{
                                        crConnectioninfo.IntegratedSecurity = true;
                                    //    //crConnectioninfo.Password = "";
                                    //    //crConnectioninfo.UserID = "";
                                    //}

                                    crTableLogOnInfo = crTable.LogOnInfo;
                                    crTableLogOnInfo.ConnectionInfo = crConnectioninfo;
                                    crTable.ApplyLogOnInfo(crTableLogOnInfo);

                                    // Get subreport SQl 
                                    foreach (String resultField in rptClientDoc.SubreportController.GetSubreportNames())
                                    {
                                        SubreportController subreportController = rptClientDoc.SubreportController;
                                        SubreportClientDocument subreportClinetDocument = subreportController.GetSubreport(resultField);
                                        subreportClinetDocument.DatabaseController.LogonEx(crConnectioninfo.ServerName, crConnectioninfo.DatabaseName, crConnectioninfo.UserID, crConnectioninfo.Password);

                                        // SAGE 
                                        //CrystalDecisions.CrystalReports.Engine.ReportDocument subreportdocument = rpt.Subreports[resultField.ToString()];
                                        //subreportdocument.SetDatabaseLogon(crConnectioninfo.UserID, crConnectioninfo.Password, crConnectioninfo.ServerName, crConnectioninfo.DatabaseName);
                                        //subreportdocument.Database.Tables[tableIndex].Location = sLocation;


                                        try
                                        {
                                            subreportClinetDocument.RowsetController.GetSQLStatement(gp, out tmp);
                                            btnSQLStatement.Text += "Subreport: " + resultField.ToString() + "\n:" + tmp;
                                            btnSQLStatement.AppendText("\n");
                                        }
                                        catch (Exception ex)
                                        {
                                            {
                                                if (nvp2Sub.Name.ToString() == crConnectioninfo.DatabaseName.ToString())
                                                {
                                                    if (ex.Message == "Fetching SQL statements is not supported for this report.")
                                                    {
                                                        CrystalDecisions.ReportAppServer.Controllers.DatabaseController databaseController = rpt.ReportClientDocument.SubreportController.GetSubreport(resultField.ToString()).DatabaseController;
                                                        ISCRTable oldTable = (ISCRTable)databaseController.Database.Tables[0];
                                                        btnSQLStatement.Text += "\nSubreport: " + resultField.ToString() + " - Command:\n" + ((dynamic)oldTable).CommandText.ToString();
                                                        btnSQLStatement.AppendText("\n");
                                                    }
                                                    else
                                                    {
                                                        btnSQLStatement.Text += "Logon Subreport: " + resultField.ToString() + " - ERROR: " + ex.Message;
                                                        btnSQLStatement.AppendText("\n");
                                                    }
                                                }
                                                else
                                                    btnSQLStatement.Text += "\nWrong Subreport log on Server Name: Database: " + nvp2Sub.Value.ToString() + " does not exist\n";
                                            }
                                        }
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                {
                                    if (ex.Message == "Fetching SQL statements is not supported for this report.")
                                    {
                                        btnSQLStatement.Text += "ERROR: " + ex.Message;
                                        btnSQLStatement.AppendText("\n");
                                    }
                                    else
                                    {
                                        //btnSQLStatement.Text += "ERROR: " + ex.Message;
                                        //btnSQLStatement.AppendText("\n");
                                    }
                                }
                            }
                        }
                    }
                }
                if (btrVerifyDatabase.Checked)
                    rpt.VerifyDatabase();
            }
            else
            {
                btnSQLStatement.Text = "No data source or failed to log on";
            }

            IsLoggedOn = true;
            //try
            //{
            //    rpt.VerifyDatabase();
            //}
            //catch (Exception ex)
            //{
            //    MessageBox.Show("Trigger Event - Error in Viewer: " + e.ToString());
            //}


            //bool myTEst = rptClientDoc.DatabaseController.VerifyTableConnectivity("Orders");

            // Pervasive
            //rptClientDoc.DatabaseController.LogonEx("DEMODATA", "billing", "", ""); 

        }

        private void SubReportDocumentSetParameters(SubreportClientDocument subreportClinetDocument)
        {
            SetSubCrystalParam(subreportClinetDocument, "@CMPNAME", "Universal Corporation");
            SetSubCrystalParam(subreportClinetDocument, "@LEVEL1NAME", "Contract");
            SetSubCrystalParam(subreportClinetDocument, "@FROMCONT", "1");
            SetSubCrystalParam(subreportClinetDocument, "@TOCONT", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ");
            SetSubCrystalParam(subreportClinetDocument, "@FROMUFMTCONT", "1");
            SetSubCrystalParam(subreportClinetDocument, "@TOUFMTCONT", "ZZZZZZZZZZZZZZZZ");
            SetSubCrystalParam(subreportClinetDocument, "@LEVEL2NAME", "Project");
            SetSubCrystalParam(subreportClinetDocument, "@FROMPROJ", "1");
            SetSubCrystalParam(subreportClinetDocument, "@TOPROJ", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ");
            SetSubCrystalParam(subreportClinetDocument, "@FROMCUSTOMER", "1");
            SetSubCrystalParam(subreportClinetDocument, "@TOCUSTOMER", "ZZZZZZZZZZZZ");
            SetSubCrystalParam(subreportClinetDocument, "@FROMCONTSTART", "19000101");
            SetSubCrystalParam(subreportClinetDocument, "@TOCONTSTART", "99991231");
            SetSubCrystalParam(subreportClinetDocument, "@FROMPROJSTART", "19000101");
            SetSubCrystalParam(subreportClinetDocument, "@TOPROJSTART", "99991231");
            SetSubCrystalParam(subreportClinetDocument, "@CONTSTATUS", "0");
            SetSubCrystalParam(subreportClinetDocument, "@PROJSTATUS", "0");
            SetSubCrystalParam(subreportClinetDocument, "@SWINCLLABOR", "1");
            SetSubCrystalParam(subreportClinetDocument, "@SWINCLOVERHEAD", "1");
            SetSubCrystalParam(subreportClinetDocument, "@SWCUSTCUR", "1");
            SetSubCrystalParam(subreportClinetDocument, "@SWMULTI", "1");
            SetSubCrystalParam(subreportClinetDocument, "@LEVEL4NAME", "Contracts");
            SetSubCrystalParam(subreportClinetDocument, "@HCURN", "CAD");
            SetSubCrystalParam(subreportClinetDocument, "@HCURNDEC", "2");
            SetSubCrystalParam(subreportClinetDocument, "@USEPERCENT", "1");
            SetSubCrystalParam(subreportClinetDocument, "@LEVEL3NAME", "Category");
        }

        private void SetSubCrystalParam(SubreportClientDocument subreportClinetDocument, string parameterName, string listOfValues)
        {
            int ParCount = rpt.DataDefinition.ParameterFields.Count;

            foreach (CrystalDecisions.CrystalReports.Engine.ParameterFieldDefinition crParamField in rpt.DataDefinition.ParameterFields)
            {

                if ("@" + crParamField.Name.ToLower() == parameterName.ToLower())
                {
                    try
                    {
                        CrystalDecisions.Shared.ParameterValues myparameterValues = new CrystalDecisions.Shared.ParameterValues();
                        CrystalDecisions.Shared.ParameterDiscreteValue crDiscreteValue = new CrystalDecisions.Shared.ParameterDiscreteValue();

                        crDiscreteValue.Value = listOfValues;
                        myparameterValues.IndexOf(crParamField.Name);
                        myparameterValues.Add(crDiscreteValue);
                        crParamField.ApplyCurrentValues(myparameterValues);
                        return;
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                        return;
                    }
                }
            }
        }

        private void TextObjects_Click(object sender, EventArgs e)
        {
            string textBox1 = String.Empty;
            textBox1 = rptClientDoc.DisplayName.ToString();
            btnReportObjects.Text = String.Empty;

            // List all fields used in the document
            foreach (Field resultField in rptClientDoc.DataDefController.DataDefinition.ResultFields)
            {
                textBox1 = resultField.FormulaForm.ToString();
                btnReportObjects.AppendText("\n");
                btnReportObjects.Text += textBox1;
                //MessageBox.Show(resultField.FormulaForm, "text objects", MessageBoxButtons.OK, MessageBoxIcon.Information);

            } 
        }

        private void Dan_Click(object sender, EventArgs e)
        {
            for (int i = 0; i < 5; i++)
            {
                //ReportDocument rptDocument = new ReportDocument();

                try
                {
                    CrystalDecisions.CrystalReports.Engine.ReportDocument rpt = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
                    rpt.Load(@"C:\reports\formulas.rpt");//virtual machine
                    MicrosoftMailDestinationOptions mailOptions = new MicrosoftMailDestinationOptions();
                    CrystalDecisions.Shared.ExportOptions exportOptions = new CrystalDecisions.Shared.ExportOptions();

                    mailOptions.MailToList = "don.williams@sap.com";
                    mailOptions.MailSubject = "This is test mail";
                    mailOptions.MailMessage = "This is test message";
                    mailOptions.Password = "";
                    mailOptions.UserName = "DonWilliams";

                    exportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    exportOptions.ExportDestinationType = ExportDestinationType.MicrosoftMail;
                    exportOptions.ExportDestinationOptions = mailOptions;
                    MessageBox.Show("Before Exporting");
                    rpt.Export(exportOptions);
                    MessageBox.Show("After Exporting");

                    rpt.Close();
                    rpt.Dispose();
                    MessageBox.Show("Closed and Disposed:Success");
                }

                catch (System.AccessViolationException ave)
                {
                    MessageBox.Show("Exception Inside catch block(AccessViolationException) : ", ave.ToString());
                    rpt.Close();
                    rpt.Dispose();
                    MessageBox.Show("Exception Inside catch block(AccessViolationException) : Closed and Disposed");
                }

                catch (System.Exception eVal)
                {
                    MessageBox.Show(eVal.ToString());
                    rpt.Close();
                    rpt.Dispose();
                    MessageBox.Show("Closed and Disposed");
                }
            }




            //CrystalDecisions.CrystalReports.Engine.ReportObjects crReportObjects;

            ////set the crSections object to the current report's sections
            //CrystalDecisions.CrystalReports.Engine.Sections crSections = rpt.ReportDefinition.Sections;

            ////loop through all the sections to find all the report objects
            //foreach (CrystalDecisions.CrystalReports.Engine.Section crSection in crSections)
            //{
            //    crReportObjects = crSection.ReportObjects;
            //    //loop through all the report objects to find all the subreports
            //    foreach (CrystalDecisions.CrystalReports.Engine.ReportObject crReportObject in crReportObjects)
            //    {
            //        if (crReportObject.Kind == ReportObjectKind.)
            //        {


            //        }
            //    }
            //}

            //ReportDocument boReportDocument = new ReportDocument();
            //**EDIT** Change the path and report name to the report you want to change.
            //rpt.Load(@"D:\Atest\735372\Temp\Banks\report1.rpt", OpenReportMethod.OpenReportByTempCopy);
            //rptClientDoc = rpt.ReportClientDocument;

            ////Create a new Database Table to replace the reports current table.
            //CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();

            ////boMainPropertyBag: These hold the attributes of the tables ConnectionInfo object
            //PropertyBag boMainPropertyBag = new PropertyBag();
            ////boInnerPropertyBag: These hold the attributes for the QE_LogonProperties
            ////In the main property bag (boMainPropertyBag)
            //PropertyBag boInnerPropertyBag = new PropertyBag();

            ////Set the attributes for the boInnerPropertyBag
            //boInnerPropertyBag.Add("File Path ", @"D:\Atest\735372\Temp\Banks\list_of_banks_out.xml");
            //boInnerPropertyBag.Add("Internal Connection ID", "{3fdfc67a-c337-4bc3-a103-db0d6c37107b}");

            ////Set the attributes for the boMainPropertyBag
            //boMainPropertyBag.Add("Database DLL", "crdb_adoplus.dll");
            //boMainPropertyBag.Add("QE_DatabaseName", "");
            //boMainPropertyBag.Add("QE_DatabaseType", "ADO.NET (XML)");
            ////Add the QE_LogonProperties we set in the boInnerPropertyBag Object
            //boMainPropertyBag.Add("QE_LogonProperties", boInnerPropertyBag);
            //boMainPropertyBag.Add("QE_ServerDescription", "Query");
            //boMainPropertyBag.Add("QE_SQLDB", "False");
            //boMainPropertyBag.Add("SSO Enabled", "False");

            ////Create a new ConnectionInfo object
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo =
            //new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            ////Pass the database properties to a connection info object
            //boConnectionInfo.Attributes = boMainPropertyBag;
            ////Set the connection kind
            //boConnectionInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            ////**EDIT** Set the User Name and Password if required.
            ////boConnectionInfo.UserName = "UserName";
            ////boConnectionInfo.Password = "Password";
            ////Pass the connection information to the table
            //boTable.ConnectionInfo = boConnectionInfo;

            ////Get the Database Tables Collection for your report
            //CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            //boTables = rptClientDoc.DatabaseController.Database.Tables;

            ////For each table in the report:
            //// - Set the Table Name properties.
            //// - Set the table location in the report to use the new modified table
            //boTable.Name = "Detail";
            //boTable.QualifiedName = "Query/ListOfBanks/Detail";
            //boTable.Alias = "Query_ListOfBanks_Detail";

            //rptClientDoc.DatabaseController.SetTableLocation(boTables[0], boTable);

            //boTable.Name = "ListOfBanks";
            //boTable.QualifiedName = "Query/ListOfBanks";
            //boTable.Alias = "Query_ListOfBanks";

            //rptClientDoc.DatabaseController.SetTableLocation(boTables[1], boTable);

            //boTable.Name = "QueryOptions";
            //boTable.QualifiedName = "QueryOptions";
            //boTable.Alias = "QueryOptions";

            //rptClientDoc.DatabaseController.SetTableLocation(boTables[2], boTable);

            //boTable.Name = "TranslatedText";
            //boTable.QualifiedName = "TranslatedText";
            //boTable.Alias = "TranslatedText";

            //rptClientDoc.DatabaseController.SetTableLocation(boTables[3], boTable);

            ////Verify the database after adding substituting the new table.
            ////To ensure that the table updates properly when adding Command tables or Stored Procedures.
            //rptClientDoc.VerifyDatabase();
            ////crystalReportViewer1.ReportSource = rptClientDoc;
            //IsRpt = false;

            //return boReportDocument;
            
            //CrystalDecisions.CrystalReports.Engine.Database crDatabase;
            //CrystalDecisions.CrystalReports.Engine.Tables crTables;
            //CrystalDecisions.CrystalReports.Engine.Table crTable;


            ////set up the database and tables objects to refer to the current report
            //crDatabase = rpt.Database;
            //crTables = crDatabase.Tables;
            //crTable = rpt.Database.Tables[0];

            //rpt.Refresh();

            //crTable.TestConnectivity();

            //IsRpt = true;

            //// Don't delete, good example of setting XML WEB service
            //CrystalDecisions.CrystalReports.Engine.ReportDocument boReportDocument = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            ////**EDIT** Change the path and report name to the report you want to change.
            //boReportDocument.Load(@"D:\CPP Net 2010\Issue\tem_list_of_banks.rpt", OpenReportMethod.OpenReportByTempCopy);

            ////Create a new Stored Procedure Table to replace the reports current table.
            //CrystalDecisions.ReportAppServer.DataDefModel.Procedure boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Procedure();

            ////boMainPropertyBag: These hold the attributes of the tables ConnectionInfo object
            //PropertyBag boMainPropertyBag = new PropertyBag();
            ////boInnerPropertyBag: These hold the attributes for the QE_LogonProperties
            ////In the main property bag (boMainPropertyBag)
            //PropertyBag boInnerPropertyBag = new PropertyBag();

            ////Set the attributes for the boInnerPropertyBag
            //boInnerPropertyBag.Add("Convert Mulitivalue to Table", "False");
            //boInnerPropertyBag.Add("Local Schema File", @"D:\CPP Net 2010\Issue\list_of_banks_out.xsd");
            //boInnerPropertyBag.Add("Local XML File", @"D:\CPP Net 2010\Issue\list_of_banks_out.xml");

            ////Set the attributes for the boMainPropertyBag
            //boMainPropertyBag.Add("Database DLL", "crdb_xml.dll");
            //boMainPropertyBag.Add("QE_DatabaseName", "");
            //boMainPropertyBag.Add("QE_DatabaseType", "");
            ////Add the QE_LogonProperties we set in the boInnerPropertyBag Object
            //boMainPropertyBag.Add("QE_LogonProperties", boInnerPropertyBag);
            //boMainPropertyBag.Add("QE_ServerDescription", @"D:\CPP Net 2010\Issue\list_of_banks_out.xml D:\CPP Net 2010\Issue\list_of_banks_out.xsd");
            //boMainPropertyBag.Add("QE_SQLDB", "False");
            //boMainPropertyBag.Add("SSO Enabled", "False");

            ////Create a new ConnectionInfo object
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo =
            //new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            ////Pass the database properties to a connection info object
            //boConnectionInfo.Attributes = boMainPropertyBag;
            ////Set the connection kind
            //boConnectionInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            ////**EDIT** Set the User Name and Password if required.
            //boConnectionInfo.UserName = "";
            //boConnectionInfo.Password = "";
            ////Pass the connection information to the table
            //boTable.ConnectionInfo = boConnectionInfo;

            ////Get the Database Tables Collection for your report
            //CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            //boTables = boReportDocument.ReportClientDocument.DatabaseController.Database.Tables;

            ////For each table in the report:
            //// - Set the Table Name properties.
            //// - Set the table location in the report to use the new modified table
            //boTable.Name = "Query/ListOfBanks/Detail";
            //boTable.QualifiedName = "Query.Query.ListOfBanks.Query/ListOfBanks/Detail";
            //boTable.Alias = "Query/ListOfBanks/Detail";

            //boReportDocument.ReportClientDocument.DatabaseController.SetTableLocation(boTables[0], boTable);

            //boTable.Name = "Query/QueryOptions";
            //boTable.QualifiedName = "Query.Query.Query/QueryOptions";
            //boTable.Alias = "Query/QueryOptions";

            //boReportDocument.ReportClientDocument.DatabaseController.SetTableLocation(boTables[1], boTable);

            //boTable.Name = "Query/SystemInformation";
            //boTable.QualifiedName = "Query.Query.Query/SystemInformation";
            //boTable.Alias = "Query/SystemInformation";

            //boReportDocument.ReportClientDocument.DatabaseController.SetTableLocation(boTables[2], boTable);

            //boTable.Name = "Query/TranslatedText";
            //boTable.QualifiedName = "Query.Query.Query/TranslatedText";
            //boTable.Alias = "Query/TranslatedText";

            //boReportDocument.ReportClientDocument.DatabaseController.SetTableLocation(boTables[3], boTable);

            ////Verify the database after adding substituting the new table.
            ////To ensure that the table updates properly when adding Command tables or Stored Procedures.
            //boReportDocument.VerifyDatabase();
            //crystalReportViewer1.ReportSource = boReportDocument;
            //// Don't delete, good example of setting XML WEB service


            //////Create a new Database Table to replace the reports current table.
            ////CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();

            //////boMainPropertyBag: These hold the attributes of the tables ConnectionInfo object
            ////PropertyBag boMainPropertyBag = new PropertyBag();
            //////boInnerPropertyBag: These hold the attributes for the QE_LogonProperties
            //////In the main property bag (boMainPropertyBag)
            ////PropertyBag boInnerPropertyBag = new PropertyBag();

            //////Set the attributes for the boInnerPropertyBag
            ////boInnerPropertyBag.Add("Auto Translate", "-1");
            ////boInnerPropertyBag.Add("Connect Timeout", "15");
            ////boInnerPropertyBag.Add("Data Source", "192.168.13.156");
            ////boInnerPropertyBag.Add("DataTypeCompatibility", "0");
            ////boInnerPropertyBag.Add("General Timeout", "0");
            ////boInnerPropertyBag.Add("Initial Catalog", "astellastest");
            ////boInnerPropertyBag.Add("Integrated Security", "False");
            ////boInnerPropertyBag.Add("Locale Identifier", "1033");
            ////boInnerPropertyBag.Add("MARS Connection", "0");
            ////boInnerPropertyBag.Add("OLE DB Services", "-5");
            ////boInnerPropertyBag.Add("Provider", "SQLNCLI10");
            ////boInnerPropertyBag.Add("Tag with column collation when possible", "0");
            ////boInnerPropertyBag.Add("Trust Server Certificate", "0");
            ////boInnerPropertyBag.Add("Use DSN Default Properties", "False");
            ////boInnerPropertyBag.Add("Use Encryption for Data", "0");

            //////Set the attributes for the boMainPropertyBag
            ////boMainPropertyBag.Add("Database DLL", "crdb_ado.dll");
            ////boMainPropertyBag.Add("QE_DatabaseName", "astellastest");
            ////boMainPropertyBag.Add("QE_DatabaseType", "OLE DB (ADO)");
            //////Add the QE_LogonProperties we set in the boInnerPropertyBag Object
            ////boMainPropertyBag.Add("QE_LogonProperties", boInnerPropertyBag);
            ////boMainPropertyBag.Add("QE_ServerDescription", "192.168.13.156");
            ////boMainPropertyBag.Add("QE_SQLDB", "True");
            ////boMainPropertyBag.Add("SSO Enabled", "False");

            //////Create a new ConnectionInfo object
            ////CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo =
            ////new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            //////Pass the database properties to a connection info object
            ////boConnectionInfo.Attributes = boMainPropertyBag;
            //////Set the connection kind
            ////boConnectionInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            //////**EDIT** Set the User Name and Password if required.
            ////boConnectionInfo.UserName = "sb";
            ////boConnectionInfo.Password = "1Oem2000";
            //////Pass the connection information to the table
            ////boTable.ConnectionInfo = boConnectionInfo;

            //////Get the Database Tables Collection for your report
            ////CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            ////boTables = rptClientDoc.DatabaseController.Database.Tables;

            //////For each table in the report:
            ////// - Set the Table Name properties.
            ////// - Set the table location in the report to use the new modified table
            ////boTable.Name = "Checks";
            ////boTable.QualifiedName = "astellastest.dbo.Checks";
            ////boTable.Alias = "Checks";

            ////rptClientDoc.DatabaseController.SetTableLocation(boTables[0], boTable);

            //////Verify the database after adding substituting the new table.
            //////To ensure that the table updates properly when adding Command tables or Stored Procedures.
            ////rptClientDoc.VerifyDatabase();

            ////Sage

            //CrystalDecisions.CrystalReports.Engine.Database crDatabase;
            //CrystalDecisions.CrystalReports.Engine.Tables crTables;
            //TableLogOnInfo crTableLogOnInfo;

            //CrystalDecisions.Shared.ConnectionInfo crConnectioninfo = new CrystalDecisions.Shared.ConnectionInfo();
            ////CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo crConnectioninfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();

            ////pass the necessary parameters to the connectionInfo object
            //crConnectioninfo.ServerName = "192.168.13.156";
            //crConnectioninfo.UserID = "sb";
            //crConnectioninfo.Password = "1Oem2000";
            //crConnectioninfo.DatabaseName = "astellastest";

            ////set up the database and tables objects to refer to the current report
            //crDatabase = rpt.Database;
            //crTables = crDatabase.Tables;

            ////Create the logon propertybag for the connection we wish to use
            //PropertyBag logonDetails = new PropertyBag(); 
            //logonDetails.Add("Auto Translate", -1);
            ////logonDetails.Add("Connect Timeout", _Session.LoginTimeout);
            //logonDetails.Add("Data Source", "192.168.13.156");
            ////logonDetails.Add("General Timeout", _Session.QueryTimeout);
            //logonDetails.Add("Initial Catalog", "astellastest"); 
            //logonDetails.Add("Integrated Security", "false");
            ////logonDetails.Add("Locale Identifier", _Session.Site.LanguageID.ToString());
            //logonDetails.Add("OLE DB Services", -5);
            //logonDetails.Add("Provider", "SQLOLEDB");
            //logonDetails.Add("Use Encryption for Data", 0); 
            //logonDetails.Add("Owner", "dbo"); // schema

            ////Create the QE (query engine) propertybag with the provider details and logon property bag.
            //PropertyBag QE_Details = new PropertyBag();
            ////QE_Details.Add("Database DLL", CrystalDecisions.Shared.DbConnectionAttributes.DATABASE_DLL_CRDB_ADO);
            //QE_Details.Add("Database DLL", "crdb_ado.dll");
            //QE_Details.Add("QE_DatabaseName", "astellastest");
            //QE_Details.Add("QE_DatabaseType", "OLE DB (ADO)"); 
            //QE_Details.Add("QE_LogonProperties", logonDetails);
            //QE_Details.Add("QE_ServerDescription", "astellastest");
            //QE_Details.Add("QE_SQLDB", "True"); 
            //QE_Details.Add("SSO Enabled", "False");
            //QE_Details.Add("Owner", "dbo");

            ////CrystalDecisions.Shared.ConnectionInfo newConnInfo = new CrystalDecisions.Shared.ConnectionInfo();
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo newConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfos newConnInfos = new ConnectionInfos();
            //newConnInfo.Attributes = QE_Details;
            //newConnInfo.Kind = CrystalDecisions.ReportAppServer.DataDefModel.CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            ////if (!_Session.User.TrustedConnection)
            ////{
            ////    newConnInfo.UserName = _Session.User.UserID; newConnInfo.Password = _Session.User.Password;
            ////}
            ////else
            ////{
            ////    newConnInfo.UserName = string.Empty;
            ////    newConnInfo.Password = string.Empty;
            ////}
            ////return newConnInfo;

            //newConnInfos.Add(newConnInfo);
            //rptClientDoc.DatabaseController.SetConnectionInfos(newConnInfos);        

            //// Sage



            //rptClientDoc.DatabaseController.SetTableLocationByServerDatabaseName("astellastest", crConnectioninfo.ServerName.ToString(), crConnectioninfo.DatabaseName.ToString(), crConnectioninfo.UserID.ToString(), crConnectioninfo.Password);

            //rptClientDoc.VerifyDatabase();

            //IsRpt = false;


            //ISCDReportClientDocument m_boReportClientDocument = new CrystalDecisions.ReportAppServer.ClientDoc.ReportClientDocument();
            //CrystalDecisions.CrystalReports.Engine.ReportDocument reportdocument = new CrystalDecisions.CrystalReports.Engine.ReportDocument();

            //reportdocument = new CrystalDecisions.CrystalReports.Engine.ReportDocument();

            //reportdocument.Load(@"D:\Atest\1080403\reportoriginal.rpt"); // reportneDont reportoriginal
            //m_boReportClientDocument = reportdocument.ReportClientDocument;

            //////ISCDReportClientDocument m_boReportClientDocument;  // report client document

            //rptClientDoc = rpt.ReportClientDocument;
            //CrystalDecisions.ReportAppServer.DataDefModel.Fields m_boFields;
            //CrystalDecisions.ReportAppServer.DataDefModel.Field m_boField = null;
            //m_boFields = rptClientDoc.DataDefController.DataDefinition.FormulaFields;
            //int m_boFieldIndex;


            //m_boFieldIndex = rptClientDoc.DataDefController.DataDefinition.SummaryFields.Find("Sum ({frhsrg.pr_bedr}, {frhsrg.artcode})",
            //    //m_boFieldIndex = m_boReportClientDocument.DataDefController.DataDefinition.SummaryFields.Find("Sum ({@F_Quantity}, {frhsrg.artcode})",
            //    CrystalDecisions.ReportAppServer.DataDefModel.CrFieldDisplayNameTypeEnum.crFieldDisplayNameFormula,
            //                      CrystalDecisions.ReportAppServer.DataDefModel.CeLocale.ceLocaleUserDefault);


            //m_boField = (Field)rptClientDoc.DataDefController.DataDefinition.SummaryFields[m_boFieldIndex];

            //////CrystalDecisions.ReportAppServer.DataDefModel.SummaryField

            //rptClientDoc = rpt.ReportClientDocument;
            //SortController sortController = rptClientDoc.DataDefController.SortController;
            //Sort newSort = new Sort();
            ////TopNSort newSort = new TopNSort();
            ////newSort.SortField = "@Testformula"; //m_boField;

            ////newSort.Direction = CrSortDirectionEnum.crSortDirectionDescendingOrder;

            //sortController.Add(-1, newSort);

            //DatabaseFieldDefinition databaseFieldDefinition;
            //databaseFieldDefinition = rpt.Database.Tables[1].Fields[1];
            //SortField sortField = rpt.DataDefinition.SortFields[1];
            //if (sortField.SortType == SortFieldType.RecordSortField)
            //{
            //    sortField.Field = databaseFieldDefinition;
            //    sortField.SortDirection = SortDirection.AscendingOrder;
            //}


            //sortController.ModifySortDirection(1, CrSortDirectionEnum.crSortDirectionDescendingOrder);

            ////rptClientDoc.SaveAs("reportnet", "c:\\reports", 1);

            //MessageBox.Show("done.");

            //ISCDReportClientDocument m_boReportClientDocument = new CrystalDecisions.ReportAppServer.ClientDoc.ReportClientDocument();
            //CrystalDecisions.CrystalReports.Engine.ReportDocument reportdocument = new CrystalDecisions.CrystalReports.Engine.ReportDocument();

            ////reportdocument.Load(@"c:\\reports\reportnet.rpt");
            ////reportdocument.Close();

            //reportdocument.Load(@"D:\Atest\1053147\scale2Don2.rpt");

            ////ISCDReportClientDocument m_boReportClientDocument; // report clientdocument 
            //m_boReportClientDocument = reportdocument.ReportClientDocument;

            //m_boReportClientDocument.DatabaseController.logon("sb", "1Oem2000");
            //reportdocument.SetDatabaseLogon("sb", "1Oem2000");

            //MessageBox.Show(m_boReportClientDocument.ReportDefController.ReportObjectController.GetAllReportObjects().Count.ToString());

            //if (MessageBox.Show("Scale ? ", "Scale ? ", MessageBoxButtons.YesNo) == DialogResult.Yes)
            //{
            //    foreach (CrystalDecisions.CrystalReports.Engine.Area area in reportdocument.ReportDefinition.Areas)
            //    {
            //        foreach (CrystalDecisions.CrystalReports.Engine.Section section in area.Sections)
            //        {
            //            foreach (CrystalDecisions.CrystalReports.Engine.ReportObject obj in section.ReportObjects)
            //            {
            //                if (obj.Kind == CrystalDecisions.Shared.ReportObjectKind.FieldObject)
            //                {

            //                    CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject objField = m_boReportClientDocument.ReportDefController.ReportObjectController.GetAllReportObjects()[obj.Name] as CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject;
            //                    objField.FontColor.Font.Name = "Tahoma";
            //                    objField.FontColor.Font.Size = 14;
            //                    m_boReportClientDocument.ReportDefController.ReportObjectController.Modify(m_boReportClientDocument.ReportDefController.ReportObjectController.GetAllReportObjects()[obj.Name] as CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject, objField);
            //                }
            //            }
            //        }
            //    }

            //    //m_boReportClientDocument.SaveAs("reportnet", "c:\\reports", 1);
            //    //reportdocument.Load(@"c:\\reports\reportnet.rpt");
            //    //m_boReportClientDocument = reportdocument.ReportClientDocument;

            //    MessageBox.Show("Scale done.");

            //    DateTime dt = DateTime.Now;
            //    crystalReportViewer1.ReportSource = m_boReportClientDocument.ReportSource;
            //    //crystalReportViewer1.ReportSource = reportdocument;
            //    TimeSpan ts = DateTime.Now - dt;
            //    MessageBox.Show(ts.ToString());
            //}
            //else
            //{
            //    //m_boReportClientDocument.SaveAs("reportnet", "c:\\reports", 1);
            //    //reportdocument.Load(@"c:\\reports\reportnet.rpt");
            //    //m_boReportClientDocument = reportdocument.ReportClientDocument;

            //    MessageBox.Show("No Scale.");
            //    DateTime dt = DateTime.Now;
            //    //crystalReportViewer1.ReportSource = m_boReportClientDocument.ReportSource;
            //    crystalReportViewer1.ReportSource = reportdocument;
            //    TimeSpan ts = DateTime.Now - dt;
            //    MessageBox.Show(ts.ToString());

            //}

            //crystalReportViewer1.ReportSource = reportdocument;//



            //m_boReportClientDocument.SaveAs("reportnet", "c:\\reports", 1);

//            //create CrystalReport
//            //CrystalReport1 rpt = new CrystalReport1();

//            //assign a Printer to the report
//            //here it works, the printer is set to rpt.PrintOptions.PrinterName
//            rpt.PrintOptions.PrinterName = System.Drawing.Printing.PrinterSettings.InstalledPrinters[4];
//            rpt.PrintOptions.DissociatePageSizeAndPrinterPaperSize = true;

//            //shows "Printer Name: Microsoft XPS Document Writer"
//            MessageBox.Show("Printer Name: " + rpt.PrintOptions.PrinterName.ToString());

//            //setting some properties of objects on the report
//            //effect: the assigned printer is gone, rpt.PrintOptions.PrinterName is empty
//            //rpt.Section1.ReportObjects"txtTest".ObjectFormat.EnableSuppress = false;

//            MessageBox.Show(rpt.SummaryInfo.ReportAuthor.ToString());
//            MessageBox.Show(rpt.SummaryInfo.ReportComments.ToString());
//            MessageBox.Show(rpt.SummaryInfo.ReportTitle.ToString());

            
//            //rpt.SummaryInfo.ReportComments 
//            rptClientDoc.SummaryInfo.Comments = @"Don Williams, You are watching the thread Buffer too small for string - Crystal Report for Vs2010, which was updated on Feb 8, 2011 5:07:38 PM by Charles Gagnon.
//REMINDER: If you posted the question, please reward points for good answers*. Thanks.
//Subject: Re: Buffer too small for string - Crystal Report for Vs2010
//Message: Hello Don,
//     You were right about the limit it's there too in Crystal2008.
//     The difference is that if I open a report containing more that 512 characters in the Report Comment. I'm able to do a SaveAs without issue in Crystal 2008 but with CrystalVs2010 the buffer is too small error is raised. Crystal 2008 was not perfect it was truncating to keep the first 511 characters when using the SaveAs in Visual Studio.
//  I think this issue should be fixed. You should either put a 511 characters llimit in the report designer or fix the Crystal Report Visual Studio components to support more that 511 characters.
//Thank you.
//Charles.
//To view the thread, visit:
//http://forums.sdn.sap.com/thread.jspa?forumID=313&threadID=1883304
//* How to give points: Mark your thread as a question while creating it. In the answers you get, you can assign the points by clicking on the stars to the left. You also get a point yourself for rewarding (one per thread).
//------------------------------
//Mandatory Disclosure Statements: http://www.sap.com/company/legal/impressum.epx 
//This e-mail may contain trade secrets or privileged, undisclosed, or otherwise confidential information. If you have received this e-mail in error, you are hereby notified that any review, copying, or distribution of it is strictly prohibited. Please inform us immediately and destroy the original transmittal. Thank you for your cooperation.";

//            //shows "Printer Name:"
//            MessageBox.Show("Printer Name: " + rpt.PrintOptions.PrinterName.ToString());

//            //assign a Printer to the report doesn´t work anymore, this line of code has no effect, 
//            //rpt.PrintOptions.PrinterName remains empty
//            rpt.PrintOptions.PrinterName = System.Drawing.Printing.PrinterSettings.InstalledPrinters[4];

//            //shows "Printer Name:"
//            MessageBox.Show("Printer Name: " + rpt.PrintOptions.PrinterName.ToString()); 

        //System.IO.FileStream fsReadXml = null;
        //    try
        //    {

        //        //m_ReportDocument = new ReportDocument();
        //        //m_CrystalReportViewer = new CrystalDecisions.Windows.Forms.CrystalReportViewer();

        //        // Fill in member strings
        //        //m_sReportFileName = sReportFileName;
        //        string m_sXMLDataFile;
        //        m_sXMLDataFile = @"D:\Atest\754828\abn source.xml";
        //        //m_sXMLDataFile = sXMLDataFile;


        //        //m_ReportDocument.FileName = m_sReportFileName.ToString();

        //        System.Data.DataSet ds = new System.Data.DataSet();
        //        // Create new FileStream with which to read the schema.
        //        fsReadXml = new System.IO.FileStream(m_sXMLDataFile, System.IO.FileMode.Open);
        //        ds.ReadXml(fsReadXml);
        //        fsReadXml.Close();

        //        // huh? m_crReport.DiscardSavedData
        //        CrystalDecisions.ReportAppServer.DataDefModel.Tables tables = rptClientDoc.Database.Tables;

        //        foreach (CrystalDecisions.ReportAppServer.DataDefModel.Table table in tables)
        //        {
        //            rptClientDoc.DatabaseController.SetDataSource(ds);
        //            break;
        //        }

        //        //m_CrystalReportViewer.ReportSource = m_ReportDocument;

        //        //m_bInitialized = true;
        //        ds.Dispose();
        //        //return (true);
        //    }
        //    catch (Exception ex)
        //    {
        //        btnSQLStatement.Text = "ERROR: " + ex.Message;
        //        return;
        //    }

            //if (rptClientDoc.DataDefController.DataDefinition.ParameterFields.Count > 0) //there are parameters
            //{
            //    foreach (CrystalDecisions.ReportAppServer.DataDefModel.ParameterField paramfield in rptClientDoc.DataDefController.DataDefinition.ParameterFields)
            //    {
            //        switch (paramfield.ValueRangeKind)
            //        {
            //            case CrParameterValueRangeKindEnum.crParameterValueRangeKindDiscrete:
            //                {
            //                    getDiscreteValues(paramfield);
            //                    break;
            //                }
            //            case CrParameterValueRangeKindEnum.crParameterValueRangeKindDiscreteAndRange:
            //                {
            //                    getRangeAndDiscreteValues(paramfield);
            //                    break;
            //                }
            //            case CrParameterValueRangeKindEnum.crParameterValueRangeKindRange:
            //                {
            //                    getRangeValues(paramfield);
            //                    break;
            //                }
            //        }
            //    }
            //}

        }

        private void getReportOptionsOnOpen(CrystalDecisions.ReportAppServer.ClientDoc.ISCDReportClientDocument rptClientDoc)
        {
            CrystalDecisions.ReportAppServer.ReportDefModel.ReportOptions iro = rptClientDoc.ReportOptions;
            CrystalDecisions.ReportAppServer.ReportDefModel.ReportOptions myRPTOpts = iro.Clone();

            if (rpt.HasSavedData == true)
            {
                btnHasSavedData.Checked = true;
                RowsetController boRowsetController;
                RowsetCursor boRowsetCursor;
                GroupPath gp = new GroupPath();
                int rows;
                boRowsetController = rptClientDoc.RowsetController;
                boRowsetCursor = boRowsetController.CreateCursor(gp, new RowsetMetaData(), 0);
                rows = boRowsetCursor.RecordCount;
                txtRecordCount.Text = rows.ToString();

            }
            else
                btnHasSavedData.Checked = false;

            checkBox1.Checked = myRPTOpts.CanSelectDistinctRecords;
            checkBox2.Checked = myRPTOpts.CanSetTableLocation;
            // SP 4 addition
            checkBox3.Checked = myRPTOpts.ConvertNullFieldToDefault;
            checkBox17.Checked = myRPTOpts.ConvertOtherNullsToDefault;

            checkBox4.Checked = myRPTOpts.DisplayGroupContentView;
            checkBox5.Checked = myRPTOpts.EnableAsyncQuery;
            checkBox6.Checked = myRPTOpts.EnablePushDownGroupBy;
            checkBox7.Checked = myRPTOpts.EnableSaveDataWithReport;
            checkBox8.Checked = myRPTOpts.EnableSaveSummariesWithReport;
            checkBox9.Checked = myRPTOpts.EnableSelectDistinctRecords;
            checkBox10.Checked = myRPTOpts.EnableTranslateDOSMemos;
            checkBox11.Checked = myRPTOpts.EnableTranslateDOSStrings;
            checkBox12.Checked = myRPTOpts.EnableUseCaseInsensitiveSQLData;
            checkBox13.Checked = myRPTOpts.EnableUseDummyData;
            checkBox14.Checked = myRPTOpts.EnableUseIndexForSpeed;
            checkBox15.Checked = myRPTOpts.EnableVerifyOnEveryPrint;
            checkBox16.Checked = myRPTOpts.ErrorOnMaxNumOfRecords;
            cbPreferredView.Text = myRPTOpts.PreferredView.ToString();
            cbConvertDateTimeType.Text = myRPTOpts.ConvertDateTimeType.ToString();
            crMaxNumOfRecords.Text = myRPTOpts.MaxNumOfRecords.ToString();
            crNumOfBrowsingRecords.Text = myRPTOpts.NumOfBrowsingRecords.ToString();
            crNumOfCachedBatches.Text = myRPTOpts.NumOfCachedBatches.ToString();
            btnReportStyle.Text = myRPTOpts.ReportStyle.ToString();
            crRowsetBatchSize.Text = myRPTOpts.RowsetBatchSize.ToString();
            IsRpt = false;
        }

        private void btnSetChanges_Click(object sender, EventArgs e)
        {
            CrystalDecisions.ReportAppServer.ReportDefModel.ReportOptions iro = rptClientDoc.ReportOptions;
            CrystalDecisions.ReportAppServer.ReportDefModel.ReportOptions myRPTOpts = iro.Clone();

            // SP 4 addition
            myRPTOpts.ConvertNullFieldToDefault = checkBox3.Checked;
            myRPTOpts.ConvertOtherNullsToDefault = checkBox17.Checked;

            myRPTOpts.CanSelectDistinctRecords = checkBox1.Checked;
            myRPTOpts.CanSetTableLocation = checkBox2.Checked;
            myRPTOpts.DisplayGroupContentView = checkBox4.Checked;
            myRPTOpts.EnableAsyncQuery = checkBox5.Checked;
            myRPTOpts.EnablePushDownGroupBy = checkBox6.Checked;
            myRPTOpts.EnableSaveDataWithReport = checkBox7.Checked;
            myRPTOpts.EnableSaveSummariesWithReport = checkBox8.Checked;
            myRPTOpts.EnableSelectDistinctRecords = checkBox9.Checked;
            myRPTOpts.EnableTranslateDOSMemos = checkBox10.Checked;
            myRPTOpts.EnableTranslateDOSStrings = checkBox11.Checked;
            myRPTOpts.EnableUseCaseInsensitiveSQLData = checkBox12.Checked;
            myRPTOpts.EnableUseDummyData = checkBox13.Checked;
            myRPTOpts.EnableUseIndexForSpeed = checkBox14.Checked;
            myRPTOpts.EnableVerifyOnEveryPrint = checkBox15.Checked;
            myRPTOpts.ErrorOnMaxNumOfRecords = checkBox16.Checked;

            // both routines below do not get saved - must be readonly properties in the report or other methods to update them
            if (cbConvertDateTimeType.SelectedItem.ToString() == "crConvertDateTimeTypeKeepDateTimeType")
            {
                myRPTOpts.ConvertDateTimeType = CrConvertDateTimeTypeEnum.crConvertDateTimeTypeKeepDateTimeType;
            }
            if (cbConvertDateTimeType.SelectedItem.ToString() == "crConvertDateTimeTypeKeepDateTimeType")
            {
                myRPTOpts.ConvertDateTimeType = CrConvertDateTimeTypeEnum.crConvertDateTimeTypeToDate;
            }
            if (cbConvertDateTimeType.SelectedItem.ToString() == "crConvertDateTimeTypeKeepDateTimeType")
            {
                myRPTOpts.ConvertDateTimeType = CrConvertDateTimeTypeEnum.crConvertDateTimeTypeToString;
            }

            if (cbPreferredView.SelectedItem.ToString() == "crReportDocumentCubeView")
            {
                myRPTOpts.PreferredView = CrReportDocumentViewEnum.crReportDocumentCubeView;
            }
            if (cbPreferredView.SelectedItem.ToString() == "crReportDocumentExcelView")
            {
                myRPTOpts.PreferredView = CrReportDocumentViewEnum.crReportDocumentExcelView;
            }
            if (cbPreferredView.SelectedItem.ToString() == "crReportDocumentQueryView")
            {
                myRPTOpts.PreferredView = CrReportDocumentViewEnum.crReportDocumentQueryView;
            }
            if (cbPreferredView.SelectedItem.ToString() == "crReportDocumentReportView")
            {
                myRPTOpts.PreferredView = CrReportDocumentViewEnum.crReportDocumentReportView;
            }
            
            //crMaxNumOfRecords.Text = myRPTOpts.MaxNumOfRecords.ToString();
            //crNumOfBrowsingRecords.Text = myRPTOpts.NumOfBrowsingRecords.ToString();
            //crNumOfCachedBatches.Text = myRPTOpts.NumOfCachedBatches.ToString();

            myRPTOpts.MaxNumOfRecords = Convert.ToInt16(crMaxNumOfRecords.Text);
            myRPTOpts.NumOfBrowsingRecords = Convert.ToUInt16(crNumOfBrowsingRecords.Text);
            myRPTOpts.NumOfCachedBatches = Convert.ToInt16(crNumOfCachedBatches.Text);

            rptClientDoc.ModifyReportOptions(myRPTOpts);

            //CrystalDecisions.ReportAppServer.ReportDefModel.ReportOptions myRPTOpts;
            //myRPTOpts = rptClientDoc.ReportOptions;

            //myRPTOpts.EnableVerifyOnEveryPrint = false;
            //rptClientDoc.ModifyReportOptions(myRPTOpts);
       }

        private void ReportObjectComboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            string textBox1 = String.Empty;
            string textBox2 = String.Empty;
            string MyObjectType = ReportObjectComboBox1.SelectedItem.ToString();
            btnCount.Text = "";
            CrystalDecisions.ReportAppServer.ReportDefModel.ReportObject rptObj;

            switch (MyObjectType)
            {
                case "Formula Fields":
                    #region FormulaFields
                    btnReportObjects.Text = "";
                    int flcnt = 0;

                    #region do not delete
                    ////do not delete - this works ... sort of
                    ////rptClientDoc.DataDefController.FormulaFieldController.Remove(resultField);
                    //CrystalDecisions.ReportAppServer.ObjectFactory.ObjectFactory objFactory = new CrystalDecisions.ReportAppServer.ObjectFactory.ObjectFactory();
                    //CrystalDecisions.ReportAppServer.DataDefModel.FormulaField Formula = (CrystalDecisions.ReportAppServer.DataDefModel.FormulaField)objFactory.CreateObject("CrystalReports.FormulaField");
                    //Formula.Type = CrystalDecisions.ReportAppServer.DataDefModel.CrFieldValueTypeEnum.crFieldValueTypeStringField;
                    //Formula.Syntax = CrystalDecisions.ReportAppServer.DataDefModel.CrFormulaSyntaxEnum.crFormulaSyntaxCrystal;
                    //Formula.Text = @"whilereadingrecords; ""A"""; // "hello Ludek = 1"; // resultField.Text; // "n=3"; {Customer.Customer Credit ID} + 1 @"whilereadingrecords; ""A"""
                    //Formula.Name = "TestDon"; // "TestDon"; //  resultField.Name; //"testformula";
                    //String FormulaMessage = rptClientDoc.DataDefController.FormulaFieldController.Check(Formula);
                    //if (FormulaMessage == null)
                    //    rptClientDoc.DataDefController.FormulaFieldController.Add(Formula);
                    //else
                    //    btnReportObjects.Text += "There are errors in the formula: " + FormulaMessage.ToString() + "\n";
                    ////do not delete - this works
                    #endregion do not delete

                    //rptClientDoc.SaveAs("don2.rpt", @"D:\Atest\swati\CrystalTest_3501213_2013", 0);

                    btnCount.Text = rptClientDoc.DataDefController.DataDefinition.FormulaFields.Count.ToString();

                    foreach (FormulaField resultField in rptClientDoc.DataDefController.DataDefinition.FormulaFields)
                    {
                        textBox1 = resultField.LongName.ToString();
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText(" : Used: " + resultField.UseCount.ToString() + " times'End' \n");
                        ++flcnt;
                        btnCount.Text = flcnt.ToString();

                        String FormulaMessage = rptClientDoc.DataDefController.FormulaFieldController.Check(resultField);
                        if (FormulaMessage != null)
                        {
                            btnReportObjects.Text += FormulaMessage.ToString() + "\n";
                        }

                        #region text
                        //if (resultField.Name == "TestDon")
                        //{
                        //    CrystalDecisions.ReportAppServer.ReportDefModel.Section boSection;

                        //    //First determine which section to add the formula field to - in this case the details section
                        //    boSection = rptClientDoc.ReportDefController.ReportDefinition.DetailArea.Sections[0];
                        //    CrystalDecisions.ReportAppServer.DataDefModel.Fields boFields;
                        //    int boFieldIndex;
                        //    CrystalDecisions.ReportAppServer.DataDefModel.Field boField;
                        //    CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject boFieldObject;

                        //    //Get back all the formulafields in the report
                        //    boFields = rptClientDoc.DataDefController.DataDefinition.FormulaFields;

                        //    boFieldIndex = boFields.Find("TestDon", CrystalDecisions.ReportAppServer.DataDefModel.CrFieldDisplayNameTypeEnum.crFieldDisplayNameName,
                        //        CrystalDecisions.ReportAppServer.DataDefModel.CeLocale.ceLocaleUserDefault);
                        //    boField = (CrystalDecisions.ReportAppServer.DataDefModel.Field)boFields[boFieldIndex];

                        //    //Set the type of field this is
                        //    boField.Type = CrystalDecisions.ReportAppServer.DataDefModel.CrFieldValueTypeEnum.crFieldValueTypeStringField;

                        //    //Now create a new Field object which will be added to the report
                        //    boFieldObject = new CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject();

                        //    //Set the datasource of this field object to the formula form of the above Formula Field Object
                        //    boFieldObject.DataSourceName = Formula.FormulaForm;
                        //    boFieldObject.FieldValueType = Formula.Type;

                        //    //Now set the co-ordinates of where the field will go
                        //    boFieldObject.Left = 1 * 1440; //1440 twips per inch
                        //    boFieldObject.Width = 1 * 1440;

                        //    //And finally Add it to the report
                        //    rptClientDoc.ReportDefController.ReportObjectController.Add(boFieldObject, boSection, -1);

                        //    //ISCRSort testSort = (ISCRSort)boFieldObject;
                        //    //testSort.SortField = rptClientDoc.DataDefController.Database.Tables[0].DataFields[1];
                        //    //rptClientDoc.DataDefController.SortController.Add(0, testSort);

                        //    ISCRSortController MysortController = rptClientDoc.DataDefController.SortController;

                        //    ISCRSort test;
                        //    //rptClientDoc.VerifyDatabase();

                        //    Field f = (Field)rptClientDoc.DataDefController.DataDefinition.ResultFields.FindField("TestDon", CrystalDecisions.ReportAppServer.DataDefModel.CrFieldDisplayNameTypeEnum.crFieldDisplayNameName, CrystalDecisions.ReportAppServer.DataDefModel.CeLocale.ceLocaleEnglish);
                        //    if (rptClientDoc.DataDefController.SortController.CanSortOn(f))
                        //    {
                        //        Sort mySort = new Sort();
                        //        mySort.Direction = CrSortDirectionEnum.crSortDirectionAscendingOrder;
                        //        mySort.SortField = f;
                        //        MessageBox.Show(rptClientDoc.DataDefController.SortController.CanSortOn(f).ToString());
                        //        rptClientDoc.DataDefController.SortController.Add(-1, mySort);

                        //        //test = (ISCRSort)boFieldObject;
                        //        //test.Direction = CrSortDirectionEnum.crSortDirectionDescendingOrder;

                        //        //try
                        //        //{
                        //        //    if (Formula.Name == "TestDon")
                        //        //    {
                        //        //        MysortController.add(CrSortDirectionEnum.crSortDirectionNoSortOrder, test);
                        //        //        // if no sort then delete the sort and SAVE the report
                        //        //        //rptClientDoc.SaveAs("don2.rpt", @"D:\Atest\swati\CrystalTest_3501213_2013", 0);
                        //        //    }
                        //        //}
                        //        //catch (Exception ex)
                        //        //{
                        //        //    btnSQLStatement.Text = "ERROR: " + ex.Message;
                        //        //}
                        //    }
                        //    else
                        //    { }
                        //}
                        //// this always returns an empty string. will be tracked
                        //CrystalDecisions.ReportAppServer.ReportDefModel.ConditionFormula displayStringCondition;
                        //displayStringCondition = rptObj.Format.ConditionFormulas[CrObjectFormatConditionFormulaTypeEnum.crObjectFormatConditionFormulaTypeDisplayString];
                        #endregion text
                    }
                    #endregion FormulaFields
                    break;
                case "Fields used in the report":
                    #region Fields Used
                    btnReportObjects.Text = "";
                    flcnt = 0;

                    foreach (CrystalDecisions.ReportAppServer.DataDefModel.Table tbl in rptClientDoc.DataDefController.Database.Tables)
                    {
                        foreach (CrystalDecisions.ReportAppServer.DataDefModel.DBField dbfld in tbl.DataFields)
                        {
                            if (dbfld.UseCount > 0)
                            {
                                textBox1 = dbfld.FormulaForm.ToString();
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.AppendText(" : Used: " + dbfld.UseCount.ToString() + " times'End' \n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                            }
                        }
                    }
                    #endregion Fields Used
                    break;
                case "Object Name -> Field Name":
                    #region OBJtoFName
                    btnReportObjects.Text = "";
                    textBox1 = "";
                    flcnt = 0;

                    CrystalDecisions.ReportAppServer.ReportDefModel.ReportObjects rptObjs;
                    //rptObjs = rptClientDoc.ReportDefController.ReportObjectController.GetReportObjectsByKind(CrReportObjectKindEnum.crReportObjectKindField);
                    rptObjs = rptClientDoc.ReportDefController.ReportObjectController.GetAllReportObjects();

                    foreach (CrystalDecisions.ReportAppServer.ReportDefModel.ReportObject rptObj1 in rptObjs)
                    {
                        switch (rptObj1.Kind)
                        {
                            case CrReportObjectKindEnum.crReportObjectKindField:
                                CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject fldObj1;
                                fldObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject)rptObj1;
                                
                                textBox1 = fldObj1.Name.ToString();
                                textBox1 += " -> ";
                                textBox1 += fldObj1.DataSourceName.ToString() + "\n";
                                btnReportObjects.AppendText("ToolTip: " + rptObj1.Format.ToolTipText.ToString() + "\n\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();

                                //// This works do not change
                                //if (fldObj1.Name == "LINETOTALTAXAMOUNT1")
                                //{
                                //    CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject OldfieldObject = (CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject)rptObj1;
                                //    CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject NewfieldObject = new CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject();

                                //    //OldfieldObject.CopyTo(NewfieldObject, true);

                                //    NewfieldObject = (CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject)OldfieldObject.Clone(true);

                                //    CrystalDecisions.ReportAppServer.ReportDefModel.NumericFieldFormat numericFieldFormat = NewfieldObject.FieldFormat.NumericFormat;
                                //    //CrystalDecisions.ReportAppServer.ReportDefModel.CrCurrencySymbolTypeEnum = CrCurrencySymbolTypeEnum.crCurrencySymbolTypeFixedSymbol;

                                //    numericFieldFormat.NDecimalPlaces = 8;
                                //    numericFieldFormat.EnableUseLeadZero = false;
                                //    //numericFieldFormat.ThousandSymbol = "&";
                                //    //numericFieldFormat.ThousandsSeparator = true;
                                //    numericFieldFormat.NegativeFormat = CrystalDecisions.ReportAppServer.ReportDefModel.CrNegativeTypeEnum.crNegativeTypeLeadingMinus;
                                //    numericFieldFormat.RoundingFormat = CrystalDecisions.ReportAppServer.ReportDefModel.CrRoundingTypeEnum.crRoundingTypeRoundToTenBillionth;

                                //    rptClientDoc.ReportDefController.ReportObjectController.Modify(OldfieldObject, NewfieldObject);
                                //    // Another bug in the controller need to call this 2 times to take the Rounding property - same as ADAPT01727457
                                //    rptClientDoc.ReportDefController.ReportObjectController.Modify(OldfieldObject, NewfieldObject);

                                //    IsRpt = false;
                                //}
                                //// This works do not change

                                break;
                            case CrReportObjectKindEnum.crReportObjectKindText:
                                CrystalDecisions.ReportAppServer.ReportDefModel.TextObject txtObj;
                                txtObj = (CrystalDecisions.ReportAppServer.ReportDefModel.TextObject)rptObj1;
                                textBox1 = txtObj.Name.ToString();
                                textBox1 += " -> " + txtObj.Text.ToString();
                                textBox1 += "\nEnableSuppressEmbedBlankLines: " + ((dynamic) rptObj1).TextObjectFormat.EnableSuppressEmbedBlankLines + "\n";
                                textBox1 += "SectionCode: " + ((dynamic) rptObj1).SectionCode;
                                btnReportObjects.Text += textBox1 + "\n";
                                btnReportObjects.AppendText("ToolTip: " + rptObj1.Format.ToolTipText.ToString() + "\n\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                                break;

                            case CrReportObjectKindEnum.crReportObjectKindBox:
                                CrystalDecisions.ReportAppServer.ReportDefModel.BoxObject boxObj1;
                                CrystalDecisions.ReportAppServer.ReportDefModel.BoxObject boxObj2 = new CrystalDecisions.ReportAppServer.ReportDefModel.BoxObject();
                                boxObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.BoxObject)rptObj1;
                                boxObj2 = boxObj1;

                                //// modify the box size
                                //boxObj.Bottom = 360;
                                //boxObj1.Height = 2385;
                                //boxObj1.Format.EnableCanGrow = true;
                                //boxObj1.EndSectionName = "ReportFooterSection1";
                                //boxObj1.EnableExtendToBottomOfSection = true;
                                //rptClientDoc.ReportDefController.ReportObjectController.Modify(boxObj, boxObj1);

                                textBox1 = boxObj1.Name.ToString();
                                textBox1 += " -> ";
                                textBox1 += boxObj1.Name.ToString();
                                textBox1 += " : X - ";
                                textBox1 += (boxObj1.Left / 1440.00).ToString();
                                textBox1 += " : Y - ";
                                textBox1 += ((boxObj1.Right - boxObj1.Left) / 1440.00).ToString();
                                textBox1 += " : Width - ";
                                textBox1 += (boxObj1.Width / 1440.00).ToString();
                                textBox1 += " : Height - ";
                                textBox1 += (boxObj1.Height / 1440.00).ToString();
                                btnReportObjects.Text += textBox1 + "\n";
                                btnReportObjects.Text += "Section Name: " + rptObj1.SectionName.ToString() + "\n";
                                btnReportObjects.AppendText("ToolTip: " + rptObj1.Format.ToolTipText.ToString() + "\n\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                                IsRpt = false;

                                break;

                            case CrReportObjectKindEnum.crReportObjectKindPicture:
                                textBox1 = rptObj1.Name.ToString();
                                textBox1 += " -> ";
                                textBox1 += rptObj1.Name.ToString();
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.AppendText("\n");
                                btnReportObjects.Text += "Height: " + rptObj1.Height.ToString();
                                btnReportObjects.AppendText(" Twips\n");
                                btnReportObjects.Text += "Width: " + rptObj1.Width.ToString();
                                btnReportObjects.AppendText(" Twips\n");
                                btnReportObjects.Text += "Top: " + rptObj1.Top.ToString();
                                btnReportObjects.AppendText(" Twips\n");
                                btnReportObjects.Text += "Left: " + rptObj1.Left.ToString();
                                btnReportObjects.AppendText(" Twips\n");
                                btnReportObjects.Text += "Section Name: " + rptObj1.SectionName.ToString() + "\n";
                                btnReportObjects.AppendText("ToolTip: " + rptObj1.Format.ToolTipText.ToString() + "\n\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                                break;

                            case CrReportObjectKindEnum.crReportObjectKindChart:
                                textBox1 = rptObj1.Name.ToString();
                                textBox1 += " -> ";
                                textBox1 += rptObj1.Name.ToString();
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.AppendText("\n");
                                btnReportObjects.Text += "Height: " + rptObj1.Height.ToString();
                                btnReportObjects.AppendText(" Twips\n");
                                btnReportObjects.Text += "Width: " + rptObj1.Width.ToString();
                                btnReportObjects.AppendText(" Twips\n");
                                btnReportObjects.Text += "Top: " + rptObj1.Top.ToString();
                                btnReportObjects.AppendText(" Twips\n");
                                btnReportObjects.Text += "Left: " + rptObj1.Left.ToString();
                                btnReportObjects.AppendText(" Twips\n");
                                btnReportObjects.Text += "Section Name: " + rptObj1.SectionName.ToString() + "\n";
                                btnReportObjects.AppendText("ToolTip: " + rptObj1.Format.ToolTipText.ToString() + "\n\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                                break;

                            case CrReportObjectKindEnum.crReportObjectKindSubreport:
                                CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject subObj1;
                                subObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject)rptObj1;

                                textBox1 = subObj1.Name.ToString();
                                textBox1 += " -> ";
                                textBox1 += subObj1.SubreportName.ToString() + " - ";
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.Text += "Section Name: " + rptObj1.SectionCode.ToString() + " " + rptObj1.SectionName.ToString() + "\n";
                                btnReportObjects.AppendText("ToolTip: " + rptObj1.Format.ToolTipText.ToString() + "\n\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                                break;

                            case CrReportObjectKindEnum.crReportObjectKindOlapGrid:
                                CrystalDecisions.ReportAppServer.ReportDefModel.OlapGridObject OLAPObj1;
                                OLAPObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.OlapGridObject)rptObj1;

                                textBox1 = OLAPObj1.Name.ToString();
                                textBox1 += " -> ";
                                textBox1 += OLAPObj1.Name.ToString() + " - ";
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.Text += "Section Name: " + rptObj1.SectionCode.ToString() + " " + rptObj1.SectionName.ToString() + "\n";
                                btnReportObjects.AppendText("ToolTip: " + rptObj1.Format.ToolTipText.ToString() + "\n\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                                break;

                            case CrReportObjectKindEnum.crReportObjectKindMap:
                                CrystalDecisions.ReportAppServer.ReportDefModel.MapObject MapObj1;
                                MapObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.MapObject)rptObj1;

                                textBox1 = MapObj1.Name.ToString();
                                textBox1 += " -> ";
                                textBox1 += MapObj1.Name.ToString() + " - ";
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.Text += "Section Name: " + rptObj1.SectionCode.ToString() + " " + rptObj1.SectionName.ToString() + "\n";
                                btnReportObjects.AppendText("ToolTip: " + rptObj1.Format.ToolTipText.ToString() + "\n\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                                break;

                            case CrReportObjectKindEnum.crReportObjectKindLine:
                                CrystalDecisions.ReportAppServer.ReportDefModel.LineObject LineObj1;
                                LineObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.LineObject)rptObj1;

                                textBox1 = LineObj1.Name.ToString();
                                textBox1 += " -> ";
                                textBox1 += LineObj1.Name.ToString() + " - ";
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.Text += "Section Name: " + rptObj1.SectionCode.ToString() + " " + rptObj1.SectionName.ToString() + "\n";
                                btnReportObjects.AppendText("ToolTip: " + rptObj1.Format.ToolTipText.ToString() + "\n\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                                break;

                            case CrReportObjectKindEnum.crReportObjectKindFlash:
                                CrystalDecisions.ReportAppServer.ReportDefModel.FlashObject FlashObj1;
                                FlashObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.FlashObject)rptObj1;

                                textBox1 = FlashObj1.Name.ToString();
                                textBox1 += " -> ";
                                textBox1 += FlashObj1.Name.ToString() + " - ";
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.Text += "Section Name: " + rptObj1.SectionCode.ToString() + " " + rptObj1.SectionName.ToString() + "\n";
                                btnReportObjects.AppendText("ToolTip: " + rptObj1.Format.ToolTipText.ToString() + "\n\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                                break;

                            case CrReportObjectKindEnum.crReportObjectKindFieldHeading:
                                CrystalDecisions.ReportAppServer.ReportDefModel.FieldHeadingObject FieldHeadingObj1;
                                FieldHeadingObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.FieldHeadingObject)rptObj1;

                                textBox1 = FieldHeadingObj1.Name.ToString();
                                textBox1 += " -> ";
                                textBox1 += FieldHeadingObj1.Name.ToString() + " - ";
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.Text += "Section Name: " + rptObj1.SectionCode.ToString() + " " + rptObj1.SectionName.ToString() + "\n";
                                btnReportObjects.AppendText("ToolTip: " + rptObj1.Format.ToolTipText.ToString() + "\n\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                                break;

                            case CrReportObjectKindEnum.crReportObjectKindCrosstab:
                                CrystalDecisions.ReportAppServer.ReportDefModel.CrossTabObject CrossObj1;
                                CrossObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.CrossTabObject)rptObj1;

                                textBox1 = CrossObj1.Name.ToString();
                                textBox1 += " -> ";
                                textBox1 += CrossObj1.Name.ToString() + " - ";
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.Text += "Section Name: " + rptObj1.SectionCode.ToString() + " " + rptObj1.SectionName.ToString() + "\n";
                                btnReportObjects.AppendText("ToolTip: " + rptObj1.Format.ToolTipText.ToString() + "\n\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                                break;

                            case CrReportObjectKindEnum.crReportObjectKindBlobField:
                                CrystalDecisions.ReportAppServer.ReportDefModel.BlobFieldObject BlobObj1;
                                BlobObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.BlobFieldObject)rptObj1;

                                textBox1 = BlobObj1.Name.ToString();
                                textBox1 += " -> ";
                                textBox1 += BlobObj1.Name.ToString() + " - ";
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.Text += "Section Name: " + rptObj1.SectionCode.ToString() + " " + rptObj1.SectionName.ToString() + "\n";
                                btnReportObjects.AppendText("ToolTip: " + rptObj1.Format.ToolTipText.ToString() + "\n\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                                break;

                            //case CrReportObjectKindEnum.crReportObjectKindInvalid:
                            //    CrystalDecisions.ReportAppServer.ReportDefModel. InvalidObj1;
                            //    BlobObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.BlobFieldObject)rptObj1;

                            //    textBox1 = BlobObj1.Name.ToString();
                            //    textBox1 += " -> ";
                            //    textBox1 += BlobObj1.Name.ToString() + " - ";
                            //    btnReportObjects.Text += textBox1;
                            //    btnReportObjects.Text += "Section Name: " + rptObj1.SectionCode.ToString() + " " + rptObj1.SectionName.ToString() + "\n";
                            //    btnReportObjects.AppendText("\n");
                            //    ++flcnt;
                            //    btnCount.Text = flcnt.ToString();
                            //    break;
                            //    //CrystalDecisions.ReportAppServer.ReportDefModel.CrReportObjectKindEnum.crReportObjectKindInvalid;


                        }
                    }
                    #endregion OBJtoFName
                    break;
                case "Groups":
                    #region Groups
                    btnReportObjects.Text = "";
                    flcnt = 0;

                    foreach (CrystalDecisions.ReportAppServer.DataDefModel.Group resultField in rptClientDoc.DataDefController.DataDefinition.Groups)
                    {
                        textBox1 = resultField.ConditionField.FormulaForm.ToString();
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText(" 'End' \n");
                        ++flcnt;
                        btnCount.Text = flcnt.ToString();

                        //// Do NOT delete - how to change date filtering for groups based on a date field
                        //CrystalDecisions.ReportAppServer.DataDefModel.Group oldGroup;
                        //CrystalDecisions.ReportAppServer.DataDefModel.Group newgroup;
                        //CrystalDecisions.ReportAppServer.DataDefModel.DateGroupOptions dgOpts = new CrystalDecisions.ReportAppServer.DataDefModel.DateGroupOptions();

                        //if (resultField.ConditionField.FormulaForm == "{Orders.Order Date}")
                        //{
                        //    dgOpts.DateCondition = CrystalDecisions.ReportAppServer.DataDefModel.CrDateConditionEnum.crDateConditionMonthly;

                        //    oldGroup = rptClientDoc.DataDefController.DataDefinition.Groups[flcnt-1];
                        //    newgroup = oldGroup.Clone(true);

                        //    newgroup.Options = dgOpts;
                        //    rptClientDoc.DataDefController.GroupController.Modify(oldGroup, newgroup); 

                        //    IsRpt = false;
                        //}
                    }
                    #endregion Groups
                        break;
                case "Parameter Fields":
                        getParameterFields(rpt);
                        break;
                case "Sorts":
                    #region Sorts
                        btnReportObjects.Text = "";
                        flcnt = 0;
                        int GRsortIndex = 1;
                        int FLDsortIndex = 0;

                        //IsRpt = false;
                        //SortDirection sd = rpt.DataDefinition.SortFields[1].SortDirection;
                        //rpt.DataDefinition.SortFields[1].SortDirection = SortDirection.NoSortOrder;

                        //SortController sortController = rptClientDoc.DataDefController.SortController;
                        ////sortController.Remove(GRsortIndex); // Sort of works for Groups - set the sort type to original order
                        //try
                        //{
                        //    sortController.ModifySortDirection(GRsortIndex, CrSortDirectionEnum.crSortDirectionNoSortOrder);
                        //}
                        //catch
                        //{
                        //}

                        foreach (CrystalDecisions.ReportAppServer.DataDefModel.Sort RASSortField in rptClientDoc.DataDefController.DataDefinition.Sorts)
                        {
                            foreach (SortField crSortField in rpt.DataDefinition.SortFields)
                            {
                                if (RASSortField.SortField.FormulaForm == crSortField.Field.FormulaName)
                                {
                                    if (GRsortIndex >= 0)
                                    {
                                        if (crSortField.SortType.ToString() == CrystalDecisions.Shared.SortFieldType.GroupSortField.ToString())
                                        {
                                            textBox1 = "Group Sort:\n ";

                                            //SortController sortController = rptClientDoc.DataDefController.SortController;
                                            //sortController.Remove(GRsortIndex); // Sort of works for Groups - set the sort type to original order
                                            //sortController.ModifySortDirection(GRsortIndex, CrSortDirectionEnum.crSortDirectionAscendingOrder);

                                            IsRpt = false;
                                            GRsortIndex++;
                                        }
                                        else
                                        {
                                            textBox1 = "Record Sort:\n ";

                                            //if (rptClientDoc.DataDefController.SortController.CanSortOn(RASSortField.SortField))
                                            //{
                                            //    MessageBox.Show("true " + RASSortField.SortField.IsRecurring.ToString());
                                            //}
                                            //else
                                            //    MessageBox.Show("False " + RASSortField.SortField.IsRecurring.ToString());

                                            //SortController sortController = rptClientDoc.DataDefController.SortController;
                                            //try
                                            //{
                                            //    //sortController.ModifySortDirection(FLDsortIndex, CrSortDirectionEnum.crSortDirectionNoSortOrder);
                                            //    // if no sort then delete the sort and SAVE the report
                                            //    //rptClientDoc.SaveAs("don2.rpt", @"D:\Atest\swati\CrystalTest_3501213_2013", 0);
                                            //    sortController.Remove(crSortField);
                                            //}
                                            //catch (Exception ex)
                                            //{
                                            //    btnSQLStatement.Text = "ERROR: " + ex.Message;
                                            //}

                                            IsRpt = false;
                                            FLDsortIndex++;
                                        }

                                        textBox1 += crSortField.Field.Name.ToString();
                                        textBox1 += "  ";
                                    }
                                }
                            }

                            textBox1 += RASSortField.SortField.FormulaForm.ToString() + "\n";
                            textBox1 += "  ";
                            textBox1 += RASSortField.Direction.ToString() + "\n";
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText("\n");
                        }
                    #endregion Sorts
                    break;
                case "Summary Fields":
                    #region SummaryFields
                    btnReportObjects.Text = "";
                    flcnt = 0;

                    foreach (SummaryField resultField in rptClientDoc.DataDefController.DataDefinition.SummaryFields)
                    {
                        textBox1 = resultField.LongName.ToString();
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText(" 'End' \n");
                        ++flcnt;
                        btnCount.Text = flcnt.ToString();

                        //MessageBox.Show(resultField.Type.ToString());
                    }
                    #endregion SummaryFields
                    break;
                case "Running Totals":
                    #region Running Totals
                    btnReportObjects.Text = "";
                    flcnt = 0;
                    foreach (CrystalDecisions.CrystalReports.Engine.RunningTotalFieldDefinition resultField in rpt.DataDefinition.RunningTotalFields)
                    {
                        textBox1 = resultField.Name.ToString() + " - " + resultField.SummarizedField.FormulaName.ToString();
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText(" 'End' \n");
                        ++flcnt;
                        btnCount.Text = flcnt.ToString();
                        // Do not touch above

                        //IsRpt = false;
                        //rptObjs = rptClientDoc.ReportDefController.ReportObjectController.GetReportObjectsByKind(CrReportObjectKindEnum.crReportObjectKindField);
                        //{
                        //    foreach (CrystalDecisions.CrystalReports.Engine.Area area in rpt.ReportDefinition.Areas)
                        //    {
                        //        foreach (CrystalDecisions.CrystalReports.Engine.Section section in area.Sections)
                        //        {
                        //            foreach (CrystalDecisions.CrystalReports.Engine.ReportObject obj in section.ReportObjects)
                        //            {
                        //                //if (obj.Kind == CrystalDecisions.Shared.ReportObjectKind.FieldObject && obj.Name.ToString() == "CountbyCase1")
                        //                if (obj.Kind == CrystalDecisions.Shared.ReportObjectKind.FieldObject && obj.Name.ToString() == "Country1")
                        //                {
                        //                    //ReportDefController2 reportDef = rptClientDoc.ReportDefController;
                        //                    //For cloning the running total field from an existing field in the Detail section, the code attempted is:
                        //                    CrystalDecisions.ReportAppServer.ReportDefModel.Section rasSection;
                        //                    //rasSection = rptClientDoc.ReportDefController.ReportDefinition.FindSectionByName(section.Name);
                        //                    CrystalDecisions.ReportAppServer.ReportDefModel.Section sectionToAdd = rptClientDoc.ReportDefinition.DetailArea.Sections[2];
                        //                    CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject oldCountByCaseField = rptClientDoc.ReportDefController.ReportDefinition.FindObjectByName("CountbyCase1") as CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject;
                        //                    CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject newCountByCaseField = oldCountByCaseField.Clone(true) as CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject;
                        //                    rptClientDoc.ReportDefController.ReportObjectController.Remove(oldCountByCaseField);
                        //                    newCountByCaseField.Name = "CountbyCase2";
                        //                    //newCountByCaseField.Format.EnableSuppress = false;
                        //                    //newCountByCaseField.Kind = CrReportObjectKindEnum.crReportObjectKindField;
                        //                    //newCountByCaseField.Height = 221;
                        //                    //newCountByCaseField.Left = 8880;
                        //                    //newCountByCaseField.Top = 0;
                        //                    ////newCountByCaseField.DataSourceName = "{#Count by Case}";
                        //                    //newCountByCaseField.SectionName = "DetailSection3";

                        //                    rptClientDoc.ReportDefController.ReportObjectController.Add(newCountByCaseField, sectionToAdd, -1);
                        //                }
                        //            }
                        //        }
                        //    }
                        //}

                        //CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject caseTotalField = new CrystalDecisions.ReportAppServer.ReportDefModel.FieldObjectClass();
                        //caseTotalField.FieldValueType = CrystalDecisions.ReportAppServer.ReportDefModel.CrFieldValueTypeEnum.crFieldValueTypeNumberField;
                        //caseTotalField.DataSourceName = "{#Count by Case}";
                        //rptClientDoc.ReportDefController.ReportObjectController.Add(caseTotalField, groupFooterSection, -1);

                        //CrystalDecisions.ReportAppServer.ReportDefModel.Section detailSection = rptClientDoc.ReportDefinition.FindSectionByName("DetailSection1");
                        //CrystalDecisions.ReportAppServer.ReportDefModel.ReportObject testCaseTotalField = BuilderHelper.FindSectionReportObject(detailSection, "CountbyCase1");
                        //rptClientDoc.ReportDefController.ReportObjectController.Remove(testCaseTotalField);
                        //rptClientDoc.ReportDefController.ReportObjectController.Add(testCaseTotalField, groupFooterSection);

                        ////For cloning the running total field from an existing field in the Detail section, the code attempted is:
                        //CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject oldCountByCaseField = rptClientDoc.ReportDefController.ReportDefinition.FindObjectByName("CountbyCase1") as RDefModel.FieldObject;
                        //CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject newCountByCaseField = oldCountByCaseField.Clone(true) as RDefModel.FieldObject;
                        //newCountByCaseField.Name = "CountbyCase2";
                        //newCountByCaseField.Format.EnableSuppress = false;
                        //rptClientDoc.ReportDefController.ReportObjectController.Add(newCountByCaseField, groupFooterSection, -1);



                    }
                    #endregion Running Totals
                    break;
                case "SubReports":
                    #region Subreports
                    btnReportObjects.Text = "";
                    flcnt = 0;

                    rptObjs = rptClientDoc.ReportDefController.ReportObjectController.GetAllReportObjects();

                    foreach (String resultField in rptClientDoc.SubreportController.GetSubreportNames())
                    {
                        SubreportController subreportController = rptClientDoc.SubreportController;
                        SubreportClientDocument subreportClinetDocument = subreportController.GetSubreport(resultField);

                        if (subreportClinetDocument.IsImported)
                        {
                            textBox1 = "Imported: " + subreportClinetDocument.SubreportLocation.ToString();
                            btnReportObjects.Text += textBox1;

                            foreach (CrystalDecisions.ReportAppServer.ReportDefModel.ReportObject rptObj1 in rptObjs)
                            {
                                switch (rptObj1.Kind)
                                {
                                    case CrReportObjectKindEnum.crReportObjectKindSubreport:
                                        CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject subObj1;
                                        subObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject)rptObj1;
                                        int sectionCodeArea = rptObj1.SectionCode % 1000;
                                        sectionCodeArea = sectionCodeArea -  201;
                                        if (sectionCodeArea < 0)
                                            sectionCodeArea = 97;

                                        char SectionArea = (char)sectionCodeArea;


                                        if (resultField == subObj1.SubreportName.ToString())
                                        {
                                            textBox1 = "\n" + subObj1.Name.ToString();
                                            textBox1 += " -> ";
                                            textBox1 += subObj1.SubreportName.ToString() + " - ";
                                            btnReportObjects.Text += textBox1;
                                            btnReportObjects.Text += "\nSection Name: ";

                                            int sectionCode = rptObj1.SectionCode / 1000;
                                            if (sectionCode == 1)
                                            {
                                                btnReportObjects.Text += "Report Header " + rptObj1.SectionName.ToString();
                                            }
                                            if (sectionCode == 2)
                                            {
                                                btnReportObjects.Text += "Page Header " + rptObj1.SectionName.ToString();
                                            }
                                            if (sectionCode == 3)
                                            {
                                                btnReportObjects.Text += "Group Header: " + rptObj1.SectionName.ToString();
                                            }
                                            if (sectionCode == 4)
                                            {
                                                btnReportObjects.Text += "Details " + rptObj1.SectionName.ToString();
                                            }
                                            if (sectionCode == 5)
                                            {
                                                btnReportObjects.Text += "Group Footer: " + rptObj1.SectionName.ToString();
                                            }
                                            if (sectionCode == 6)
                                            {
                                                btnReportObjects.Text += "unknown " + rptObj1.SectionName.ToString();
                                            }
                                            if (sectionCode == 7)
                                            {
                                                btnReportObjects.Text += "Page Footer " + rptObj1.SectionName.ToString();
                                            }
                                            if (sectionCode == 8)
                                            {
                                                btnReportObjects.Text += "Report Footer " + rptObj1.SectionName.ToString(); //SectionArea.ToString() + " : " + sectionCodeArea.ToString(); // rptObj1.SectionName.ToString();  //SectionArea;
                                            }

                                            btnReportObjects.AppendText("\n");
                                            ++flcnt;
                                            btnCount.Text = flcnt.ToString();
                                        }
                                        break;
                                }
                            }

                            btnReportObjects.AppendText("\n");
                            ++flcnt;
                            btnCount.Text = flcnt.ToString();
                        }
                        else
                        {
                            textBox1 = "embedded: " + " " + resultField.ToString();
                            btnReportObjects.Text += textBox1;

                            foreach (CrystalDecisions.ReportAppServer.ReportDefModel.ReportObject rptObj1 in rptObjs)
                            {
                                switch (rptObj1.Kind)
                                {
                                    case CrReportObjectKindEnum.crReportObjectKindSubreport:
                                        CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject subObj1;
                                        subObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject)rptObj1;
                                        int sectionCodeArea = rptObj1.SectionCode % 1000;
                                        sectionCodeArea = sectionCodeArea - 201;
                                        char SectionArea = (char)sectionCodeArea;

                                        if (resultField == subObj1.SubreportName.ToString())
                                        {
                                            textBox1 = "\n" + subObj1.Name.ToString();
                                            textBox1 += " -> ";
                                            textBox1 += subObj1.SubreportName.ToString() + " - ";
                                            btnReportObjects.Text += textBox1;
                                            btnReportObjects.Text += "\nSection Name: ";

                                            int sectionCode = rptObj1.SectionCode / 1000;
                                            if (sectionCode == 1)
                                            {
                                                btnReportObjects.Text += "Report Header " + rptObj1.SectionName.ToString();
                                            }
                                            if (sectionCode == 2)
                                            {
                                                btnReportObjects.Text += "Page Header " + rptObj1.SectionName.ToString();
                                            }
                                            if (sectionCode == 3)
                                            {
                                                btnReportObjects.Text += "Group Header: " + rptObj1.SectionName.ToString();
                                            }
                                            if (sectionCode == 4)
                                            {
                                                btnReportObjects.Text += "Details " + rptObj1.SectionName.ToString();
                                            }
                                            if (sectionCode == 5)
                                            {
                                                btnReportObjects.Text += "Group Footer: " + rptObj1.SectionName.ToString();
                                            }
                                            if (sectionCode == 6)
                                            {
                                                btnReportObjects.Text += "unknown " + rptObj1.SectionName.ToString();
                                            }
                                            if (sectionCode == 7)
                                            {
                                                btnReportObjects.Text += "Page Footer " + rptObj1.SectionName.ToString(); //SectionArea;
                                            }
                                            if (sectionCode == 8)
                                            {
                                                btnReportObjects.Text += "Report Footer " + rptObj1.SectionName.ToString();  //SectionArea;
                                            }

                                            btnReportObjects.AppendText("\n");
                                            ++flcnt;
                                            btnCount.Text = flcnt.ToString();
                                        }
                                        break;
                                }
                            } 
                            ++flcnt;
                            btnCount.Text = flcnt.ToString();
                        }

                    // crpe macro for section code info
                    // A macro to create section codes:
                    // (This representation allows up to 25 groups and 40 sections of a given
                    // type, although Crystal Reports itself has no such limitations.)
                    //#define PE_SECTION_CODE(sectionType,groupN,sectionN) \
                    //    (((sectionType) * 1000) + ((groupN) % 25) + (((sectionN) % 40) * 25))

                    //// A macro to create area codes:
                    //#define PE_AREA_CODE(sectionType,groupN) \
                    //    PE_SECTION_CODE (sectionType, groupN, 0)

                    //// Section types:
                    //#define PE_SECT_PAGE_HEADER      2
                    //#define PE_SECT_PAGE_FOOTER      7
                    //#define PE_SECT_REPORT_HEADER    1
                    //#define PE_SECT_REPORT_FOOTER    8
                    //#define PE_SECT_GROUP_HEADER     3
                    //#define PE_SECT_GROUP_FOOTER     5
                    //#define PE_SECT_DETAIL           4

                    //// Macros to decode section and area codes:
                    //#define PE_SECTION_TYPE(sectionCode) ((sectionCode) / 1000)
                    //#define PE_GROUP_N(sectionCode)      ((sectionCode) % 25)
                    //#define PE_SECTION_N(sectionCode)    (((sectionCode) / 25) % 40)


                    //// add a subreport
                    //CrystalDecisions.ReportAppServer.ReportDefModel.Section rasSection;
                    //CrystalDecisions.ReportAppServer.Controllers.SubreportClientDocument MyNewSub; // = new SubreportClientDocument();
                                        
                    //rasSection = rptClientDoc.ReportDefController.ReportDefinition.ReportHeaderArea.Sections[0];

                    ////When adding a new subreport (as opposed to importing), you need to leave the ReportURL property blank
                    //MyNewSub = rptClientDoc.SubreportController.ImportSubreport("World Sales Report", "d:\\atest\\soda\\impsub.rpt", rasSection);
                    //MyNewSub.DatabaseController.LogonEx("10.161.14.102", "xtreme", "sa", "1Oem2000");


                    // Change an existing subreport
                    //    //CrystalDecisions.CrystalReports.Engine.ReportObjects crReportObjects;

                    //    ////set the crSections object to the current report's sections
                    //    //CrystalDecisions.CrystalReports.Engine.Sections crSections = rpt.ReportDefinition.Sections;

                    //    //if (resultField.ToString() == "World Sales Report.rpt")
                    //    //{
                    //    //    //loop through all the sections to find all the report objects
                    //    //    foreach (CrystalDecisions.CrystalReports.Engine.Section crSection in crSections)
                    //    //    {
                    //    //        crReportObjects = crSection.ReportObjects;
                    //    //        //loop through all the report objects to find all the subreports
                    //    //        foreach (CrystalDecisions.CrystalReports.Engine.ReportObject crReportObject in crReportObjects)
                    //    //        {
                    //    //            if (crReportObject.Kind == ReportObjectKind.SubreportObject)
                    //    //            {
                    //    //                CrystalDecisions.ReportAppServer.ReportDefModel.Section rasSection;
                    //    //                rasSection = rptClientDoc.ReportDefController.ReportDefinition.FindSectionByName(crSection.Name);
                    //    //                CrystalDecisions.ReportAppServer.Controllers.SubreportClientDocument MyNewSub;
                    //    //                MyNewSub = rptClientDoc.SubreportController.GetSubreport(resultField.ToString());
                                        
                    //    //                CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject objSubreport = rptClientDoc.ReportDefController.ReportObjectController.GetAllReportObjects()[crReportObject.Name] as CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject;
                    //    //                CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject objSubreport2 = (CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject)objSubreport.Clone(true);
                    //    //                rptClientDoc.ReportDefController.ReportObjectController.Remove(objSubreport);
                    //    //                CrystalDecisions.ReportAppServer.ReportDefModel.SubreportLinks mySubLinks = rptClientDoc.SubreportController.GetSubreportLinks(objSubreport2.SubreportName.ToString());
                    //    //                mySubLinks.RemoveAll();

                    //    //                objSubreport2.Left = 10;
                    //    //                objSubreport2.Height = 10;
                    //    //                objSubreport2.Width = 10;
                    //    //                objSubreport2.Name = "sub1";
                    //    //                objSubreport2.SubreportName = "sub1";
                    //    //                //rptClientDoc.ReportDefController.ReportObjectController.Modify(rptClientDoc.ReportDefController.ReportObjectController.GetAllReportObjects()[crReportObject.Name] as CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject, objSubreport2);
                    //    //                rptClientDoc.ReportDefController.ReportObjectController.Add(objSubreport2, rasSection, -1);
                    //    //            }
                    //    //        }
                    //    //    }
                    //    //}
                    }
                    #endregion Subreports
                    break;
                case "Main Report Data Sources":
                    #region MainDataSources
                    btnReportObjects.Text = "";
                    flcnt = 0;
                    foreach (String resultField in rptClientDoc.DatabaseController.GetServerNames())
                    {
                        textBox1 = "Server: " + resultField.ToString();
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\nDatabase: ");
                        ++flcnt;
                        btnCount.Text = flcnt.ToString();

                        CrystalDecisions.CrystalReports.Engine.Database crDatabase;
                        CrystalDecisions.CrystalReports.Engine.Tables crTables;

                        CrystalDecisions.Shared.ConnectionInfo crConnectioninfo = new CrystalDecisions.Shared.ConnectionInfo();

                        crConnectioninfo.DatabaseName.ToString();

                        //set up the database and tables objects to refer to the current report
                        crDatabase = rpt.Database;
                        crTables = crDatabase.Tables;

                        try
                        {
                            foreach (CrystalDecisions.CrystalReports.Engine.Table crTable in crTables)
                            {
                                textBox1 = crTable.Name.ToString();
                                btnReportObjects.Text += textBox1;
                                // checks for table alias
                                if (crTable.Location != crTable.Name)
                                {
                                    btnReportObjects.AppendText("(" + crTable.Location.ToString() + ")");
                                }
                                btnReportObjects.AppendText("'End' \n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message);
                            return;
                        }

                    }
                    #endregion MainDataSources
                    break;
                case "Main Report Data Links":
                    #region MainDataLinks
                    btnReportObjects.Text = "";
                    flcnt = 0;
                    foreach (String resultField in rptClientDoc.SubreportController.GetSubreportNames())
                    {
                        //CrystalDecisions.ReportAppServer.Controllers.SubreportClientDocument mysub;
                        //mysub.EnableOnDemand = true;
                        textBox1 = resultField.ToString();
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("Need to add code to get main report data source info 'End' \n");
                        ++flcnt;
                        btnCount.Text = flcnt.ToString();
                    }
                    #endregion MainDataLinks
                    break;
                case "SubReport Data Sources":
                    #region SubDataSources
                    btnReportObjects.Text = "";
                    flcnt = 0;

                    CrystalDecisions.CrystalReports.Engine.ReportObjects crReportObjects;
                    CrystalDecisions.CrystalReports.Engine.SubreportObject crSubreportObject;
                    CrystalDecisions.CrystalReports.Engine.ReportDocument crSubreportDocument;

                    //set the crSections object to the current report's sections
                    CrystalDecisions.CrystalReports.Engine.Sections crSections = rpt.ReportDefinition.Sections;

                    //loop through all the sections to find all the report objects
                    foreach (CrystalDecisions.CrystalReports.Engine.Section crSection in crSections)
                    {
                        crReportObjects = crSection.ReportObjects;
                        //loop through all the report objects to find all the subreports
                        foreach (CrystalDecisions.CrystalReports.Engine.ReportObject crReportObject in crReportObjects)
                        {
                            if (crReportObject.Kind == ReportObjectKind.SubreportObject)
                            {
                                CrystalDecisions.CrystalReports.Engine.Database crDatabase;
                                CrystalDecisions.CrystalReports.Engine.Tables crTables;

                                CrystalDecisions.Shared.ConnectionInfo crConnectioninfo = new CrystalDecisions.Shared.ConnectionInfo();
                                //you will need to typecast the reportobject to a subreport 
                                //object once you find it
                                crSubreportObject = (CrystalDecisions.CrystalReports.Engine.SubreportObject)crReportObject;
                                string mysubname = crSubreportObject.SubreportName.ToString();

                                crSubreportObject.ToString();
                                //open the subreport object
                                crSubreportDocument = crSubreportObject.OpenSubreport(crSubreportObject.SubreportName);

                                foreach (IConnectionInfo subinfo in crSubreportDocument.DataSourceConnections)
                                {
                                    textBox1 = "Subreport Name: " + mysubname.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText("\nServer: ");
                                    btnReportObjects.AppendText(subinfo.ServerName.ToString());
                                    btnReportObjects.AppendText("\nDatabase: ");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();

                                    //set the database and tables objects to work with the subreport
                                    crDatabase = crSubreportDocument.Database;
                                    crTables = crDatabase.Tables;

                                    try
                                    {
                                        foreach (CrystalDecisions.CrystalReports.Engine.Table crTable in crTables)
                                        {
                                            textBox1 = crTable.Name.ToString();
                                            btnReportObjects.Text += textBox1;
                                            // checks for table alias
                                            if (crTable.Location != crTable.Name)
                                            {
                                                btnReportObjects.AppendText("(" + crTable.Location.ToString() + ")");
                                            }
                                            btnReportObjects.AppendText("'End' \n");
                                            ++flcnt;
                                            btnCount.Text = flcnt.ToString();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show(ex.Message);
                                        return;
                                    }
                                    btnReportObjects.AppendText("\n");
                                }
                            }
                        }

                        //++flcnt;
                        btnCount.Text = flcnt.ToString();
                    }
                    #endregion SubDataSources
                    break;
                case "SubReport Links":
                    #region SubLinks
                    btnReportObjects.Text = "";
                    btnCount.Text = "";
                    foreach (String resultField in rptClientDoc.SubreportController.GetSubreportNames())
                    {
                        textBox1 = resultField.ToString();
                        btnReportObjects.Text += "Subreport Name: " + textBox1;
                        btnReportObjects.AppendText(":\n");

                        SubreportLinks SubLinks = rptClientDoc.SubreportController.GetSubreportLinks(resultField.ToString());
                        for (int I = 0; I < SubLinks.Count; I++)
                        {
                            SubreportLink subLink = SubLinks[I];
                            textBox1 = subLink.LinkedParameterName.ToString();
                            btnReportObjects.Text += "PM-Name: " + textBox1;
                            btnReportObjects.AppendText("\n");
                            textBox1 = subLink.MainReportFieldName.ToString();
                            btnReportObjects.Text += "Main Field: " + textBox1;
                            btnReportObjects.AppendText("\n");
                            textBox1 = subLink.SubreportFieldName.ToString();
                            btnReportObjects.Text += " Sub Field: " + textBox1;
                            btnReportObjects.AppendText(" 'End' \n");
                        }
                        btnReportObjects.AppendText("\n");
                        btnCount.Text = SubLinks.Count.ToString();
                    }
                    #endregion SubLinks
                    break;
                case "Special Fields":
                    btnReportObjects.Text = "";
                    getSpecialFields(rpt);
                    break;
                case "Hyperlinks":
                    btnReportObjects.Text = "";
                    getHyperlinks(rpt);
                    break;
                case "Section Print Orientation":
                    btnReportObjects.Text = "";
                    getSectionPrintOrientation(rpt);
                    break;
                case "Summary Info":
                    #region SummaryInfo
                    btnReportObjects.Text = "";
                    try
                    {
                        if (rpt.SummaryInfo.ReportAuthor != null)
                        {
                            textBox1 = "Author: " + rpt.SummaryInfo.ReportAuthor.ToString();
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText(" 'End' \n");
                            btnReportObjects.AppendText("Length: " + rpt.SummaryInfo.ReportAuthor.Length.ToString());
                            btnReportObjects.AppendText(" 'End' \n\n");
                        }
                    }
                    catch (Exception ex)
                    {
                        textBox1 = "Author: ERROR: " + ex.Message;
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText(" 'End' \n"); 
                    }
                    try
                    {
                        if (rpt.SummaryInfo.ReportComments != null)
                        {
                            textBox1 = "Comments: " + rpt.SummaryInfo.ReportComments.ToString();
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText(" 'End' \n");
                            btnReportObjects.AppendText("Length: " + rpt.SummaryInfo.ReportComments.Length.ToString());
                            btnReportObjects.AppendText(" 'End' \n\n");
                        }
                    }
                    catch (Exception ex)
                    {
                        textBox1 = "Comments: ERROR: " + ex.Message;
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText(" 'End' \n");
                    }
                    try
                    {
                        if (rpt.SummaryInfo.ReportTitle != null)
                        {
                            textBox1 = "Title: " + rpt.SummaryInfo.ReportTitle.ToString();
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText(" 'End' \n");
                            btnReportObjects.AppendText("Length: " + rpt.SummaryInfo.ReportTitle.Length.ToString());
                            btnReportObjects.AppendText(" 'End' \n\n");
                        }
                    }
                    catch (Exception ex)
                    {
                        textBox1 = "Title: ERROR: " + ex.Message;
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText(" 'End' \n");
                    }
                    #endregion SummaryInfo
                    break;
                case "Alerts":
                    #region Alerts
                    btnReportObjects.Text = "";
                    Alerts alerts;
                    btnCount.Text = "";
                    alerts = rptClientDoc.SearchController.GetTriggeredAlerts();
                    if (alerts.Count > 0)
                    {
                        foreach (Alert alert in alerts)
                        {
                            textBox1 = "Alert Name:     " + alert.Name + "\n";
                            textBox1 += "Alert Message:  " + alert.Message.ToString() + "\n";
                            textBox1 += "Alert Formula:  " + alert.ConditionFilter.FreeEditingText.ToString() + "\n";
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText(" 'End' \n");
                        }
                        btnCount.Text = alerts.Count.ToString();
                    }
                    #endregion Alerts
                    break;
                case "LOV - List of Values":
                    btnReportObjects.Text = "";
                    CrystalDecisions.ReportAppServer.Prompting.LOVField myLOV = new CrystalDecisions.ReportAppServer.Prompting.LOVField();
                    btnCount.Text = "";
                    myLOV.Name = rptClientDoc.DataDefController.ResultFieldController.ToString();
                    //MessageBox.Show(myLOV.Sibling.ToString());
                    break;
                case "Saved Export Options":
                    getSavedExportOptions(rpt);
                    break;
                case "Graphic Location Formula":
                    #region GRaphicsLocal
                    btnReportObjects.Text = "";

                    CrystalDecisions.ReportAppServer.ReportDefModel.ConditionFormula myGraphicLocationFormula;
                    rptObjs = rptClientDoc.ReportDefController.ReportObjectController.GetReportObjectsByKind(CrReportObjectKindEnum.crReportObjectKindPicture);

                    // get the count of picture objects
                    btnCount.Text = rptObjs.Count.ToString();
                    foreach (CrystalDecisions.ReportAppServer.ReportDefModel.PictureObject MyrptObj in rptObjs)
                    {
                        if (((dynamic)MyrptObj).GraphicLocationFormula.Text != null)
                        {
                            textBox1 = "Picture Name: " + MyrptObj.Name.ToString() + "\n";
                            textBox1 += "Graphic Location Formula:     " + MyrptObj.GraphicLocationFormula.Text.ToString() + "\n";
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText(" 'End' \n");
                        }
                        else
                        {
                            textBox1 = "Picture Name: " + MyrptObj.Name.ToString() + "\n";
                            textBox1 += "Graphic Location Formula: None\n";
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText(" 'End' \n");
                        }
                    }
                    #endregion GRaphicsLocal
                    break;
                case "Table Joins":
                    #region TableJoins
                    btnReportObjects.Text = "";
//                    string crJoinOperator = "";

                    //CrystalDecisions.ReportAppServer.DataDefModel.TableJoin RASTableJoins = new TableJoins();

                    //RASTableJoins = rptClientDoc.DataDefController.Database.TableLinks[0].JoinType;

                    //foreach (CrystalDecisions.ReportAppServer.DataDefModel.TableJoin RASTableJoins in rptClientDoc.DataDefController.Database.TableJoins)
                    //{
                    //    string crJoinOperator = "";

                    //}

                    //int x = 0;

                    string crJoinOperator = "";

                    foreach (CrystalDecisions.ReportAppServer.DataDefModel.TableLink rasTableLink in rptClientDoc.DataDefController.Database.TableLinks)
                    {
                        //get the link properties
                        btnCount.Text = "";
                        int y = rptClientDoc.DataDefController.Database.TableLinks.Count;
                        btnCount.Text = y.ToString();
                        string crJoinType = "";

                        //for (int x = 0; x <= y; x++)
                        //{
                        //    try
                        //    {
                        //        if (rptClientDoc.DataDefController.Database.TableJoins[0].JoinOperator == CrTableJoinOperatorEnum.crTableJoinOperatorInnerJoin)
                        //        {
                        //            crJoinOperator = "InnerJoin";
                        //        }
                        //    }
                        //    catch
                        //    {
                        //        btnReportObjects.AppendText("Invalid Index 'End' \n");
                        //        //x++;
                        //    }

                        //}

                        //try
                        //{
                        //    if (rptClientDoc.DataDefController.Database.TableJoins[x].JoinOperator == CrTableJoinOperatorEnum.crTableJoinOperatorInnerJoin)
                        //    {
                        //        crJoinOperator = "InnerJoin ";
                        //    }
                        //}


                        if (rasTableLink.JoinType == CrTableJoinTypeEnum.crTableJoinTypeAdvance)
                        {
                            crJoinType = "-> Advanced ->";
                        }
                        if (rasTableLink.JoinType == CrTableJoinTypeEnum.crTableJoinTypeEqualJoin)
                        {
                            crJoinType = "-> = ->";
                        }
                        if (rasTableLink.JoinType == CrTableJoinTypeEnum.crTableJoinTypeGreaterOrEqualJoin)
                        {
                            crJoinType = "-> >= ->";
                        }
                        if (rasTableLink.JoinType == CrTableJoinTypeEnum.crTableJoinTypeGreaterThanJoin)
                        {
                            crJoinType = "-> > ->";
                        }
                        if (rasTableLink.JoinType == CrTableJoinTypeEnum.crTableJoinTypeLeftOuterJoin)
                        {
                            crJoinType = "-> LOJ ->";
                        }
                        if (rasTableLink.JoinType == CrTableJoinTypeEnum.crTableJoinTypeLessOrEqualJoin)
                        {
                            crJoinType = "-> <= ->";
                        }
                        if (rasTableLink.JoinType == CrTableJoinTypeEnum.crTableJoinTypeLessThanJoin)
                        {
                            crJoinType = "-> < ->";
                        }
                        if (rasTableLink.JoinType == CrTableJoinTypeEnum.crTableJoinTypeNotEqualJoin)
                        {
                            crJoinType = "-> != ->";
                        }
                        if (rasTableLink.JoinType == CrTableJoinTypeEnum.crTableJoinTypeOuterJoin)
                        {
                            crJoinType = "-> OJ ->";
                        }
                        if (rasTableLink.JoinType == CrTableJoinTypeEnum.crTableJoinTypeRightOuterJoin)
                        {
                            crJoinType = "-> ROJ ->";
                        }

                        textBox1 = "Only gets Link type:" + rasTableLink.SourceTableAlias.ToString() + "." + rasTableLink.SourceFieldNames[0].ToString() +
                            crJoinOperator + "." + crJoinType + rasTableLink.TargetTableAlias.ToString() + "." + rasTableLink.TargetFieldNames[0].ToString() + "\n";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText(" 'End' \n");
                    }
                    #endregion TableJoins
                    break;
                case "Charts":
                    #region Charts
                    btnReportObjects.Text = "";
                    flcnt = 0;
                    rptObjs = rptClientDoc.ReportDefController.ReportObjectController.GetAllReportObjects();

                    foreach (CrystalDecisions.ReportAppServer.ReportDefModel.ReportObject rptObj1 in rptObjs)
                    {
                        switch (rptObj1.Kind)
                        {
                            case CrReportObjectKindEnum.crReportObjectKindChart:
                                textBox1 = rptObj1.Name.ToString();
                                textBox1 += " -> ";
                                textBox1 += rptObj1.Name.ToString();
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.AppendText("\n");
                                btnReportObjects.Text += "Height: " + rptObj1.Height.ToString();
                                btnReportObjects.AppendText(" Twips\n");
                                btnReportObjects.Text += "Width: " + rptObj1.Width.ToString();
                                btnReportObjects.AppendText(" Twips\n");
                                btnReportObjects.Text += "Top: " + rptObj1.Top.ToString();
                                btnReportObjects.AppendText(" Twips\n");
                                btnReportObjects.Text += "Left: " + rptObj1.Left.ToString();
                                btnReportObjects.AppendText(" Twips\n");
                                btnReportObjects.Text += "BottomLineStyle: " + rptObj1.Border.BottomLineStyle.ToString();
                                btnReportObjects.AppendText("\n");
                                btnReportObjects.Text += "BackgroundColor: " + rptObj1.Border.BackgroundColor.ToString();
                                btnReportObjects.AppendText("\n");
                                btnReportObjects.Text += "BorderColor: " + rptObj1.Border.BorderColor.ToString();
                                btnReportObjects.AppendText("\n");
                                btnReportObjects.Text += "BottomLineStyle: " + rptObj1.Border.BottomLineStyle.ToString();
                                btnReportObjects.AppendText("\n");
                                btnReportObjects.Text += "EnableTightHorizontal: " + rptObj1.Border.EnableTightHorizontal.ToString();
                                btnReportObjects.AppendText("\n");
                                btnReportObjects.Text += "HasDropShadow: " + rptObj1.Border.HasDropShadow.ToString();
                                btnReportObjects.AppendText("\n");
                                btnReportObjects.Text += "LeftLineStyle: " + rptObj1.Border.LeftLineStyle.ToString();
                                btnReportObjects.AppendText("\n");
                                btnReportObjects.Text += "RightLineStyle: " + rptObj1.Border.RightLineStyle.ToString();
                                btnReportObjects.AppendText("\n");
                                btnReportObjects.Text += "TopLineStyle: " + rptObj1.Border.TopLineStyle.ToString();
                                btnReportObjects.AppendText("\n");
                                btnReportObjects.Text += "Section Name: " + rptObj1.SectionName.ToString();
                                btnReportObjects.AppendText("\n\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();
                                break;
                        }
                    }
                    #endregion Charts
                    break;
                case "Condition Fields/Formula":
                    #region Conditional
                    {
                        btnReportObjects.Text = "";
                        flcnt = 0;

                        foreach (CrystalDecisions.ReportAppServer.ReportDefModel.ReportObject reportObject in rptClientDoc.ReportDefController.ReportObjectController.GetAllReportObjects())
                        {
                            var reportSection = rptClientDoc.ReportDefController.ReportDefinition.FindSectionByName(reportObject.SectionName);
                            for (int index = 0;
                                 index < reportSection.Format.ConditionFormulas.Count;
                                 ++index)
                            {
                                var formula = reportSection.Format.ConditionFormulas[(CrystalDecisions.ReportAppServer.ReportDefModel.CrSectionAreaFormatConditionFormulaTypeEnum)index];
                                var NewFormula = reportSection.Format.ConditionFormulas[(CrystalDecisions.ReportAppServer.ReportDefModel.CrSectionAreaFormatConditionFormulaTypeEnum)index];

                                try
                                {
                                    textBox1 = "Condition Formula: " + formula.Text.ToString();
                                }
                                catch (Exception ex)
                                {
                                    btnReportObjects.Text += "\nException - Missing UFL - View report to get the name: \n" + ex.ToString();
                                }
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.AppendText("\n");
                                ++flcnt;
                                btnCount.Text = flcnt.ToString();

                                //// check the formula by adding it to the report to verify the syntax
                                //CrystalDecisions.ReportAppServer.ObjectFactory.ObjectFactory objFactory = new CrystalDecisions.ReportAppServer.ObjectFactory.ObjectFactory();
                                //CrystalDecisions.ReportAppServer.DataDefModel.FormulaField Formula = (CrystalDecisions.ReportAppServer.DataDefModel.FormulaField)objFactory.CreateObject("CrystalReports.FormulaField");
                                //Formula.Type = CrystalDecisions.ReportAppServer.DataDefModel.CrFieldValueTypeEnum.crFieldValueTypeStringField;
                                //Formula.Syntax = CrystalDecisions.ReportAppServer.DataDefModel.CrFormulaSyntaxEnum.crFormulaSyntaxCrystal;
                                //Formula.Text = @"whilereadingrecords; ""A"""; // "hello Ludek = 1"; // resultField.Text; // "n=3"; {Customer.Customer Credit ID} + 1 @"whilereadingrecords; ""A"""
                                //Formula.Name = "TestDon"; // "TestDon"; //  resultField.Name; //"testformula";
                                //String FormulaMessage = rptClientDoc.DataDefController.FormulaFieldController.Check(Formula);
                                //if (FormulaMessage == null)
                                //{
                                //    //then add the conditional formula if it's OK
                                //    // Sage question and solution
                                //    string newFormulaText = "'It Worked' = 'It Worked'";
                                //    // Clone a Section Format and use ReportSectionController.SetPropety to modify the ConditionFormulas
                                //    CrystalDecisions.ReportAppServer.ReportDefModel.SectionFormat newFormat = reportSection.Format.Clone(true);
                                //    newFormat.ConditionFormulas[(CrystalDecisions.ReportAppServer.ReportDefModel.CrSectionAreaFormatConditionFormulaTypeEnum)index].Text = newFormulaText;
                                //    rptClientDoc.ReportDefController.ReportSectionController.SetProperty(reportSection, CrReportSectionPropertyEnum.crReportSectionPropertyFormat, newFormat);
                                //}
                                //else
                                //    btnReportObjects.Text += "There are errors in the formula: " + FormulaMessage.ToString() + "\n";
                            }
                        }
                    }
                    #endregion Conditional
                    break;
                case "Fonts used in the report":
                    #region Fonts
                    {
                        btnReportObjects.Text = "";
                        flcnt = 0;

                        //CrystalDecisions.ReportAppServer.ReportDefModel.ReportObjects rptObjs;
                        //rptObjs = rptClientDoc.ReportDefController.ReportObjectController.GetReportObjectsByKind(CrReportObjectKindEnum.crReportObjectKindField);
                        rptObjs = rptClientDoc.ReportDefController.ReportObjectController.GetAllReportObjects();


                        foreach (CrystalDecisions.ReportAppServer.ReportDefModel.ReportObject rptObj1 in rptObjs)
                        {
                            switch (rptObj1.Kind)
                            {
                                case CrReportObjectKindEnum.crReportObjectKindField:
                                    CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject fldObj1;
                                    fldObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject)rptObj1;

                                    textBox1 = fldObj1.Name.ToString();
                                    textBox1 += " -> ";

                                    rptObj = (CrystalDecisions.ReportAppServer.ReportDefModel.ReportObject)rptClientDoc.ReportDefController.ReportDefinition.FindObjectByName(fldObj1.Name.ToString());


                                    CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject objField = rptClientDoc.ReportDefController.ReportObjectController.GetAllReportObjects()[rptObj.Name] as CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject;
                                        //objField.FontColor.Font.Name = "Tahoma";

                                    textBox1 += objField.FontColor.Font.Name.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText("\n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();

                                
                                // this always returns an empty string. will be tracked
                                    CrystalDecisions.ReportAppServer.ReportDefModel.ConditionFormula displayStringCondition;
                                    displayStringCondition = rptObj.Format.ConditionFormulas[CrObjectFormatConditionFormulaTypeEnum.crObjectFormatConditionFormulaTypeDisplayString];

                                    break;
                                case CrReportObjectKindEnum.crReportObjectKindText:
                                    CrystalDecisions.ReportAppServer.ReportDefModel.TextObject txtObj;
                                    txtObj = (CrystalDecisions.ReportAppServer.ReportDefModel.TextObject)rptObj1;

                                    textBox1 = txtObj.Name.ToString();
                                    textBox1 += " -> ";
                                    textBox1 += txtObj.Text.ToString();
                                    textBox1 += "\nFont: " + txtObj.FontColor.Font.Name.ToString();
                                    //if txtObj.FontColor.Font.
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText("\n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();

                                    break;
                                case CrReportObjectKindEnum.crReportObjectKindBox:
                                    CrystalDecisions.ReportAppServer.ReportDefModel.BoxObject boxObj1;
                                    CrystalDecisions.ReportAppServer.ReportDefModel.BoxObject boxObj2 = new CrystalDecisions.ReportAppServer.ReportDefModel.BoxObject();
                                    boxObj1 = (CrystalDecisions.ReportAppServer.ReportDefModel.BoxObject)rptObj1;
                                    boxObj2 = boxObj1;

                                    //// modify the box size
                                    //boxObj.Bottom = 360;
                                    //boxObj1.Height = 2385;
                                    //boxObj1.Format.EnableCanGrow = true;
                                    //boxObj1.EndSectionName = "ReportFooterSection1";
                                    //boxObj1.EnableExtendToBottomOfSection = true;
                                    //rptClientDoc.ReportDefController.ReportObjectController.Modify(boxObj, boxObj1);

                                    textBox1 = boxObj1.Name.ToString();
                                    textBox1 += " -> ";
                                    textBox1 += boxObj1.Name.ToString();
                                    textBox1 += " : X - ";
                                    textBox1 += (boxObj1.Left / 1440.00).ToString();
                                    textBox1 += " : Y - ";
                                    textBox1 += ((boxObj1.Right - boxObj1.Left) / 1440.00).ToString();
                                    textBox1 += " : Width - ";
                                    textBox1 += (boxObj1.Width / 1440.00).ToString();
                                    textBox1 += " : Height - ";
                                    textBox1 += (boxObj1.Height / 1440.00).ToString();
                                    btnReportObjects.Text += textBox1;

                                    btnReportObjects.AppendText("\n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();
                                    IsRpt = false;

                                    break;
                                case CrReportObjectKindEnum.crReportObjectKindPicture:

                                    CrystalDecisions.ReportAppServer.ReportDefModel.PictureObject MyGraphicLocationFormula; // = new PictureObject();

                                    //txtObj = MyGraphicLocationFormula.GraphicLocationFormula.Text.ToString();

                                    //txtObj = (CrystalDecisions.ReportAppServer.ReportDefModel.TextObject)rptObj1;

                                    //textBox1 = txtObj.Name.ToString();
                                    //textBox1 += " -> ";
                                    //textBox1 += txtObj.Text.ToString();
                                    //btnReportObjects.Text += textBox1;
                                    //btnReportObjects.AppendText("\n");
                                    //++flcnt;
                                    //btnCount.Text = flcnt.ToString();
                                    break;

                                  //CrystalDecisions.ReportAppServer.ReportDefModel.CrReportObjectKindEnum.crReportObjectKindSubreport;
                                //CrystalDecisions.ReportAppServer.ReportDefModel.CrReportObjectKindEnum.crReportObjectKindPicture;
                                //CrystalDecisions.ReportAppServer.ReportDefModel.CrReportObjectKindEnum.crReportObjectKindOlapGrid;
                                //CrystalDecisions.ReportAppServer.ReportDefModel.CrReportObjectKindEnum.crReportObjectKindMap;
                                //CrystalDecisions.ReportAppServer.ReportDefModel.CrReportObjectKindEnum.crReportObjectKindLine;
                                //CrystalDecisions.ReportAppServer.ReportDefModel.CrReportObjectKindEnum.crReportObjectKindInvalid;
                                //CrystalDecisions.ReportAppServer.ReportDefModel.CrReportObjectKindEnum.crReportObjectKindFlash;
                                //CrystalDecisions.ReportAppServer.ReportDefModel.CrReportObjectKindEnum.crReportObjectKindFieldHeading;
                                //CrystalDecisions.ReportAppServer.ReportDefModel.CrReportObjectKindEnum.crReportObjectKindField;
                                //CrystalDecisions.ReportAppServer.ReportDefModel.CrReportObjectKindEnum.crReportObjectKindCrosstab;
                                //CrystalDecisions.ReportAppServer.ReportDefModel.CrReportObjectKindEnum.crReportObjectKindChart;
                                //CrystalDecisions.ReportAppServer.ReportDefModel.CrReportObjectKindEnum.crReportObjectKindBlobField;

                            }
                        }
                    }
                    #endregion Fonts
                    break;
                default:
                    btnReportObjects.Text = "";
                    //btnReportObjects.Text = "None Used"; 
                    break;
            }
        }

        int iCnt = -1;
        bool YorN;
        bool IsParamRange;

        private void getParameterFields(CrystalDecisions.CrystalReports.Engine.ReportDocument rpt)
        {
            string textBox1 = String.Empty;
            string textBox2 = String.Empty;
            string MyObjectType = ReportObjectComboBox1.SelectedItem.ToString();
            btnReportObjects.Text = "";

            iCnt = -1;

            //CrystalDecisions.ReportAppServer.DataDefModel.ISCRParameterField myIsOptionalPrompt;

            if (rptClientDoc.DataDefController.DataDefinition.ParameterFields.Count > 0) //there are parameters
            {
                btnCount.Text = rptClientDoc.DataDefController.DataDefinition.ParameterFields.Count.ToString();
                foreach (CrystalDecisions.ReportAppServer.DataDefModel.ParameterField paramfield in rptClientDoc.DataDefController.DataDefinition.ParameterFields)
                {
                    iCnt++;
                    // this line gets the parameter name by index
                    //rptClientDoc.DataDefController.DataDefinition.ParameterFields[1].LongName.ToString();
                    switch (paramfield.ValueRangeKind)
                    {
                        case CrParameterValueRangeKindEnum.crParameterValueRangeKindDiscrete:
                            {
                                getDiscreteValues(paramfield);
                                break;
                            }
                        case CrParameterValueRangeKindEnum.crParameterValueRangeKindDiscreteAndRange:
                            {
                                getRangeAndDiscreteValues(paramfield);
                                IsParamRange = true;
                                break;
                            }
                        case CrParameterValueRangeKindEnum.crParameterValueRangeKindRange:
                            {
                                getRangeValues(paramfield);
                                IsParamRange = true;
                                break;
                            }
                    }
                }
            }

            //rpt.SetParameterValue("pcname", Convert.ToDateTime(parmPCname));
            //rpt.SetParameterValue("pcname", Convert.ToDecimal(parmPCname));
            //rpt.SetParameterValue("pcname", Convert.ToString(parmPCname));

            #region Commented
            //foreach (CrystalDecisions.ReportAppServer.DataDefModel.ParameterField paramFields in rptClientDoc.DataDefController.DataDefinition.ParameterFields)
            //{
            //    textBox1 = paramFields.LongName.ToString();
            //    btnReportObjects.Text += textBox1;
            //    btnReportObjects.AppendText(" = ");

            //    CrystalDecisions.ReportAppServer.DataDefModel.Fields flds;
            //    flds = rptClientDoc.DataDefController.ParameterFieldController.GetPromptParameterFields(null);

            //    CrystalDecisions.ReportAppServer.DataDefModel.ParameterField pfld1 = (CrystalDecisions.ReportAppServer.DataDefModel.ParameterField)flds[z];
            //    int currValCount = pfld1.InitialValues.Count;
            //    int defValCount = pfld1.DefaultValues.Count;
               
            //    try
            //    {
            //        CrystalDecisions.ReportAppServer.DataDefModel.Value val = (CrystalDecisions.ReportAppServer.DataDefModel.Value)pfld1.InitialValues[0];
            //        btnReportObjects.AppendText(pfld1.InitialValues.ToString());
            //        btnReportObjects.AppendText(" is Initial Value \n");
            //    }
            //    catch
            //    {
            //        btnReportObjects.AppendText("No Initial Value \n");
            //    }

            //    if (paramFields.ValueRangeKind == CrParameterValueRangeKindEnum.crParameterValueRangeKindDiscrete)
            //    {
            //        try
            //        {
            //            if (currValCount > 0)  //this parameter has default values
            //            {
            //                foreach (ParameterFieldDiscreteValue discreteDefaultVal in pfld1.InitialValues)
            //                {
            //                    btnReportObjects.AppendText(discreteDefaultVal.Value.ToString());
            //                    btnReportObjects.AppendText(": is Default Value \n");
            //                    z++;
            //                }
            //            }
            //            //else
            //            //{
            //            //    //CrystalDecisions.ReportAppServer.DataDefModel.ParameterFieldDiscreteValue paramField1;
            //            //    //paramField1 = (CrystalDecisions.ReportAppServer.DataDefModel.ParameterFieldDiscreteValue)paramFields.DefaultValues[0];
            //            //    btnReportObjects.AppendText(pfld1.InitialValues.ToString());
            //            //    btnReportObjects.AppendText(": is Default Value \n");
            //            //    z++;
            //            //}
            //        }
            //        catch
            //        {
            //            btnReportObjects.AppendText("No Default Values \n");
            //        }
            //    }
            //    else
            //    {
            //        int y = 0;
            //        CrystalDecisions.ReportAppServer.DataDefModel.ParameterField pfld = (CrystalDecisions.ReportAppServer.DataDefModel.ParameterField)rptClientDoc.DataDefinition.ParameterFields[x];

            //        int pCount = pfld.DefaultValues.Count;
            //        CrystalDecisions.ReportAppServer.DataDefModel.ISCRValues currentvalues;
            //        currentvalues = pfld.CurrentValues;
            //        flds = rptClientDoc.DataDefController.ParameterFieldController.GetPromptParameterFields(null); 

            //        btnReportObjects.AppendText("Range Values:\n ");

            //        foreach (CrystalDecisions.ReportAppServer.DataDefModel.ISCRValue RangeVal in pfld.DefaultValues)
            //        {
            //            CrystalDecisions.Shared.ParameterDiscreteValue oValue = (CrystalDecisions.Shared.ParameterDiscreteValue)rpt.DataDefinition.ParameterFields[x].DefaultValues[y];
            //            btnReportObjects.AppendText(oValue.Value.ToString());
            //            // Get the original default values
            //            ParameterFieldDefinition boParameterFieldDefinition;
            //            ParameterValues boParameterDefaultValues;
            //            //ParameterDiscreteValue boParameterDiscreteValue;
            //            bool myDefault;
            //            myDefault = rpt.DataDefinition.ParameterFields[x].HasCurrentValue;
            //            boParameterFieldDefinition = rpt.DataDefinition.ParameterFields[0];
            //            boParameterDefaultValues = rpt.DataDefinition.ParameterFields[0].CurrentValues;
            //            //CrystalDecisions.ReportAppServer.DataDefModel.ISCRParameterFieldRangeValue.EndValue

            //            btnReportObjects.AppendText("\n ");
            //            y++;
            //        }
            //    }

            //    btnReportObjects.AppendText(" 'End' \n");
            //    x++;
            //}
            #endregion Commented
        }

        public Boolean isParameterDynamic(CrystalDecisions.CrystalReports.Engine.ReportDocument rpt, int iCnt, bool YorN)
        {
            if (rpt.DataDefinition.ParameterFields[iCnt].Attributes != null && rpt.DataDefinition.ParameterFields[iCnt].Attributes.ContainsKey("IsDCP"))
            {
                Hashtable objAttributes = rpt.DataDefinition.ParameterFields[iCnt].Attributes;
                YorN = (Boolean)objAttributes["IsDCP"];
                return YorN;
            }
            return YorN;
        }

        private void getDiscreteValues(CrystalDecisions.ReportAppServer.DataDefModel.ISCRParameterField paramfield)
        {
            string textBox1 = "\n"; //String.Empty;
            btnReportObjects.Text += "Discrete Param Name: ";
            string name = paramfield.Name + "\n";
            int currValCount = paramfield.InitialValues.Count;
            int defValCount = paramfield.DefaultValues.Count;

            if (defValCount > 0)  //this parameter has default values
            #region DefCount
            {
                btnReportObjects.AppendText(paramfield.Name.ToString());
                foreach (ParameterFieldDiscreteValue discreteDefaultVal in paramfield.DefaultValues)
                {
                    //textBox1 = "Descrete Value: " + discreteDefaultVal.Value.ToString();
                    //btnReportObjects.Text += textBox1;

                    textBox1 = ": " + discreteDefaultVal.Value.ToString();
                    btnReportObjects.Text += textBox1;
                    btnReportObjects.AppendText("\n");
                    if (currValCount > 0)
                    {
                        textBox1 = "  Default Value: ";
                        foreach (ParameterFieldDiscreteValue CurrentInitialVal in paramfield.InitialValues)
                        { // Always only going to be 1
                            textBox1 += CurrentInitialVal.Value.ToString();
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText(", ");

                            // I think I have to be logged on first
                            if (paramfield.BrowseField != null)
                            {
                                paramfield.BrowseField.LongName.ToString();
                            }
                        }
                    }
                    if (discreteDefaultVal.Description != null)
                    {
                        textBox1 += "\nDescription: " + discreteDefaultVal.Description.ToString();
                    }
                    else
                        textBox1 += "\nDescription:";
                    //btnReportObjects.Text += textBox1;
                    btnReportObjects.AppendText("\n");
                }
                btnReportObjects.AppendText("\n");
            #endregion DefCount
            }
            else
            {
                //isParameterDynamic(rpt, iCnt, YorN);
                btnReportObjects.AppendText(paramfield.Name.ToString());

                if (paramfield.ParameterType.ToString() == "crParameterFieldTypeStoredProcedureParameter")
                    btnReportObjects.AppendText(": Store Procedure Parameter \nBased on field: " + paramfield.FormulaForm + "\n");

                if (paramfield.ParameterType.ToString() == "crParameterFieldTypeReportParameter")
                {
                    // provided by DEV to tell if the param is dynamic or not
                    if (rpt.DataDefinition.ParameterFields[iCnt].Attributes != null && rpt.DataDefinition.ParameterFields[iCnt].Attributes.ContainsKey("IsDCP"))
                    {
                        Hashtable objAttributes = rpt.DataDefinition.ParameterFields[iCnt].Attributes;
                        YorN = (Boolean)objAttributes["IsDCP"];
                    }
                    if (YorN)
                    {
                        if ((dynamic)paramfield.Usage == 25)
                            btnReportObjects.AppendText(": Dynamic Cascading Parameter ( LOV )\nBased on field: " + paramfield.Description.ToString() + "\n"); //.Remove(0, 6) + "\n"); // paramfield.FormulaForm + "\n");
                        else
                            btnReportObjects.AppendText(": Dynamic Parameter \nBased on field: " + paramfield.Description.ToString() + "\n"); //.Remove(0, 6) + "\n"); // paramfield.FormulaForm + "\n");
                        //btnReportObjects.AppendText(": No Initial Value \n");
                    }
                    else
                        btnReportObjects.AppendText(": Crystal Parameter \nBased on field: " + paramfield.FormulaForm + "\n");
                }

                if (paramfield.ParameterType.ToString() == "crParameterFieldTypeQueryParameter")
                    btnReportObjects.AppendText(": Query Parameter \nBased on field: " + paramfield.FormulaForm + "\n");

                if (paramfield.ParameterType.ToString() == "crParameterFieldTypeConnectionParameter")
                    btnReportObjects.AppendText(": Connection Parameter \nBased on field: " + paramfield.FormulaForm + "\n");

                if (paramfield.ParameterType.ToString() == "crParameterFieldTypeMetaDataParameter")
                    btnReportObjects.AppendText(": MetaData Parameter \nBased on field: " + paramfield.FormulaForm + "\n");
            }
        }

        private void getRangeValues(CrystalDecisions.ReportAppServer.DataDefModel.ParameterField paramfield)
        {
            string textBox1 = "\n"; // String.Empty;
            string name = paramfield.Name;
            int currValCount = paramfield.CurrentValues.Count;
            int defValCount = paramfield.DefaultValues.Count;
            int z = 0;

            btnReportObjects.Text += "Range Param Name: ";
            //isParameterDynamic(rpt, iCnt, YorN);
            btnReportObjects.AppendText(paramfield.Name.ToString());

            if (paramfield.ParameterType.ToString() == "crParameterFieldTypeStoredProcedureParameter")
                btnReportObjects.AppendText(": Store Procedure Parameter \nBased on field: " + paramfield.FormulaForm + "\n");

            if (paramfield.ParameterType.ToString() == "crParameterFieldTypeReportParameter")
            {
                // provided by DEV to tell if the param is dynamic or not
                if (rpt.DataDefinition.ParameterFields[iCnt].Attributes != null && rpt.DataDefinition.ParameterFields[iCnt].Attributes.ContainsKey("IsDCP"))
                {
                    Hashtable objAttributes = rpt.DataDefinition.ParameterFields[iCnt].Attributes;
                    YorN = (Boolean)objAttributes["IsDCP"];
                }
                if (YorN)
                {
                    if ((dynamic)paramfield.Usage == 25)
                        btnReportObjects.AppendText(": (Dynamic Cascading Parameter) ( LOV )\nBased on field: " + paramfield.Description.ToString() + "\n"); //.Remove(0, 6) + "\n"); // paramfield.FormulaForm + "\n");
                    else
                        btnReportObjects.AppendText(": (Dynamic Parameter) \nBased on field: " + paramfield.Description.ToString() + "\n"); //.Remove(0, 6) + "\n"); // paramfield.FormulaForm + "\n");
                    //btnReportObjects.AppendText(": No Initial Value \n");
                }
                else
                    btnReportObjects.AppendText(": (Crystal Parameter) \nBased on field: " + paramfield.FormulaForm + "\n");
            }

            if (paramfield.ParameterType.ToString() == "crParameterFieldTypeQueryParameter")
                btnReportObjects.AppendText("\n Type: Query Parameter \nBased on field: " + paramfield.FormulaForm + "\n");

            if (paramfield.ParameterType.ToString() == "crParameterFieldTypeConnectionParameter")
                btnReportObjects.AppendText("\n Type: Connection Parameter \nBased on field: " + paramfield.FormulaForm + "\n");

            if (paramfield.ParameterType.ToString() == "crParameterFieldTypeMetaDataParameter")
                btnReportObjects.AppendText("\n Type: MetaData Parameter \nBased on field: " + paramfield.FormulaForm + "\n");

            if (paramfield.ParameterType.ToString() == "crParameterFieldTypeReportParameter")
                btnReportObjects.AppendText("\n Type: MetaData Parameter \nBased on field: " + paramfield.FormulaForm + "\n");

            try
            {
                foreach (ParameterFieldDiscreteValue discreteDefaultVal in paramfield.DefaultValues)
                {
                    textBox1 = "Descrete Value: " + discreteDefaultVal.Value.ToString();
                    btnReportObjects.Text += textBox1;

                    if (z == 0)
                    {
                        foreach (ParameterFieldDiscreteValue CurrentInitialVal in paramfield.InitialValues)
                        { // Always only going to be 1
                            textBox1 += "\nDefault Value: " + CurrentInitialVal.Value.ToString();
                            btnReportObjects.Text += textBox1;
                            btnReportObjects.AppendText("\n");

                            // I think I have to be logged on first
                            if (paramfield.BrowseField != null)
                            {
                                paramfield.BrowseField.LongName.ToString();
                            }
                        }
                        z = 1;
                    }
                    if (discreteDefaultVal.Description != null)
                    {
                        textBox1 = "\nDescription: " + discreteDefaultVal.Description.ToString();
                    }
                    //else
                        //textBox1 = "\nDescription:";
                    //btnReportObjects.Text += textBox1;
                    btnReportObjects.AppendText("\n");
                    //MessageBox.Show(discreteDefaultVal.Value.ToString());
                }
            }
            catch
            { }
        }

        private void getRangeAndDiscreteValues(CrystalDecisions.ReportAppServer.DataDefModel.ParameterField paramfield)
        {
            string name = paramfield.Name;
            int currValCount = paramfield.CurrentValues.Count;
            int defValCount = paramfield.DefaultValues.Count;
            if (defValCount > 0)  //this parameter has default values
            {
                foreach (ParameterFieldRangeValue discreteDefaultVal in paramfield.DefaultValues)
                {
                    MessageBox.Show(discreteDefaultVal.BeginValue.ToString());

                    // I think I have to be logged on first
                    if (paramfield.BrowseField != null)
                    {
                        paramfield.BrowseField.LongName.ToString();
                    }
                }
            }
        }

        private void getSpecialFields(CrystalDecisions.CrystalReports.Engine.ReportDocument rpt)
        {
            string textBox1 = String.Empty;
            string textBox2 = String.Empty;
            string MyObjectType = ReportObjectComboBox1.SelectedItem.ToString();
            btnReportObjects.Text = "";
            int flcnt = 0;

            CrystalDecisions.ReportAppServer.ReportDefModel.ReportObjects rptObjs;

            rptObjs = rptClientDoc.ReportDefController.ReportObjectController.GetReportObjectsByKind(CrReportObjectKindEnum.crReportObjectKindField);
            //t = rptClientDoc.DataDefController.DataDefinition.FormulaFields.FindIndexOf(rptObjs);
            foreach (CrystalDecisions.ReportAppServer.ReportDefModel.ReportObject rptObj in rptObjs)
            {
                CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject fldObj;
                fldObj = (CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject)rptObj;
                string MySpecialType = fldObj.DataSourceName.ToString();

                switch (MySpecialType)
                {
                    case "ContentLocale":
                        textBox1 = "Content Locale";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "CurrentUserID":
                        textBox1 = "Current CE User ID";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "CurrentUserName":
                        textBox1 = "Current CE User Name";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "CurrentTimeZone":
                        textBox1 = "Current CE User Time Zone";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "DataDate":
                        textBox1 = "Data Date";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "DataTime":
                        textBox1 = "Data Time";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "DataTimeZone":
                        textBox1 = "Data Time Zone";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "FileAuthor":
                        textBox1 = "File Author";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "FileCreationDate":
                        textBox1 = "File Creation Date";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "Filename":
                        textBox1 = "File Path and Name";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "GroupNumber":
                        textBox1 = "Group Number";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "GroupSelection":
                        textBox1 = "Group Selection";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "HPageNumber":
                        textBox1 = "Horizontal Page Number";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "ModificationDate":
                        textBox1 = "Modification Date";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "ModificationTime":
                        textBox1 = "Modification Time";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "PageNofM":
                        textBox1 = "Page N of M";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "PageNumber":
                        textBox1 = "Page Number";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "PrintDate":
                        textBox1 = "Print Date";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "PrintTime":
                        textBox1 = "Print Time";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "PrintTimeZone":
                        textBox1 = "Print Time Zone";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "RecordNumber":
                        textBox1 = "Record Number";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "RecordSelection":
                        textBox1 = "Record Selection Formula";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "ReportComments":
                        textBox1 = "Report Comments";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "ReportTitle":
                        textBox1 = "Report Title";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "SelectionLocale":
                        textBox1 = "Selection Locale";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;
                    case "TotalPageCount":
                        textBox1 = "Total Page Count";
                        btnReportObjects.Text += textBox1;
                        btnReportObjects.AppendText("\n");
                        break;

                    default:

                        break;
                        ++flcnt;
                        btnCount.Text = flcnt.ToString();
                }
            }
        }

        private void getSectionPrintOrientation(CrystalDecisions.CrystalReports.Engine.ReportDocument rpt)
        {
            string textBox1 = String.Empty;
            string textBox2 = String.Empty;
            string MyObjectType = ReportObjectComboBox1.SelectedItem.ToString();
            btnReportObjects.Text = "";
            int flcnt = 0;
            int alphaCnt = 0;
            int crtoChr = 96;

            foreach (CrystalDecisions.CrystalReports.Engine.Area CrArea in rpt.ReportDefinition.Areas)
            {
                try
                {
                    switch (CrArea.Kind.ToString())
                    {
                        case "ReportHeader":
                            if (CrArea.Sections.Count > 1)
                            {
                                btnReportObjects.AppendText("Report Header:\n");
                                foreach (CrystalDecisions.CrystalReports.Engine.Section crSect in CrArea.Sections)
                                {
                                    textBox1 = crSect.Name.ToString();
                                    btnReportObjects.AppendText(": ");
                                    textBox1 +=  " - " + crSect.SectionFormat.PageOrientation.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText(" 'End' \n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();
                                }
                            }
                            else
                            {
                                foreach (CrystalDecisions.CrystalReports.Engine.Section crSect in CrArea.Sections)
                                {
                                    btnReportObjects.AppendText("Report Header: - ");
                                    textBox1 += crSect.SectionFormat.PageOrientation.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText(" 'End' \n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();
                                }
                            }
                            textBox1 = "";
                            break;
                        case "PageHeader":
                            if (CrArea.Sections.Count > 1)
                            {
                                btnReportObjects.AppendText("Page Header:\n");
                                foreach (CrystalDecisions.CrystalReports.Engine.Section crSect in CrArea.Sections)
                                {
                                    textBox1 = "Page Header " + crSect.Name.ToString().Substring(crSect.Name.Length - 1);
                                    btnReportObjects.AppendText(": ");
                                    textBox1 += " - " + crSect.SectionFormat.PageOrientation.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText(" 'End' \n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();
                                }
                            }
                            else
                            {
                                foreach (CrystalDecisions.CrystalReports.Engine.Section crSect in CrArea.Sections)
                                {
                                    btnReportObjects.AppendText("Page Header: - ");
                                    textBox1 += crSect.SectionFormat.PageOrientation.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText(" 'End' \n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();
                                }
                            }
                            textBox1 = "";
                            break;
                        case "GroupHeader":
                            int grpCount = 1;
                            if (CrArea.Sections.Count > 1)
                            {
                                btnReportObjects.AppendText("Group Header:\n"); // + grpCount + ":\n");
                                foreach (CrystalDecisions.CrystalReports.Engine.Section crSect in CrArea.Sections)
                                {
                                    textBox1 = "Group Header " + crSect.Name.ToString().Substring(crSect.Name.Length-1);
                                    btnReportObjects.AppendText(": ");
                                    textBox1 += " - " + crSect.SectionFormat.PageOrientation.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText(" 'End' \n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();
                                }
                                grpCount++;
                            }
                            else
                            {
                                foreach (CrystalDecisions.CrystalReports.Engine.Section crSect in CrArea.Sections)
                                {
                                    btnReportObjects.AppendText("Group Header " + crSect.Name.ToString().Substring(crSect.Name.Length - 1) + " - ");
                                    textBox1 += crSect.SectionFormat.PageOrientation.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText(" 'End' \n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();
                                }
                            }
                            textBox1 = "";
                            break;
                        case "Detail":
                            if (CrArea.Sections.Count > 1)
                            {
                                alphaCnt = 1;
                                int MyEnum;
                                int MyENUM1;

                                btnReportObjects.AppendText("Detail:\n");
                                foreach (CrystalDecisions.CrystalReports.Engine.Section crSect in CrArea.Sections) // "DetailSection1"
                                {
                                    textBox1 = "Detail " + crSect.Name.ToString().Substring(13) + ": ";
                                    btnReportObjects.AppendText(": ");
                                    textBox1 += " - " + crSect.SectionFormat.PageOrientation.ToString();

                                    bool myNum = Int32.TryParse(crSect.Name.ToString().Substring(13), out MyENUM1); // 1 = a

                                    // this determines if the name is a or aa. MyEnum = 1 ='s aa
                                    MyEnum = (((MyENUM1) / 27) % 40); // determines the leading letter for progressive sections
                                    char b, c;
                                    
                                    if (MyEnum != 0) 
                                    {
                                        MyENUM1 = (MyENUM1 % 27) + 96 + MyEnum; // could be htis one causing the problem
                                        if (MyENUM1 > 27 + (96 * MyEnum))
                                        {
                                            MyENUM1 = (MyENUM1 % 27) + 96 + MyEnum;
                                            c = (char)(MyENUM1 + MyEnum);
                                            MyEnum = 96 + MyEnum;
                                            b = (char)MyEnum;

                                        }
                                        else
                                        { // this is aa
                                            c = (char)(MyENUM1 + MyEnum); 
                                            MyEnum = 96 + MyEnum;
                                            b = (char)MyEnum;
                                        }

                                        btnReportObjects.Text += textBox1 + " : " + b + c + " 'End' \n";
                                    }
                                    else // a to z
                                    {
                                        MyENUM1 = MyENUM1 + crtoChr;
                                        c = (char)MyENUM1;
                                        //MessageBox.Show(c.ToString());
                                        btnReportObjects.Text += textBox1 + " : " + c + " 'End' \n";
                                    }
                                    btnCount.Text = flcnt.ToString();
                                    ++flcnt;
                                }
                            }
                            else
                            {
                                foreach (CrystalDecisions.CrystalReports.Engine.Section crSect in CrArea.Sections)
                                {
                                    btnReportObjects.AppendText(crSect.Name.ToString()); 
                                    textBox1 += crSect.SectionFormat.PageOrientation.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText(" 'End' \n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();
                                }
                            }
                            textBox1 = "";
                            break;
                        case "GroupFooter":
                            if (CrArea.Sections.Count > 1)
                            {
                                btnReportObjects.AppendText("Group Footer #" + CrArea.Name.ToString().Substring(CrArea.Name.Length - 1) + " - ");
                                foreach (CrystalDecisions.CrystalReports.Engine.Section crSect in CrArea.Sections)
                                {
                                    textBox1 = crSect.Name.ToString();
                                    btnReportObjects.AppendText(": ");
                                    textBox1 += " - " + crSect.SectionFormat.PageOrientation.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText(" 'End' \n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();
                                }
                            }
                            else
                            {
                                foreach (CrystalDecisions.CrystalReports.Engine.Section crSect in CrArea.Sections)
                                {
                                    btnReportObjects.AppendText("Group Footer #" + CrArea.Name.ToString().Substring(CrArea.Name.Length - 1) + " - ");
                                    textBox1 += crSect.SectionFormat.PageOrientation.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText(" 'End' \n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();
                                }
                            }
                            textBox1 = "";
                            break;
                        case "ReportFooter":
                            if (CrArea.Sections.Count > 1)
                            {
                                btnReportObjects.AppendText("Report Footer:\n");
                                foreach (CrystalDecisions.CrystalReports.Engine.Section crSect in CrArea.Sections)
                                {
                                    textBox1 = crSect.Name.ToString();
                                    btnReportObjects.AppendText(": ");
                                    textBox1 += " - " + crSect.SectionFormat.PageOrientation.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText(" 'End' \n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();
                                }
                            }
                            else
                            {
                                foreach (CrystalDecisions.CrystalReports.Engine.Section crSect in CrArea.Sections)
                                {
                                    btnReportObjects.AppendText("Report Footer: - ");
                                    textBox1 += crSect.SectionFormat.PageOrientation.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText(" 'End' \n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();
                                }
                            }
                            textBox1 = "";
                            break;
                        case "PageFooter":
                            if (CrArea.Sections.Count > 1)
                            {
                                btnReportObjects.AppendText("Page Footer:\n");
                                foreach (CrystalDecisions.CrystalReports.Engine.Section crSect in CrArea.Sections)
                                {
                                    textBox1 = crSect.Name.ToString();
                                    btnReportObjects.AppendText(": ");
                                    textBox1 += " - " + crSect.SectionFormat.PageOrientation.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText(" 'End' \n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();
                                }
                            }
                            else
                            {
                                foreach (CrystalDecisions.CrystalReports.Engine.Section crSect in CrArea.Sections)
                                {
                                    btnReportObjects.AppendText("Page Footer: - ");
                                    textBox1 += crSect.SectionFormat.PageOrientation.ToString();
                                    btnReportObjects.Text += textBox1;
                                    btnReportObjects.AppendText(" 'End' \n");
                                    ++flcnt;
                                    btnCount.Text = flcnt.ToString();
                                }
                            }
                            textBox1 = "";
                            break;
                    }

                }
                catch
                {
                    btnReportObjects.AppendText("More than one Section in Area. 'End' \n");
                }
            }
        }

        private void getHyperlinks(CrystalDecisions.CrystalReports.Engine.ReportDocument rpt)
        {
            string textBox1 = String.Empty;
            string MyObjectType = ReportObjectComboBox1.SelectedItem.ToString();

            btnReportObjects.Text = "";
            foreach (CrystalDecisions.ReportAppServer.ReportDefModel.ReportObject rptObj in rptClientDoc.ReportDefController.ReportObjectController.GetAllReportObjects())
            {
                CrystalDecisions.ReportAppServer.ReportDefModel.ObjectFormat objfmt;
                objfmt = rptObj.Format;
                switch (objfmt.HyperlinkType)
                {
                    case CrHyperlinkTypeEnum.crHyperlinkTypeCrystalReport:
                        {
                            try
                            {
                                textBox1 = rptObj.Name.ToString();
                                textBox1 += ": " + rptObj.Format.HyperlinkText.ToString();
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.AppendText(" 'End' \n");
                            }
                            catch (Exception ex)
                            {
                                //MessageBox.Show("ERROR: " + ex.Message);
                            }
                            break;
                        }
                    case CrHyperlinkTypeEnum.crHyperlinkTypeDrilldown:
                        {
                            try
                            {
                                textBox1 = rptObj.Name.ToString();
                                textBox1 += ": Report Part Drill Down - DHTML only".ToString();
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.AppendText(" 'End' \n");
                            }
                            catch (Exception ex)
                            {
                                //MessageBox.Show("ERROR: " + ex.Message);
                            }
                            break;
                        }
                    case CrHyperlinkTypeEnum.crHyperlinkTypeEmail:
                        {
                            try
                            {
                                textBox1 = rptObj.Name.ToString();
                                textBox1 += ": " + rptObj.Format.HyperlinkText.ToString();
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.AppendText(" 'End' \n");
                            }
                            catch (Exception ex)
                            {
                                //MessageBox.Show("ERROR: " + ex.Message);
                            }
                            break;
                        }
                    case CrHyperlinkTypeEnum.crHyperlinkTypeEmailFieldValue:
                        {
                            try
                            {
                                textBox1 = rptObj.Name.ToString();
                                textBox1 += ": " + rptObj.Format.HyperlinkText.ToString();
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.AppendText(" 'End' \n");
                            }
                            catch (Exception ex)
                            {
                                // MessageBox.Show("ERROR: " + ex.Message);
                            }
                            break;
                        }
                    case CrHyperlinkTypeEnum.crHyperlinkTypeHtml:
                        {
                            try
                            {
                                textBox1 = rptObj.Name.ToString();
                                textBox1 += ": " + rptObj.Format.HyperlinkText.ToString();
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.AppendText(" 'End' \n");
                            }
                            catch (Exception ex)
                            {
                                //MessageBox.Show("ERROR: " + ex.Message);
                            }
                            break;
                        }
                    case CrHyperlinkTypeEnum.crHyperlinkTypeReportObject:
                        {
                            try
                            {
                                textBox1 = rptObj.Name.ToString();
                                textBox1 += ": Another Report Object - DHTML only".ToString();
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.AppendText(" 'End' \n");
                            }
                            catch (Exception ex)
                            {
                                //MessageBox.Show("ERROR: " + ex.Message);
                            }
                            break;
                        }
                    case CrHyperlinkTypeEnum.crHyperlinkTypeUndefined:
                        {
                            //try
                            //{
                            //    textBox1 = rptObj.Name.ToString();
                            //    textBox1 += ": " + rptObj.Format.HyperlinkText.ToString();
                            //    btnReportObjects.Text += textBox1;
                            //    btnReportObjects.AppendText(" 'End' \n");
                            //}
                            //catch (Exception ex)
                            //{
                            //    //MessageBox.Show("ERROR: " + ex.Message);
                            //}
                            break;
                        }
                    case CrHyperlinkTypeEnum.crHyperlinkTypeWebsite:
                        {
                            try
                            {
                                textBox1 = rptObj.Name.ToString();
                                textBox1 += ": " + rptObj.Format.HyperlinkText.ToString();
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.AppendText(" 'End' \n");
                            }
                            catch (Exception ex)
                            {
                                //MessageBox.Show("ERROR: " + ex.Message);
                            }
                            break;
                        }
                    case CrHyperlinkTypeEnum.crHyperlinkTypeWebsiteFieldValue:
                        {
                            try
                            {
                                textBox1 = rptObj.Name.ToString();
                                textBox1 += ": " + rptObj.Format.HyperlinkText.ToString();
                                btnReportObjects.Text += textBox1;
                                btnReportObjects.AppendText(" 'End' \n");
                            }
                            catch (Exception ex)
                            {
                                //MessageBox.Show("ERROR: " + ex.Message);
                            }
                            break;
                        }
                }
            }
        
        }

        void report_FormatSection(FormatSectionEventArgs e)
        {
            //crystalReportViewer1.ShowProgressAnimation(false);

            //Console.WriteLine("report_FormatSection");
            //bool isEndOfGroup = e.IsEndOfGroup;
            //bool isRepeatGroupHeader = e.IsRepeatGroupHeader;
            //bool isStartOfGroup = e.IsStartOfGroup;
            //Console.WriteLine("isEndOfGroup:" + isEndOfGroup);
            //Console.WriteLine("isRepeatGroupHeader:" + isRepeatGroupHeader);
            //Console.WriteLine("isStartOfGroup:" + isStartOfGroup);
            //Console.WriteLine("section number:" + rpt.ReportDefinition.Sections[0].Name);
            ////report.ReportDefinition.Sections[0].SectionFormat.BackgroundColor = System.Drawing.Color.Green;
            //aa = "formatsection";           
        }

        static string aa = "";

        private static void crpe_FieldMapping(CrystalDecisions.CrystalReports.Engine.FieldMappingEventArgs fieldMappingargs)
        {
            //Console.WriteLine("report_FieldMapping");
            fieldMappingargs.ReportFieldsMappings[0].FieldName = "Contact Last Name";
            fieldMappingargs.ReportFieldsMappings[0].MappingToFieldIndex = 1;
            fieldMappingargs.ReportFieldsMappings[0].TableName = "customer";
        }

        void report_NoData(FormatPageEventArgs e)
        {
            Console.WriteLine("report_NoData," + e.PageNumber);
        }

        static void report_NoData2(FormatPageEventArgs e)
        {
            Console.WriteLine("report_NoData2," + e.PageNumber);
        }

        void report_BeforeFormatPage(FormatPageEventArgs e)
        {
            Console.WriteLine("report_BeforeFormatPage," + e.PageNumber);
            rpt.ReportDefinition.ReportObjects[0].Left = 10;
            Console.WriteLine("report Height:" + rpt.ReportDefinition.ReportObjects[0].Height);
        }

        void report_AfterFormatPage(FormatPageEventArgs e)
        {
            Console.WriteLine("report_AfterFormatPage," + e.PageNumber);
            Console.WriteLine("table name:" + rpt.Database.Tables[0].Name);
        }

        private void FieldMapping_Click(object sender, EventArgs e)
        {
            rptClientDoc = new CrystalDecisions.ReportAppServer.ClientDoc.ReportClientDocument(); // ReportClientDocumentClass();

            rpt.Load(@"D:\CPP Net 2010\RAS2010_CsharpPrinter\FieldMappingReport2.rpt");
            rptClientDoc = rpt.ReportClientDocument;

            try
            {
                //rpt.AfterFormatPage += new FormatPageEventHandler(report_AfterFormatPage);
                //rpt.BeforeFormatPage += new FormatPageEventHandler(report_BeforeFormatPage);
                //rpt.NoData += new FormatPageEventHandler(report_NoData);

                //rpt.FormatSection += new FormatSectionEventHandler(report_FormatSection);

                EventEnabledArgs enableArgs = new EventEnabledArgs();
                //enableArgs.FormattingEnabled = true;

                rpt.EnableEvent(enableArgs);

                testSetSQLCommandTable_CRPE(rpt);
            }
            finally
            {
                //rpt.AfterFormatPage -= new FormatPageEventHandler(report_AfterFormatPage);
                //rpt.BeforeFormatPage -= new FormatPageEventHandler(report_BeforeFormatPage);
                //rpt.NoData -= new FormatPageEventHandler(report_NoData);
                //rpt.NoData -= new FormatPageEventHandler(report_NoData2);
                //rpt.FieldMapping -= new FieldMappingEventHandler(crpe_FieldMapping);
                //rpt.FormatSection -= new FormatSectionEventHandler(report_FormatSection);

                crystalReportViewer1.ShowProgressAnimation(false);

                //rpt.ExportToDisk(ExportFormatType.CrystalReport, @"D:\CPP Net 2010\RAS2010_CsharpPrinter\test1.rpt");
                rpt.SaveAs(@"D:\CPP Net 2010\RAS2010_CsharpPrinter\test.rpt", false);

                rpt.Close();             
            }  
         
/*            CrystalDecisions.ReportAppServer.DataDefModel.FieldMappingInfoList myMappingList = new FieldMappingInfoList();

            CrystalDecisions.ReportAppServer.DataDefModel.FieldMappingInfo newConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.FieldMappingInfo();
            CrystalDecisions.ReportAppServer.DataDefModel.FieldMappingInfo oldConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.FieldMappingInfo();
            //CrystalDecisions.CrystalReports.Engine.ReportDocument crDocMapping = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            rpt.FieldMapping += new FieldMappingEventHandler(crDocMapping_FieldMapping);

            rpt.ExportToDisk(ExportFormatType.CrystalReport, @"D:\CPP Net 2010\RASXIR2Printer2K800\abc.rpt");

            //oldConnInfo = rptClientDoc.DataDefController.Database.f .FieldMapping; 
            //for (int I = 0; I < oldConnInfos.Count; I++)
            //{
            //    oldConnInfo = oldConnInfos[I];
            //    newConnInfo.Attributes = QE_Details;
            //    newConnInfo.Kind = CrystalDecisions.ReportAppServer.DataDefModel.CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            //    rcd.DatabaseController.ReplaceConnection(oldConnInfo, newConnInfo, null, CrystalDecisions.ReportAppServer.DataDefModel.CrDBOptionsEnum.crDBOptionUseDefault);
            //}

            //string connString = "Provider=SQLOLEDB;Data Source=dwcb12003;Database=xtreme;User ID=sa;Password=1Oem2000";
*/
        }

        static void testSetSQLCommandTable_CRPE(CrystalDecisions.CrystalReports.Engine.ReportDocument rpt)
        {
            //CrystalDecisions.CrystalReports.Engine.ReportDocument rpt = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            //ISCDReportClientDocument rcd;

            //rcd = rpt.ReportClientDocument;

            CrystalDecisions.Shared.ConnectionInfo crConnInfo = new CrystalDecisions.Shared.ConnectionInfo();
            //CrystalDecisions.CrystalReports.Engine.ReportDocument crpe = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            //crpe.Load(@"D:\CPP Net 2010\ConsFieldMapping\ConsFieldMapping\Report.rpt");
            // crpe.FieldMapping += new CrystalDecisions.CrystalReports.Engine.FieldMappingEventHandler(crpe_FieldMapping);
            rpt.FieldMapping += new CrystalDecisions.CrystalReports.Engine.FieldMappingEventHandler(crpe_FieldMapping);
            CrystalDecisions.CrystalReports.Engine.EventEnabledArgs enableArgs = new CrystalDecisions.CrystalReports.Engine.EventEnabledArgs();
            enableArgs.FieldMappingEnabled = true;
            // enableArgs.FormattingEnabled = true;

            rpt.EnableEvent(enableArgs);

            CrystalDecisions.ReportAppServer.Controllers.DatabaseController databaseController = rpt.ReportClientDocument.DatabaseController;
            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfos connectionInfos = databaseController.GetConnectionInfos(null);
            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo oldConnectionInfo = connectionInfos[0];
            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo newConnectionInfo = CreateConnectionInfo();
            databaseController.ReplaceConnection(oldConnectionInfo, newConnectionInfo, null, CrDBOptionsEnum.crDBOptionMapFieldByRowsetPosition);

            ISCRTable oldTable = (ISCRTable)databaseController.Database.Tables[0];
            CommandTable newTable = new CommandTable();
            newTable.Alias = "Command";
            newTable.Name = "Command";
            newTable.QualifiedName = "Command";
            newTable.ConnectionInfo = newConnectionInfo;
            newTable.CommandText = @" SELECT 'Customer'.'Contact Last Name'  FROM 'xtreme'.'dbo'.'Customer' 'Customer'";
            //newTable.CommandText = @"SELECT 'Checks'.'CheckID', 'Checks'.'LoopType', 'Checks'.'RunType' FROM 'astellastest'.'dbo'.'Checks' 'Checks' WHERE 'Checks'.'CheckID'<100";

            databaseController.SetTableLocation(oldTable, newTable);
            //IsRpt = false;
        }

        public static CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo CreateConnectionInfo()
        {
            PropertyBag pBag = new PropertyBag();
            PropertyBag crConnProperties = new PropertyBag();
            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo crConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();

            // Set the userID and password values.
            crConnInfo.UserName = "sa";
            crConnInfo.Password = "1Oem2000";
            crConnInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;

            pBag.set_StringValue("Database DLL", "crdb_odbc.dll");
            pBag.set_StringValue("QE_DatabaseName", "xtreme");
            pBag.set_StringValue("QE_DatabaseType", "ODBC (RDO)");
            pBag.set_StringValue("QE_ServerDescription", "Dwilliams1 - VAND00471463A");

            crConnProperties = new PropertyBag();

            crConnProperties.set_StringValue("Trusted Connection", "false");
            crConnProperties.set_StringValue("Server", "Dwilliams1 - VAND00471463A");

            pBag.Add("QE_LogonProperties", crConnProperties);

            crConnInfo.Attributes = pBag;

            return crConnInfo;
        }

        void crDocMapping_FieldMapping(FieldMappingEventArgs e)
        {
            throw new NotImplementedException();
        }

        private void PageEvent_Click(object sender, EventArgs e)
        {
            //CrystalDecisions.CrystalReports.Engine.ReportDocument rpt = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            ISCDReportClientDocument rcd;

            rptClientDoc = rpt.ReportClientDocument;

            rcd = rptClientDoc;

            rpt.AfterFormatPage += new FormatPageEventHandler(report_AfterFormatPage);
            rpt.BeforeFormatPage += new FormatPageEventHandler(report_BeforeFormatPage);
            rpt.NoData += new FormatPageEventHandler(report_NoData);

            EventEnabledArgs enableArgs = new EventEnabledArgs();
            enableArgs.FieldMappingEnabled = true;
            enableArgs.FormattingEnabled = true;

            rpt.EnableEvent(enableArgs);
            // MessageBox.Show (e.PageNumber.ToString() + " " + (e.PageNumber % 2).ToString());
            //if (e.PageNumber % 2 == 0)
            //{
            //    rpt.ReportDefinition.Sections["Section3"].SectionFormat.BackgroundColor = Color.Red;

            //}
            //else
            //{
            //    rpt.ReportDefinition.Sections["Section3"].SectionFormat.BackgroundColor = Color.Blue;
            //}
            //  MessageBox.Show("before format page - " + e.PageNumber); 
            //throw new NotImplementedException();

        }

        private void AddChart_Click(object sender, EventArgs e)
        {

            //TotalUnitsByRadioTypeGraph GraphReport = new TotalUnitsByRadioTypeGraph();
            //CrystalDecisions.ReportAppServer.ClientDoc.ISCDReportClientDocument rcd = GraphReport.ReportClientDocument;
            //CrystalDecisions.ReportAppServer.Controllers.ReportObjectController controller = rcd.ReportDefController.ReportObjectController;
            //CrystalDecisions.ReportAppServer.ReportDefModel.ReportObjects rptObjects = controller.GetAllReportObjects();
            //CrystalDecisions.ReportAppServer.ReportDefModel.ChartObject chartObject;

            CrystalDecisions.ReportAppServer.ReportDefModel.ChartObject boChartObject;
            CrystalDecisions.ReportAppServer.ReportDefModel.ChartStyle boChartStyle;
            CrystalDecisions.ReportAppServer.ReportDefModel.Section boSection;
            CrystalDecisions.ReportAppServer.DataDefModel.Fields boFields;
            CrystalDecisions.ReportAppServer.DataDefModel.Field boField;
            CrystalDecisions.ReportAppServer.DataDefModel.SummaryField boSummaryField;
           
            int boFieldIndex;

            //rpt.Load("D:\\CPP Net\\RASXIR2Printer2K8\\rcapi_cs_add_chart\\SimpleRCAPIReport.rpt");
            //rptClientDoc = rpt.ReportClientDocument;

            boFields = rptClientDoc.DatabaseController.Database.Tables[0].DataFields;

            //Create a chart
            boChartObject = new CrystalDecisions.ReportAppServer.ReportDefModel.ChartObject();
            //create a bar chart style
            boChartStyle = new CrystalDecisions.ReportAppServer.ReportDefModel.ChartStyle();
            boChartStyle.Type = CrystalDecisions.ReportAppServer.ReportDefModel.CrChartStyleTypeEnum.crChartStyleTypeBar;
            //CrystalDecisions.ReportAppServer.ReportDefModel.CrBarChartStyleSubtypeEnum.crBarChartStyleSubtypePercent
            
                //set the chart style to bar chart
            boChartObject.ChartStyle = boChartStyle;

            boChartStyle.TextOptions.Title = "Don Chart - Series Title";
            boChartStyle.TextOptions.DataTitle = "Don Chart Data Title";
            boChartStyle.TextOptions.Footnote = "footnote Title";

            //set the chart type to advanced chart
            boChartObject.ChartDefinition.ChartType = CrystalDecisions.ReportAppServer.ReportDefModel.CrChartTypeEnum.crChartTypeDetail;
            //set Customer Name field as condition field
            //get the Customer Name field
            boFieldIndex = boFields.Find("Customer Name",
                CrystalDecisions.ReportAppServer.DataDefModel.CrFieldDisplayNameTypeEnum.crFieldDisplayNameName,
                CrystalDecisions.ReportAppServer.DataDefModel.CeLocale.ceLocaleUserDefault);
            boField = (CrystalDecisions.ReportAppServer.DataDefModel.Field)boFields[boFieldIndex];
            boChartObject.ChartDefinition.ConditionFields.Add(boField);
            boField = null;
            //set Last Year's Sales as data field
            //get {Customer.Last Year's Sales field}
            boFieldIndex = boFields.Find("Last Year's Sales",
                CrystalDecisions.ReportAppServer.DataDefModel.CrFieldDisplayNameTypeEnum.crFieldDisplayNameName,
                CrystalDecisions.ReportAppServer.DataDefModel.CeLocale.ceLocaleUserDefault);
            boField = (CrystalDecisions.ReportAppServer.DataDefModel.Field)boFields[boFieldIndex];
            //create a Sum({Customer.Last Year's Sales})
            boSummaryField = new CrystalDecisions.ReportAppServer.DataDefModel.SummaryField();
            boSummaryField.SummarizedField = boField;
            boSummaryField.Operation = CrystalDecisions.ReportAppServer.DataDefModel.CrSummaryOperationEnum.crSummaryOperationSum;
            boSummaryField.Type = boField.Type;
            //add summary field to report client document
            rptClientDoc.DataDefController.SummaryFieldController.Add(-1, boSummaryField);
            boChartObject.ChartDefinition.DataFields.Add(boSummaryField);
            //set chart coordinates and dimensions (0, 0), width = 7 inches, height = 5 inches
            boChartObject.Left = 0;
            boChartObject.Top = 0;
            boChartObject.Width = 7 * 1440;      // 1 inch = 1440 twips
            boChartObject.Height = 5 * 1440;
            //boChartObject.ChartDefinition.ConditionFields.
            //get report header section
            boSection = rptClientDoc.ReportDefinition.ReportHeaderArea.Sections[0];
            //set chart report area to report header
            boChartObject.ChartReportArea = CrystalDecisions.ReportAppServer.ReportDefModel.CrAreaSectionKindEnum.crAreaSectionKindReportHeader;
            //add chart in the report header
            rptClientDoc.ReportDefController.ReportObjectController.Add(boChartObject, boSection, -1);

            MessageBox.Show("Chart Added", "RAS", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private static bool CreateScaledImageFile(string strSourceImageFilename, string strDestinationImageFilename, int nMaximumWidth, int nMaximumHeight)
        {
            try
            {
                using (Image imageSource = Image.FromFile(strSourceImageFilename))
                {
                    double dOldAspectRatio = ((double)nMaximumWidth) / ((double)nMaximumHeight);
                    double dNewAspectRatio = ((double)imageSource.Width) / ((double)imageSource.Height);
                    int nNewWidth;
                    int nNewHeight;

                    if (dNewAspectRatio > dOldAspectRatio)
                    {
                        nNewWidth = nMaximumWidth;
                        nNewHeight = (int)(nMaximumWidth / dNewAspectRatio);        //  Shrink height to accomodate.
                    }
                    else
                    {
                        nNewWidth = (int)(nMaximumHeight * dNewAspectRatio);      //  Shrink width to accomodate.
                        nNewHeight = nMaximumHeight;
                    }

                    using (var bitmap = new Bitmap(nNewWidth, nNewHeight))
                    {
                        using (var graphics = Graphics.FromImage(bitmap))
                        {
                            graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
                            graphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
                            graphics.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.HighQuality;
                            graphics.DrawImage(imageSource, new Rectangle(0, 0, nNewWidth, nNewHeight));

                            bitmap.Save(strDestinationImageFilename);
                        }
                    }
                }
            }
            catch
            {
                MessageBox.Show("failed to save image");
                return false;
            }
            return true;
        }

        private void PictureData_Click(object sender, EventArgs e)
        {
            CrystalDecisions.ReportAppServer.ReportDefModel.PictureObject boPictureObject = new CrystalDecisions.ReportAppServer.ReportDefModel.PictureObject(); ;

            #region SageReplaceImage
            string strSourceImageFilename = @"D:\Atest\265722\DSC_2655.JPG"; // DSC_2655.JPG  earth prep
            //int nMaximumWidth = 300;
            //int nMaximumHeight = 100;
            string strScaledImageFilename = "D:\\Atest\\265722\\DSC_2655.bmp";

            /// <summary>
            /// Insert the custom letterhead where the *first* OLE Picture object appears within the report.
            /// </summary>
            //public void InsertCustomLetterhead()
            //{
            var objects = rptClientDoc.ReportDefController.ReportObjectController.GetAllReportObjects();

            foreach (CrystalDecisions.ReportAppServer.ReportDefModel.ReportObject oReportObject in objects)
            {
                if (oReportObject.Kind == CrystalDecisions.ReportAppServer.ReportDefModel.CrReportObjectKindEnum.crReportObjectKindPicture)
                {
                    var oPlaceholderPicture = oReportObject as CrystalDecisions.ReportAppServer.ReportDefModel.PictureObject;

                    int OrgImageHeight = oReportObject.Height;
                    int OrgImageWidth = oReportObject.Width;

                    if (oPlaceholderPicture != null)
                    {
                        #if true
                        //  Workaround for the problems described in the approach that should have worked below.
                        //  This can be used at least as an interim solution until such time as SAP addresses those issues.

                        //  Create a temporary image file with the desired scale.

                        //string strScaledImageFilename = Path.GetTempPath() + Guid.NewGuid().ToString() + ".bmp";

                        if (CreateScaledImageFile(strSourceImageFilename, strScaledImageFilename, OrgImageWidth, OrgImageHeight))
                        {
                            // not sure what this next line is for???
                            //TemporaryFilenames.Add( strScaledImageFilename );

                            //CrystalDecisions.ReportAppServer.ReportDefModel.GraphicObject2Class
                            var oNewPicture = (CrystalDecisions.ReportAppServer.ReportDefModel.PictureObject)oPlaceholderPicture.Clone(true);

                            var cf = new CrystalDecisions.ReportAppServer.ReportDefModel.ConditionFormula();
                            cf.Text = "\"" + strScaledImageFilename + "\"";

                            oNewPicture.Format.EnableCanGrow = false;
                            oNewPicture.GraphicLocationFormula = cf;
                            //oNewPicture.Width = 4320; // 4320
                            //oNewPicture.Height = 1440; //1440

                            btnReportObjects.Text = "\nOrg Heigth: " + oNewPicture.OriginalHeight.ToString() + " New Height: " + oNewPicture.Height.ToString();
                            btnReportObjects.Text += "\nOrg Width: " + oNewPicture.OriginalWidth.ToString() + " New Width: " + oNewPicture.Width.ToString();

                            // this works also but the condition formula is not set
                            //oNewPicture.Format.ConditionFormulas[CrObjectFormatConditionFormulaTypeEnum.crObjectFormatConditionFormulaTypeEnableCanGrow].Text = "false";

                            rptClientDoc.ReportDefController.ReportObjectController.Modify( oPlaceholderPicture, oNewPicture );

                            // this works and does update the report file with the condition formula.
                            oNewPicture.Format.EnableCanGrow = false;
                            rptClientDoc.ReportDefController.ReportObjectController.Modify(oPlaceholderPicture, oNewPicture);
                            IsRpt = false;

                        }
                        #else
                            //  This approach should be usable to scale the letterhead image, should SAP fix an apparent bug in the Crystal Reports Runtime
                            //  that causes 1) improper scaling and 2) the image to disappear altogether.

                            var oNewPicture = (CrystalDecisions.ReportAppServer.ReportDefModel.PictureObject) oPlaceholderPicture.Clone( true );
                            var cf = new CrystalDecisions.ReportAppServer.ReportDefModel.ConditionFormula();
                            cf.Text = "\"" + CustomLetterheadImageFilename + "\"";
                            oNewPicture.GraphicLocationFormula = cf;

                            try
                            {
                                Image image = Image.FromFile( CustomLetterheadImageFilename );

                                //  Set image size so that it is as large as possible within the placeholder image, while maintaining its aspect ratio.

                                double dOldAspectRatio = ((double) oPlaceholderPicture.Width) / ((double) oPlaceholderPicture.Height);
                                double dNewAspectRatio = ((double) image.Width) / ((double) image.Height);

                                if (dNewAspectRatio > dOldAspectRatio)
                                {
                                    oNewPicture.Height = (int) (oPlaceholderPicture.Width / dNewAspectRatio);        //  Shrink height to accomodate.
                                    oNewPicture.Width  = oPlaceholderPicture.Width;
                                }
                                else
                                {
                                    oNewPicture.Height = oPlaceholderPicture.Height;
                                    oNewPicture.Width  = (int) (oPlaceholderPicture.Height * dNewAspectRatio);      //  Shrink width to accomodate.
                                }
                            }
                            catch(Exception exception)
                            {
                                MessageBox.Show( string.Format("Caught exception (1):  {0}", exception.Message) );
                            }

                            ReportDocument.ReportClientDocument.ReportDefController.ReportObjectController.Modify( oPlaceholderPicture, oNewPicture );
                        #endif
                    }
                    
                    //  Only replacing the first picture, so exit loop.
                    break;
                }
            }

            #endregion SageReplaceImage


            #region Original
            //rpt.Load("D:\\CPP Net\\RASXIR2Printer\\oleobject.rpt");
            //rptClientDoc = rpt.ReportClientDocument;

            ////this is a bug for Nice I tracked, can't use \temp.temp\ for an image location - ADAPT01323018
            ////String MyfilePath = @"c:\temp\sample1.jpg";
            ////String MyfilePath = "C:\\temp.temp\\sample1.jpg";
            //String MyfilePath = "C:\\temp\\mansheart.jpg";

            ////Determine which section to add the picture field to - in this case the report header section
            //boSection = rptClientDoc.ReportDefController.ReportDefinition.PageFooterArea.Sections[0];

            //boPictureObject.Left = 1010;
            //boPictureObject.Width = 500;
            //boPictureObject.Height = 200;
            //boPictureObject.Top = 100;
            //boPictureObject.OriginalWidth = 50;
            //boPictureObject.OriginalHeight = 30;
            //boPictureObject.Name = "dontest";

            ////Add it to the report
            //boPictureObject = rptClientDoc.ReportDefController.ReportObjectController.ImportPicture(MyfilePath, boSection, 1, 1);

            //rpt.SaveAs("c:\\temp\\savedimage.rpt",true);
            //MessageBox.Show("c:\\temp\\savedimage.rpt", "RAS", MessageBoxButtons.OK, MessageBoxIcon.Information);
            #endregion Original
        }

        private void IntSecurity_Click(object sender, EventArgs e)
        {            
            //string connString = "Provider=SQLOLEDB;Data Source=dwcb12003;Database=xtreme;User ID=sa;Password=1Oem2000";

            rptClientDoc.DatabaseController.LogonEx("dwcb12003", "xtreme", "sb", "1Oem2000");

            GroupPath gp = new GroupPath();
            string tmp = String.Empty;
            rptClientDoc.RowsetController.GetSQLStatement(gp, out tmp);
            MessageBox.Show(tmp, "Data Source Set and SQL Statement", MessageBoxButtons.OK, MessageBoxIcon.Information);

        }

        private void GetFormula_Click(object sender, EventArgs e)
        {
            string myFF = "True and ";

            myFF += rpt.RecordSelectionFormula;

            rpt.RecordSelectionFormula = myFF.ToString();

            MessageBox.Show("my formula: " + myFF);

            //CrystalDecisions.ReportAppServer.DataDefModel.FormulaField ffc = new FormulaField(); //   CrystalDecisions.ReportAppServer.Controllers.FormulaFieldController();
            //CrystalDecisions.ReportAppServer.DataDefModel.FormulaField ffNew = new CrystalDecisions.ReportAppServer.DataDefModel.FormulaField();
            //CrystalDecisions.ReportAppServer.DataDefModel.FormulaField ffOld = new CrystalDecisions.ReportAppServer.DataDefModel.FormulaField();

            //try
            //{
            //    //Get the old field, this is the field defined in the report.
            //    ffOld = rptClientDoc.DataDefController.DataDefinition.FormulaFields.FindField(myFF, CrystalDecisions.ReportAppServer.DataDefModel.CrFieldDisplayNameTypeEnum.crFieldDisplayNameName);
            //    //'For Each ffOld In arpt.DataDefController.DataDefinition.FormulaFields
            //    //'    If ffOld.Name = asParameterName Then
            //    //'        Exit For
            //    //'    End If
            //    //'Next
            //    //If Not ffOld Is Nothing Then
            //    //Clone a new field and update values
            //    ffNew = ffOld.Clone();
            //    ffNew.Text = asParameterValue;
            //    ffc = rptClientDoc.DataDefController.FormulaFieldController;
            //    //Replace old with new
            //    ffc.Modify(ffOld, ffNew);

            //}
            //catch (Exception ex)
            //{
            //    MessageBox.Show("ERROR: " + ex.Message);
            //}            

        }

        private void SetSchema_Click(object sender, EventArgs e)
        {

            //rptClientDoc.DatabaseController.SetTableLocationByServerDatabaseName("Orders", "dwcb12003", "xtreme", "sb", "1Oem2000");
            rptClientDoc.DatabaseController.LogonEx("10.161.15.19", "xtreme", "sa", "1Oem2000");

            //Create the logon propertybag for the connection we wish to use
            CrystalDecisions.ReportAppServer.DataDefModel.PropertyBag logonDetails = new CrystalDecisions.ReportAppServer.DataDefModel.PropertyBag();
            logonDetails.Add("Auto Translate", -1);
            logonDetails.Add("Connect Timeout", 15);
            logonDetails.Add("Data Source", "dwcb12003");
            logonDetails.Add("General Timeout", 0);
            logonDetails.Add("Initial Catalog", "Orders");
            logonDetails.Add("Integrated Security", "True");
            logonDetails.Add("Locale Identifier", 1033);
            logonDetails.Add("OLE DB Services", -5);
            logonDetails.Add("Provider", "SQLOLEDB");
            logonDetails.Add("Use Encryption for Data", 0);
            logonDetails.Add("Owner", "dbo"); // schema

            //Create the QE (query engine) propertybag with the provider details and logon property bag.
            CrystalDecisions.ReportAppServer.DataDefModel.PropertyBag QE_Details = new CrystalDecisions.ReportAppServer.DataDefModel.PropertyBag();
            QE_Details.Add("Database DLL", "crdb_ado.dll");
            QE_Details.Add("QE_DatabaseName", "Orders");
            QE_Details.Add("QE_DatabaseType", "OLE DB (ADO)");
            QE_Details.Add("QE_LogonProperties", logonDetails);
            QE_Details.Add("QE_ServerDescription", "dwcb12003");
            QE_Details.Add("QE_SQLDB", "True");
            QE_Details.Add("SSO Enabled", "False");
            QE_Details.Add("Owner", "dbo");

            //CrystalDecisions.ReportAppServer.ClientDoc.ISCDReportClientDocument rcd = reportDocument.ReportClientDocument;
            CrystalDecisions.ReportAppServer.ClientDoc.ISCDReportClientDocument rcd = rptClientDoc;

            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo newConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo oldConnInfo;
            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfos oldConnInfos;

            oldConnInfos = rcd.DatabaseController.GetConnectionInfos(null);
            for (int I = 0; I < oldConnInfos.Count; I++)
            {
                oldConnInfo = oldConnInfos[I];
                newConnInfo.Attributes = QE_Details;
                newConnInfo.Kind = CrystalDecisions.ReportAppServer.DataDefModel.CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
                rcd.DatabaseController.ReplaceConnection(oldConnInfo, newConnInfo, null, CrystalDecisions.ReportAppServer.DataDefModel.CrDBOptionsEnum.crDBOptionUseDefault);
            }
            //rcd.DatabaseController.EndTransaction();
        }

        private void TableToCommand_Click(object sender, EventArgs e)
        {
            CrystalDecisions.CrystalReports.Engine.ReportDocument rpt = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            ISCDReportClientDocument rcd;
 
            rcd = rptClientDoc;

            rptClientDoc.DatabaseController.LogonEx("10.161.15.19", "xtreme", "sa", "1Oem2000");

            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo oldConninfo;
            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo newConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            CrystalDecisions.ReportAppServer.DataDefModel.Table oldTbl;
            CrystalDecisions.ReportAppServer.DataDefModel.CommandTable newTbl = new CommandTable();
            CrystalDecisions.ReportAppServer.DataDefModel.Table oldTbl1;
            CrystalDecisions.ReportAppServer.DataDefModel.CommandTable newTbl1 = new CommandTable();
            CrystalDecisions.ReportAppServer.DataDefModel.Table oldTbl2;
            CrystalDecisions.ReportAppServer.DataDefModel.CommandTable newTbl2 = new CommandTable();

            PropertyBag QEProps = new PropertyBag();
            PropertyBag logonProps = new PropertyBag();

            //Set the attributes for the logonPropsBag
            logonProps.Add("Database", "xtreme");
            logonProps.Add("DSN", "10.161.15.19");
            logonProps.Add("UseDSNProperties", "true");

            //Set the attributes
            QEProps.Add("Database DLL", "crdb_odbc.dll");
            QEProps.Add("QE_DatabaseName", "xtreme");
            QEProps.Add("QE_DatabaseType", "ODBC (RDO)");

            //Add the QE_LogonProperties we set in the logonProps Object
            QEProps.Add("QE_LogonProperties", logonProps);
            QEProps.Add("QE_ServerDescription", "10.161.15.19");
            QEProps.Add("QE_SQLDB", "True");
            QEProps.Add("SSO Enabled", "False");

            newConnInfo.Attributes = QEProps;
            newConnInfo.UserName = "sa";
            newConnInfo.Password = "1Oem2000";
            newConnInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;

            //oldTbl = (CrystalDecisions.ReportAppServer.DataDefModel.Table)rcd.Database.Tables[2]; // Alias = "Customer" Name = "Customer"
            //oldConninfo = oldTbl.ConnectionInfo.Clone(true); 
            oldTbl1 = (CrystalDecisions.ReportAppServer.DataDefModel.Table)rcd.Database.Tables[0]; // Alias = "Orders" Name = "Orders"
            oldConninfo = oldTbl1.ConnectionInfo.Clone(true);
            oldTbl2 = (CrystalDecisions.ReportAppServer.DataDefModel.Table)rcd.Database.Tables[1]; // Alias = "Orders_Detail" Name = "Orders Detail"
            oldConninfo = oldTbl1.ConnectionInfo.Clone(true);

            GroupPath gp = new GroupPath();
            gp.FromString("");
            string sql = String.Empty;
            rptClientDoc.RowsetController.GetSQLStatement(gp, out sql);
            //MessageBox.Show(sql.ToString());

            newTbl1.ConnectionInfo = newConnInfo;
            newTbl1.CommandText = "SELECT * from Orders";
            newTbl1.Name = "Orders";
            newTbl1.Alias = "Orders";
            
            rcd.DatabaseController.SetTableLocationEx(oldTbl1,newTbl1);
            oldTbl1 =(CrystalDecisions.ReportAppServer.DataDefModel.Table) rcd.Database.Tables[0].Clone(true);
            rcd.DatabaseController.SetTableLocationEx(oldTbl1, newTbl1);
            //MessageBox.Show(sql.ToString());

            newTbl1.ConnectionInfo = newConnInfo;
            newTbl1.CommandText = "SELECT * from Orders";
            newTbl1.Name = "Orders";
            newTbl1.Alias = "Orders";
            rcd.DatabaseController.SetTableLocation(oldTbl1, newTbl1);

            newTbl2.ConnectionInfo = newConnInfo;
            newTbl2.CommandText = "SELECT * from Orders_Detail";
            newTbl2.Name = "Orders_Detail";
            newTbl2.Alias = "Orders_Detail";
            rcd.DatabaseController.SetTableLocationEx(oldTbl2, newTbl2);

            //newTbl2.ConnectionInfo = newConnInfo;
            //newTbl2.CommandText = "SELECT * from Orders_Detail";
            //newTbl2.Name = "Orders_Detail";
            //newTbl2.Alias = "Orders_Detail";
            //rcd.DatabaseController.SetTableLocationEx(oldTbl2, newTbl2);


            //rcd.DatabaseController.SetTableLocationEx(oldTbl1, newTbl1);
            //oldTbl1 = (CrystalDecisions.ReportAppServer.DataDefModel.Table)rcd.Database.Tables[0].Clone(true); 
            //rcd.DatabaseController.SetTableLocationEx(oldTbl1, newTbl1);


            // save the report to a new folder
            rcd.SaveAs(rcd.DisplayName, "c:\\test\\", 0);
        }

        private void DataSet1_Click(object sender, EventArgs e)
        {
            //CrystalDecisions.CrystalReports.Engine.ReportDocument rpt = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            ISCDReportClientDocument rcd;

            rcd = rptClientDoc;
            rptClientDoc = rpt.ReportClientDocument;

            #region Text1
            //string connString = "Provider=SQLOLEDB;Data Source=VAND00471463A;Database=xtreme;User ID=sa;Password=1Oem2000";

            //rptClientDoc.DatabaseController.logon("sa", "1Oem2000");

            ////string sqlString = "Select * From Orders";
            ////string sqlString = @"SELECT ""Orders"".""Customer ID"", ""Orders"".""Order Date"" FROM ""xtreme"".""dbo"".""Orders"" ""Orders"" WHERE ""Orders"".""Customer ID"" = ?CustomerID";
            ////string sqlString2 = "Select * From \"Orders Detail\"";

            ////string sqlString = @"SELECT ""Orders"".""Order ID"", ""Orders"".""Order Amount"" FROM   ""xtreme"".""dbo"".""Orders"" ""Orders""";
            ////string sqlString2 = @"SELECT ""Orders Detail"".""Order ID"", ""Orders Detail"".""Product ID"", ""Orders Detail"".""Unit Price"", ""Orders Detail"".""Quantity"" FROM   ""xtreme"".""dbo"".""Orders Detail"" ""Orders Detail""";

            ////string sqlString = @"SELECT ""Employee"".""Last Name"", ""Employee"".""First Name"", ""Employee"".""Extension"", ""Employee"".""Position"", ""Employee"".""Birth Date"", ""Employee_Addresses"".""Address1"", ""Employee_Addresses"".""Address2"", ""Employee_Addresses"".""Region"", ""Employee_Addresses"".""City"", ""Employee_Addresses"".""Country"", ""Employee_Addresses"".""Postal Code"", ""Employee"".""Home Phone"", ""Employee"".""Notes"", ""Employee"".""Photo"" 
            ////    FROM ""xtreme"".""dbo"".""Employee"" ""Employee"" INNER JOIN ""xtreme"".""dbo"".""Employee Addresses"" ""Employee_Addresses"" ON ""Employee"".""Employee ID""=""Employee_Addresses"".""Employee ID""";

            //string sqlString = @"SELECT ""Customer"".""Customer Name"", ""Customer"".""Contact First Name"", ""Customer"".""Contact Last Name"" FROM ""xtreme"".""dbo"".""Customer"" ""Customer""";

            //System.Data.OleDb.OleDbConnection oleConn = new System.Data.OleDb.OleDbConnection(connString);
            //System.Data.OleDb.OleDbCommand cmd = oleConn.CreateCommand();
            ////cmd.Parameters.Add("CustomerID", System.Data.OleDb.OleDbType.Integer);
            ////cmd.Parameters["CustomerID"].Value = 1;
            //cmd.CommandText = sqlString;

            //System.Data.DataSet ds = new System.Data.DataSet();

            ////OleDbConnection oleConn = new OleDbConnection(connString);
            //OleDbDataAdapter oleAdapter = new OleDbDataAdapter(sqlString, oleConn);

            ////OleDbDataAdapter oleAdapter2 = new OleDbDataAdapter(sqlString2, oleConn);
            //DataTable dt1 = new DataTable("Customer");
            ////DataTable dt2 = new DataTable("Orders Detail");

            //oleAdapter.Fill(dt1);
            ////oleAdapter2.Fill(dt2);

            ////System.Data.DataSet ds = new System.Data.DataSet();
            //ds.Tables.Add(dt1);
            //ds.Tables[0].DefaultView.Sort = "Contact Last Name";
            ////ds.Tables.Add(dt2);
            ////ds.WriteXml("c:\\sc.xml", XmlWriteMode.WriteSchema);

            //rpt.SetDataSource(ds);
            #endregion Text1

            rptClientDoc = rpt.ReportClientDocument;

            //string connString = "Provider=SQLOLEDB;Data Source=10.161.15.19;Database=xtreme;User ID=sa;Password=1Oem2000";

            string connString = "Provider=SQLNCLI10;Server=10.161.14.102;Database=xtreme;User ID=sa;Password=1Oem2000";

            //            Dim con As New ADODB.Connection

            //con.ConnectionString = "Provider=SQLNCLI11;" _
            //         & "Server=(local);" _
            //         & "Database=AdventureWorks;" _ 
            //         & "Integrated Security=SSPI;" _
            //         & "DataTypeCompatibility=80;" _
            //         & "MARS Connection=True;"
            //con.Open


            //rptClientDoc.DatabaseController.logon("sa", "1Oem2000");

            System.Data.DataSet thisDataSet = new System.Data.DataSet();

            //string sqlString = @"SELECT ""Orders"".""Order ID"", ""Orders"".""Order Amount"" FROM   ""xtreme"".""dbo"".""Orders"" ""Orders""";
            //string sqlString2 = @"SELECT ""Orders Detail"".""Order ID"", ""Orders Detail"".""Product ID"", ""Orders Detail"".""Unit Price"", ""Orders Detail"".""Quantity"" FROM   ""xtreme"".""dbo"".""Orders Detail"" ""Orders Detail""";

            //string sqlString = @"SELECT top 100*  ""Financials"".""Cash"" FROM  ""xtreme"".""dbo"".""Financials"" ""Financials""";
            string sqlString = @"SELECT top 10*  FROM  ""xtreme"".""dbo"".""Financials"" ""Financials""";


            System.Data.OleDb.OleDbConnection oleConn = new System.Data.OleDb.OleDbConnection(connString);
            System.Data.OleDb.OleDbCommand cmd = oleConn.CreateCommand();
            cmd.CommandText = sqlString;

            System.Data.DataSet ds = new System.Data.DataSet();

            OleDbDataAdapter oleAdapter = new OleDbDataAdapter(sqlString, oleConn);
            //OleDbDataAdapter oleAdapter2 = new OleDbDataAdapter(sqlString2, oleConn);
            DataTable dt1 = new DataTable("Financials");
            //DataTable dt2 = new DataTable("Orders Detail");

            oleAdapter.Fill(dt1);
            //oleAdapter2.Fill(dt2);

            ds.Tables.Add(dt1);
            //ds.Tables.Add(dt2);
            ds.WriteXml("c:\\reports\\sc2.xml", XmlWriteMode.WriteSchema);

            // as long as the field names match exactly Cr has no problems setting report to a DS.
            try
            {
                rpt.SetDataSource(ds.Tables[0]);
                rpt.SetDataSource(ds);
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR: Schema Mismatch. Error reported by CR: " + ex.Message);
            }

            //Now check for subreport and set to same DS
            foreach (CrystalDecisions.CrystalReports.Engine.Section section in rpt.ReportDefinition.Sections)
            {
                foreach (CrystalDecisions.CrystalReports.Engine.ReportObject reportObject in section.ReportObjects)
                {
                    if (reportObject.Kind == ReportObjectKind.SubreportObject)
                    {
                        CrystalDecisions.CrystalReports.Engine.SubreportObject subReport = (CrystalDecisions.CrystalReports.Engine.SubreportObject)reportObject;

                        CrystalDecisions.CrystalReports.Engine.ReportDocument subDocument = subReport.OpenSubreport(subReport.SubreportName);

                        subDocument.SetDataSource(ds);
                    }
                }
            }


            #region Text2
            ////Create a new Database Table to replace the reports current table.
            //CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();

            ////boMainPropertyBag: These hold the attributes of the tables ConnectionInfo object
            //PropertyBag boMainPropertyBag = new PropertyBag();
            ////boInnerPropertyBag: These hold the attributes for the QE_LogonProperties
            ////In the main property bag (boMainPropertyBag)
            //PropertyBag boInnerPropertyBag = new PropertyBag();

            ////Set the attributes for the boInnerPropertyBag
            //boInnerPropertyBag.Add("File Path ", @"C:\sc.xml");
            //boInnerPropertyBag.Add("Internal Connection ID", "{680eee31-a16e-4f48-8efa-8765193dccdd}");

            ////Set the attributes for the boMainPropertyBag
            //boMainPropertyBag.Add("Database DLL", "crdb_adoplus.dll");
            //boMainPropertyBag.Add("QE_DatabaseName", "");
            //boMainPropertyBag.Add("QE_DatabaseType", "");
            ////Add the QE_LogonProperties we set in the boInnerPropertyBag Object
            //boMainPropertyBag.Add("QE_LogonProperties", boInnerPropertyBag);
            //boMainPropertyBag.Add("QE_ServerDescription", "NewDataSet");
            //boMainPropertyBag.Add("QE_SQLDB", "False");
            //boMainPropertyBag.Add("SSO Enabled", "False");

            ////Create a new ConnectionInfo object
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo =
            //new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            ////Pass the database properties to a connection info object
            //boConnectionInfo.Attributes = boMainPropertyBag;
            ////Set the connection kind
            //boConnectionInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            ////**EDIT** Set the User Name and Password if required.
            //boConnectionInfo.UserName = "";
            //boConnectionInfo.Password = "";
            ////Pass the connection information to the table
            //boTable.ConnectionInfo = boConnectionInfo;

            ////Get the Database Tables Collection for your report
            //CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            //boTables = rptClientDoc.DatabaseController.Database.Tables;

            ////For each table in the report:
            //// - Set the Table Name properties.
            //// - Set the table location in the report to use the new modified table
            //boTable.Name = "Orders";
            //boTable.QualifiedName = "Orders";
            //boTable.Alias = "Orders";

            //rptClientDoc.DatabaseController.SetTableLocation(boTables[0], boTable);

            //boTable.Name = "Orders Details";
            //boTable.QualifiedName = "Orders Details";
            //boTable.Alias = "Orders_Details";

            //rptClientDoc.DatabaseController.SetTableLocation(boTables[1], boTable);

            //Verify the database after adding substituting the new table.
            //To ensure that the table updates properly when adding Command tables or Stored Procedures.
            //rptClientDoc.VerifyDatabase();
            #endregion Text2

            MessageBox.Show("Data Source Set", "RAS", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void SetToCSV_Click(object sender, EventArgs e)
        {
            CrystalDecisions.CrystalReports.Engine.ReportDocument rpt = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            ISCDReportClientDocument rcd;

            rcd = rptClientDoc;
 
            PrintReportOptions rasPROpts = new PrintReportOptions();

            rcd.Open(@"C:\Reports\myReport.rpt");
            rptClientDoc = rpt.ReportClientDocument;
            //rpt.SetDatabaseLogon("sms_user", "user5pwd", "localhost", "shipmgmt");
            rptClientDoc.DatabaseController.LogonEx("VMDWSQL", "Northwind", "sa", "1Oem2000");
            
            try
            {
                rptClientDoc.VerifyDatabase();
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR: " + ex.Message);
            }

            try
            {
                rpt.RecordSelectionFormula = @"{Customers.CustomerID} < 'FRANK' ";
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR: " + ex.Message);
            }

            
            rasPROpts.PrinterName = @"Microsoft XPS Document Writer";
            //rpt.PrintOptions.PrinterName = @"\\wc-printserver\WCCSR";
                
            try
            {
                CrystalDecisions.Shared.PrintLayoutSettings.PrintScaling myScales = new PrintLayoutSettings.PrintScaling();
                myScales = PrintLayoutSettings.PrintScaling.DoNotScale;

                rpt.PrintToPrinter(1, false, 0, 0);
                //rptClientDoc.PrintOutputController.PrintReport(rasPROpts);
            }
            catch( Exception ex )
            {
                MessageBox.Show("ERROR: " + ex.Message);
            }
            finally
            {
                rptClientDoc.Close();
            }
        }

        private void ReplaceConnection_Click(object sender, EventArgs e)
        {
            DateTime dtStart;
            TimeSpan difference;
            DateTime TSTotal;
            TSTotal = DateTime.Now;

            CrystalDecisions.Shared.ConnectionInfo crConnectioninfo = new CrystalDecisions.Shared.ConnectionInfo();

            btrDataFile.Text = rpt.Database.Tables[0].LogOnInfo.ConnectionInfo.ServerName.ToString();
            btrSearchPath.Text = rpt.Database.Tables[0].LogOnInfo.ConnectionInfo.DatabaseName.ToString();
            //btrFileLocation.Text = rpt.Database.Tables[0].LogOnInfo.ConnectionInfo.UserID.ToString();
            //btrPassword.Text = rpt.Database.Tables[0].LogOnInfo.ConnectionInfo.Password.ToString();

            //Create a new Database Table to replace the reports current table.
            //CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();

            //boMainPropertyBag: These hold the attributes of the tables ConnectionInfo object
            PropertyBag boMainPropertyBag = new PropertyBag();
            //boInnerPropertyBag: These hold the attributes for the QE_LogonProperties
            //In the main property bag (boMainPropertyBag)
            PropertyBag boInnerPropertyBag = new PropertyBag();
            
            //Set the attributes for the boInnerPropertyBag
            //boInnerPropertyBag.Add("Database", "xtreme");
            boInnerPropertyBag.Add("DSN", rpt.Database.Tables[0].LogOnInfo.ConnectionInfo.ServerName.ToString());
            boInnerPropertyBag.Add("UseDSNProperties", "True");

            //Set the attributes for the boMainPropertyBag
            boMainPropertyBag.Add("Database DLL", "crdb_odbc.dll");
            //boMainPropertyBag.Add("QE_DatabaseName", "xtreme");
            boMainPropertyBag.Add("QE_DatabaseType", "ODBC (RDO)");
            //Add the QE_LogonProperties we set in the boInnerPropertyBag Object
            boMainPropertyBag.Add("QE_LogonProperties", boInnerPropertyBag);
            boMainPropertyBag.Add("QE_ServerDescription", rpt.Database.Tables[0].LogOnInfo.ConnectionInfo.ServerName.ToString());
            boMainPropertyBag.Add("QE_SQLDB", "True");
            boMainPropertyBag.Add("SSO Enabled", "False");

            #region Ludek
            ////Create a new ConnectionInfo object
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            ////Pass the database properties to a connection info object
            //boConnectionInfo.Attributes = boMainPropertyBag;
            ////Set the connection kind
            //boConnectionInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            ////**EDIT** Set the User Name and Password if required.
            //boConnectionInfo.UserName = "sa";
            //boConnectionInfo.Password = "1Oem2000";
            ////Pass the connection information to the table
            //boTable.ConnectionInfo = boConnectionInfo;

            //rptClientDoc.DatabaseController.logon("sa", "1Oem2000");

            ////Get the Database Tables Collection for your report
            //CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            //boTables = rptClientDoc.DatabaseController.Database.Tables;

            ////For each table in the report:
            //// - Set the Table Name properties.
            //// - Set the table location in the report to use the new modified table
            //boTable.Name = "Orders";
            //boTable.QualifiedName = "xtreme.dbo.Orders";
            //boTable.Alias = "Orders";

            //rptClientDoc.DatabaseController.SetTableLocation(boTables[0], boTable);

            //boTable.Name = "Orders Detail";
            //boTable.QualifiedName = "xtreme.dbo.Orders Detail";
            //boTable.Alias = "Orders_Detail";

            //rptClientDoc.DatabaseController.SetTableLocation(boTables[1], boTable);

            //boTable.Name = "Customer";
            //boTable.QualifiedName = "xtreme.dbo.Customer";
            //boTable.Alias = "Customer";

            //rptClientDoc.DatabaseController.SetTableLocation(boTables[2], boTable);
#endregion Ludek

            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo newConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo oldConnInfo;
            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfos oldConnInfos;

            oldConnInfos = rptClientDoc.DatabaseController.GetConnectionInfos(null);
            for (int I = 0; I < oldConnInfos.Count; I++)
            {
                oldConnInfo = oldConnInfos[I];
                newConnInfo.Attributes = boMainPropertyBag;
                newConnInfo.Kind = CrystalDecisions.ReportAppServer.DataDefModel.CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
                try
                {
                    rptClientDoc.DatabaseController.ReplaceConnection(oldConnInfo, newConnInfo, null, CrystalDecisions.ReportAppServer.DataDefModel.CrDBOptionsEnum.crDBOptionDoNotVerifyDB);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("ERROR: " + ex.Message);
                    return;
                }

            }

            //Verify the database after adding substituting the new table.
            //To ensure that the table updates properly when adding Command tables or Stored Procedures.
            //rptClientDoc.VerifyDatabase();

            ////CrystalDecisions.CrystalReports.Engine.ReportDocument rpt = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            //ISCDReportClientDocument boReportDocument;

            //boReportDocument = rptClientDoc;

            ////Create a new Database Table to replace the reports current table.
            //CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
            CrystalDecisions.ReportAppServer.DataDefModel.Table subboTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();

            ////boMainPropertyBag: These hold the attributes of the tables ConnectionInfo object
            //PropertyBag boMainPropertyBag = new PropertyBag();
            ////boInnerPropertyBag: These hold the attributes for the QE_LogonProperties
            ////In the main property bag (boMainPropertyBag)
            //PropertyBag boInnerPropertyBag = new PropertyBag();
            
            ////Set the attributes for the boInnerPropertyBag
            //boInnerPropertyBag.Add("DSN", "10.161.12.206a");
            //boInnerPropertyBag.Add("UseDSNProperties", "true");

            ////Set the attributes for the boMainPropertyBag
            //boMainPropertyBag.Add("Database DLL", "crdb_odbc.dll");
            //boMainPropertyBag.Add("QE_DatabaseName", "xtreme_new");
            //boMainPropertyBag.Add("QE_DatabaseType", "ODBC (RDO)");
            ////Add the QE_LogonProperties we set in the boInnerPropertyBag Object
            //boMainPropertyBag.Add("QE_LogonProperties", boInnerPropertyBag);
            //boMainPropertyBag.Add("QE_ServerDescription", "10.161.12.206a");
            //boMainPropertyBag.Add("QE_SQLDB", "True");
            //boMainPropertyBag.Add("SSO Enabled", "False");

            ////Create a new ConnectionInfo object
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            ////Pass the database properties to a connection info object
            //boConnectionInfo.Attributes = boMainPropertyBag;
            ////Set the connection kind
            //boConnectionInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            ////**EDIT** Set the User Name and Password if required.
            ////boConnectionInfo.UserName = "UserName";
            ////boConnectionInfo.Password = "Password";
            ////Pass the connection information to the table
            //boTable.ConnectionInfo = boConnectionInfo;

            ////Get the Database Tables Collection for your report
            //CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            //boTables = boReportDocument.DatabaseController.Database.Tables;

            //for (int I = 0; I < boTables.Count; I++)
            //{
            //    boTable.Name = (dynamic) boTables[I].Name;
            //    boTable.QualifiedName = (dynamic) boTables[I].QualifiedName;
            //    boTable.Alias = (dynamic) boTables[I].Alias;

            //    try
            //    {
            //        dtStart = DateTime.Now;
            //        boReportDocument.DatabaseController.SetTableLocation(boTables[I], boTable); 
            //        difference = DateTime.Now.Subtract(dtStart);
            //        btnReportObjects.Text += boTable.Name.ToString() + " Set in " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";
            //    }
            //    catch (Exception ex)
            //    {
            //        MessageBox.Show("ERROR: " + ex.Message + " ;" + ex.InnerException.Message);
            //        //return;
            //    }

            //}

            // Now look for each subreport and do the same
            #region Subreport
            foreach (string crSubreportDocument1 in rptClientDoc.SubreportController.GetSubreportNames())
            {
                SubreportClientDocument SubRCD = rptClientDoc.SubreportController.GetSubreport(crSubreportDocument1);
                CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo newSubConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
                //Get the Database Tables Collection for your report
                CrystalDecisions.ReportAppServer.DataDefModel.Tables subboTables;
                subboTables = SubRCD.DatabaseController.Database.Tables;

                btnReportObjects.Text += "\nSubreport: " + crSubreportDocument1.ToString() + "\n";

                for (int S = 0; S < subboTables.Count; S++)
                {
                    subboTable.Name = (dynamic)subboTables[S].Name;
                    subboTable.QualifiedName = (dynamic)subboTables[S].QualifiedName;
                    subboTable.Alias = (dynamic)subboTables[S].Alias;

                    try
                    {
                        dtStart = DateTime.Now; 
                        SubRCD.DatabaseController.SetTableLocation(subboTables[S], subboTable);
                        difference = DateTime.Now.Subtract(dtStart);
                        btnReportObjects.Text += subboTable.Name.ToString() + " Set in " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("ERROR: " + ex.Message + " ;" + ex.InnerException.Message);
                        //return;
                    }


                    // Subreport links
                    foreach (String resultField in rptClientDoc.SubreportController.GetSubreportNames())
                    {
                        SubreportLinks OldSubLinks = rptClientDoc.SubreportController.GetSubreportLinks(resultField.ToString());
                        SubreportLinks NewSubLinks = OldSubLinks.Clone(true);

                        for (int I = 0; I < OldSubLinks.Count; I++)
                        {
                            SubreportLink subLink = NewSubLinks[I];
                        }
                    }
                    // Subreport Link

                }
            }
            #endregion Subreport

            difference = DateTime.Now.Subtract(TSTotal);
            btnReportObjects.Text += "\nTotal Set Location in " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";

            //dtStart = DateTime.Now;
            //boReportDocument.VerifyDatabase();
            //difference = DateTime.Now.Subtract(dtStart);
            //btnReportObjects.Text += "\nVerify Data in " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";

            ////For each table in the report:
            //// - Set the Table Name properties.
            //// - Set the table location in the report to use the new modified table
            //boTable.Name = "TRIP REPORT";
            //boTable.QualifiedName = "TRIP REPORT";
            //boTable.Alias = "TRIP_REPORT";

            //boReportDocument.DatabaseController.SetTableLocation(boTables[0], boTable);

            //boTable.Name = "TRIPS";
            //boTable.QualifiedName = "TRIPS";
            //boTable.Alias = "TRIPS";

            //boReportDocument.DatabaseController.SetTableLocation(boTables[1], boTable);

            //boTable.Name = "TRIP PASSENGERS";
            //boTable.QualifiedName = "TRIP PASSENGERS";
            //boTable.Alias = "TRIP_PASSENGERS";

            //boReportDocument.DatabaseController.SetTableLocation(boTables[2], boTable);

            //CrystalDecisions.CrystalReports.Engine.ReportObjects crReportObjects;

            //rptClientDoc.DatabaseController.LogonEx("192.168.13.156", "TestDB", "sa", "1Oem2000");

            //crConnectioninfo.ServerName = "VMW2K8CRSE2K8";
            //crConnectioninfo.UserID = "sb";
            //crConnectioninfo.Password = "1Oem2000";
            //crConnectioninfo.DatabaseName = "astellastest";

            //////Create the logon propertybag for the connection we wish to use
            ////CrystalDecisions.ReportAppServer.DataDefModel.PropertyBag logonDetails = new CrystalDecisions.ReportAppServer.DataDefModel.PropertyBag();
            ////logonDetails.Add("Auto Translate", -1);
            ////logonDetails.Add("Connect Timeout", 15);
            ////logonDetails.Add("Data Source", "192.168.13.156");
            ////logonDetails.Add("General Timeout", 0);
            ////logonDetails.Add("Initial Catalog", "TestDB");
            ////logonDetails.Add("Integrated Security", "false");
            ////logonDetails.Add("Locale Identifier", 1033);
            ////logonDetails.Add("OLE DB Services", -5);
            ////logonDetails.Add("Provider", "SQLNCLI10");
            ////logonDetails.Add("Use Encryption for Data", 0);
            //////logonDetails.Add("Owner", "dbo"); // schema

            //////Create the QE (query engine) propertybag with the provider details and logon property bag.
            ////CrystalDecisions.ReportAppServer.DataDefModel.PropertyBag QE_Details = new CrystalDecisions.ReportAppServer.DataDefModel.PropertyBag();
            ////QE_Details.Add("Database DLL", "crdb_ado.dll");
            ////QE_Details.Add("QE_DatabaseName", "TestDB");
            ////QE_Details.Add("QE_DatabaseType", "OLE DB (ADO)");
            ////QE_Details.Add("QE_LogonProperties", logonDetails);
            ////QE_Details.Add("QE_ServerDescription", "192.168.13.156");
            ////QE_Details.Add("QE_SQLDB", "True");
            ////QE_Details.Add("SSO Enabled", "False");
            //////QE_Details.Add("Owner", "dbo");

            //HANA test

            ////////Create a new Database Table to replace the reports current table.
            //////CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();

            ////////boMainPropertyBag: These hold the attributes of the tables ConnectionInfo object
            //////PropertyBag boMainPropertyBag = new PropertyBag();
            ////////boInnerPropertyBag: These hold the attributes for the QE_LogonProperties
            ////////In the main property bag (boMainPropertyBag)
            //////PropertyBag boInnerPropertyBag = new PropertyBag();

            ////////Set the attributes for the boInnerPropertyBag
            //////boInnerPropertyBag.Add("DSN", "Hana");
            //////boInnerPropertyBag.Add("UseDSNProperties", "False");

            ////////Set the attributes for the boMainPropertyBag
            //////boMainPropertyBag.Add("Database DLL", "crdb_odbc.dll");
            //////boMainPropertyBag.Add("QE_DatabaseName", "");
            //////boMainPropertyBag.Add("QE_DatabaseType", "ODBC (RDO)");
            ////////Add the QE_LogonProperties we set in the boInnerPropertyBag Object
            //////boMainPropertyBag.Add("QE_LogonProperties", boInnerPropertyBag);
            //////boMainPropertyBag.Add("QE_ServerDescription", "Hana");
            //////boMainPropertyBag.Add("QE_SQLDB", "True");
            //////boMainPropertyBag.Add("SSO Enabled", "False");

            ////////Create a new ConnectionInfo object
            //////CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            ////////Pass the database properties to a connection info object
            //////boConnectionInfo.Attributes = boMainPropertyBag;
            ////////Set the connection kind
            //////boConnectionInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            ////////**EDIT** Set the User Name and Password if required.
            //////boConnectionInfo.UserName = "i819003";
            //////boConnectionInfo.Password = "Password1";
            ////////Pass the connection information to the table
            //////boTable.ConnectionInfo = boConnectionInfo;

            ////////Get the Database Tables Collection for your report
            //////CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            //////boTables = rptClientDoc.DatabaseController.Database.Tables;

            ////////For each table in the report:
            //////// - Set the Table Name properties.
            //////// - Set the table location in the report to use the new modified table
            //////boTable.Name = "CUSTOMER";
            ////////boTable.QualifiedName = "XTREME.CUSTOMER";
            ////////boTable.Alias = "CUSTOMER";

            //////rptClientDoc.DatabaseController.SetTableLocation(boTables[0], boTable);


            //////CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo newConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            //////CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo oldConnInfo;
            //////CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfos oldConnInfos;

            //////oldConnInfos = rcd.DatabaseController.GetConnectionInfos(null);
            //////for (int I = 0; I < oldConnInfos.Count; I++)
            //////{
            //////    oldConnInfo = oldConnInfos[I];
            //////    newConnInfo.Attributes = boMainPropertyBag;
            //////    newConnInfo.Kind = CrystalDecisions.ReportAppServer.DataDefModel.CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            //////    try
            //////    {
            //////        rcd.DatabaseController.ReplaceConnection(oldConnInfo, newConnInfo, null, CrystalDecisions.ReportAppServer.DataDefModel.CrDBOptionsEnum.crDBOptionDoNotVerifyDB);
            //////    }
            //////    catch (Exception ex)
            //////    {
            //////        MessageBox.Show("ERROR: " + ex.Message);
            //////        return;
            //////    }

            //////}

            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo newSubConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo oldSubConnInfo;
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfos oldSubConnInfos;

            //CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject crSubreportObject;
            //CrystalDecisions.ReportAppServer.Controllers.SubreportClientDocument crSubreportDocument;

            //////set the crSections object to the current report's sections
            ////CrystalDecisions.ReportAppServer.ReportDefModel.Sections crSections = rptClientDoc.ReportDefinition.Sections;

            //////loop through all the sections to find all the report objects
            ////foreach (CrystalDecisions.CrystalReports.Engine.Section crSection in crSections)
            ////{
            ////    crReportObjects = crSection.ReportObjects;
            //    //loop through all the report objects to find all the subreports
            //    foreach (CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject crReportObject in crReportObjects)
            //    {
            //        //if (crReportObject.Kind == CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject)
            //        {
            //            //you will need to typecast the reportobject to a subreport 
            //            //object once you find it
            //            crSubreportObject = (CrystalDecisions.ReportAppServer.ReportDefModel.SubreportObject)crReportObject;
            //            string mysubname = crSubreportObject.SubreportName.ToString();

            //            //open the subreport object
            //            //crSubreportDocument = crSubreportObject.SubreportName(crSubreportObject.SubreportName);
            //            //crSubreportDocument = crSubreportObject.OpenSubreport(crSubreportObject.SubreportName);

            //            ////set the database and tables objects to work with the subreport
            //            //oldSubConnInfo = rcd.DatabaseController.GetConnectionInfos(null);
            //            //for (int I = 0; I < oldSubConnInfos.Count; I++)
            //            //{
            //            //    oldConnInfo = oldConnInfos[I];
            //            //    newConnInfo.Attributes = QE_Details;
            //            //    newConnInfo.Kind = CrystalDecisions.ReportAppServer.DataDefModel.CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            //            //    try
            //            //    {
            //            //        rcd.DatabaseController.ReplaceConnection(oldConnInfo, newConnInfo, null, CrystalDecisions.ReportAppServer.DataDefModel.CrDBOptionsEnum.crDBOptionDoNotVerifyDB);
            //            //    }
            //            //    catch (Exception ex)
            //            //    {
            //            //        MessageBox.Show("ERROR: " + ex.Message);
            //            //        return;
            //            //    }

            //            //}
            //        }
            //    //}
            //}

            //rpt.VerifyDatabase();


            //GroupPath gp = new GroupPath();
            //string tmp = String.Empty;
            //try
            //{
            //    rptClientDoc.RowsetController.GetSQLStatement(gp, out tmp);
            //    btnSQLStatement.Text = tmp;
            //}
            //catch (Exception ex)
            //{
            //    MessageBox.Show("ERROR: " + ex.Message);
            //    return;
            //}

            IsRpt = false;

            //CrystalDecisions.CrystalReports.Engine.Subreports mySubs = new Subreports();

            //mySubs. Subreports
        }

        private void ExportToRPTR_Click(object sender, EventArgs e)
        {
            CrystalDecisions.Shared.DiskFileDestinationOptions diskOpts = CrystalDecisions.Shared.ExportOptions.CreateDiskFileDestinationOptions();
            CrystalDecisions.Shared.ExportOptions exportOpts = new CrystalDecisions.Shared.ExportOptions();

            rptClientDoc = new ReportClientDocument();

            exportOpts.ExportDestinationOptions = diskOpts;

            diskOpts.DiskFileName = "c:\\reports1.rptr";

            exportOpts.ExportDestinationType = CrystalDecisions.Shared.ExportDestinationType.DiskFile;
            exportOpts.ExportFormatType = CrystalDecisions.Shared.ExportFormatType.RPTR;

            rpt.Export(exportOpts);
            MessageBox.Show("Export to RPTR Complete - Saved as c:\\report1.rptr", "RAS", MessageBoxButtons.OK, MessageBoxIcon.Information);

            rpt.ExportToDisk(ExportFormatType.RPTR, "c:\\report1.rptr");

        }

        private void ExportToStream_Click(object sender, EventArgs e)
        {
            rptClientDoc = rpt.ReportClientDocument;

            CrystalDecisions.Shared.MicrosoftMailDestinationOptions mailOpts = CrystalDecisions.Shared.ExportOptions.CreateMicrosoftMailDestinationOptions();
            CrystalDecisions.Shared.DiskFileDestinationOptions diskOpts = CrystalDecisions.Shared.ExportOptions.CreateDiskFileDestinationOptions();
            CrystalDecisions.Shared.ExportOptions exportOpts = new CrystalDecisions.Shared.ExportOptions();
            CrystalDecisions.Shared.CharacterSeparatedValuesFormatOptions csvExpOpts = new CrystalDecisions.Shared.CharacterSeparatedValuesFormatOptions();
            CrystalDecisions.Shared.HTMLFormatOptions HTMLExpOpts = new CrystalDecisions.Shared.HTMLFormatOptions();
            CrystalDecisions.Shared.PdfFormatOptions PDFExpOpts = new CrystalDecisions.Shared.PdfFormatOptions();
            CrystalDecisions.Shared.EditableRTFExportFormatOptions RTFExpOpts = new CrystalDecisions.Shared.EditableRTFExportFormatOptions();
            CrystalDecisions.Shared.PdfRtfWordFormatOptions PDFRTFExpOpts = new CrystalDecisions.Shared.PdfRtfWordFormatOptions();
            CrystalDecisions.Shared.ExcelDataOnlyFormatOptions XLSXExpOpts = new CrystalDecisions.Shared.ExcelDataOnlyFormatOptions();
            CrystalDecisions.Shared.TextFormatOptions txtFmtOpts = new CrystalDecisions.Shared.TextFormatOptions();
            CrystalDecisions.Shared.ReportFileFormat crExpFormat = new CrystalDecisions.Shared.ReportFileFormat();
            CrystalDecisions.ReportAppServer.ReportDefModel.HTMLExportFormatOptions myHTML = new HTMLExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.RPTExportFormatOptions myRPTExp = new RPTExportFormatOptions();
            CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions RASEptOpts = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions(); 

            //rpt.Load(@"c:\reports\b.rpt");

            //rptClientDoc = new ReportClientDocument();

            string MyRptName = rpt.FileName.ToString();
            //MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 1)) + "pdf";
            //MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 1)) + "xls";
            //MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 1)) + "txt";
            MyRptName = MyRptName.Substring(MyRptName.LastIndexOf(@"\") + 1, (rpt.FileName.Length - 3) - (MyRptName.LastIndexOf(@"\") + 1)) + "html";

            //RASEptOpts.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatMHTML;
            //diskOpts.DiskFileName = @"c:\temp\html\" + MyRptName;

            //diskOpts.DiskFileName = "c:\\temp\\ReportName.rpt";
            //diskOpts.DiskFileName = "c:\\temp\\ReportName.csv";
            //diskOpts.DiskFileName = @"c:\temp\html\b.html";
            //diskOpts.DiskFileName = @"c:\reports\worldsales.pdf";
            //diskOpts.DiskFileName = @"c:\reports\worldsales.rtf";
            //diskOpts.DiskFileName = @"c:\reports\inventory.xlsx";
            //diskOpts.DiskFileName = @"D:\Atest\54902\ExportReportDonNetStrem.txt";

            //exportOpts.ExportDestinationType = CrystalDecisions.Shared.ExportDestinationType.DiskFile;
            ////exportOpts.ExportFormatType = CrystalDecisions.Shared.ExportFormatType.CharacterSeparatedValues;
            ////exportOpts.ExportFormatType = CrystalDecisions.Shared.ExportFormatType.CharacterSeparatedValues;
            ////exportOpts.ExportFormatType = CrystalDecisions.Shared.ExportFormatType.HTML40;
            //exportOpts.ExportDestinationOptions = diskOpts;

            //CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions exportOptions = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
            //This sets which format we will export to.
            //exportOptions.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatPDF;
            //Create the FormatOptions class for PDF.
            //PDFExportFormatOptions PDFexportOptions = new PDFExportFormatOptions();
            //PDFexportOptions.StartPageNumber = 1;
            //PDFexportOptions.EndPageNumber = 1;
            //PDFexportOptions.CreateBookmarksFromGroupTree = true;

            ////This sets which format we will export to.
            //exportOptions.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatText;
            ////Create the FormatOptions class for TXT.
            //TextExportFormatOptions TXTexportOptions = new TextExportFormatOptions();
            //TXTexportOptions.CharactersPerInch = 16;
            //TXTexportOptions.LinesPerPage = 0;

            //exportOptions.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatEditableRTF;
            ////Create the FormatOptions class for Editable RTF.
            //RPTExportFormatOptions RTFExpOptions = new RPTExportFormatOptions();
            ////Set the export format options with the page range we just set.
            //exportOptions.FormatOptions = RTFExpOptions;

            ////This sets which format we will export to.
            //exportOptions.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatEditableRTF;
            ////RTFExpOptions.StartPageNumber = 1;
            ////RTFExpOptions.EndPageNumber = 2;
            ////RTFExpOptions.DiscardUnselectedRecords = false;

            //exportOptions.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatMHTML;

            //HTMLExpOpts = new HTMLFormatOptions();
            ////HTMLExpOpts.HTMLFileName = @"c:\tmp\html\phonebook report that looks real purdy.html";
            //HTMLExpOpts.HTMLFileName = @"C:\inetpub\wwwroot\foldername\" + MyRptName;
            //HTMLExpOpts.HTMLBaseFolderName = @"C:\inetpub\wwwroot\foldername\" + MyRptName;
            //HTMLExpOpts.HTMLEnableSeparatedPages = false;
            //HTMLExpOpts.UsePageRange = false;
            //HTMLExpOpts.HTMLHasPageNavigator = false;

            //exportOpts.ExportDestinationType = CrystalDecisions.Shared.ExportDestinationType.DiskFile;
            //exportOpts.ExportDestinationOptions = diskOpts;
            //exportOpts.ExportFormatOptions = HTMLExpOpts;
            //exportOpts.ExportFormatType = ExportFormatType.HTML40;
            //rpt.Export(exportOpts);
            diskOpts.DiskFileName = @"D:\Atest\735372\ReportName.rpt";

            CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions exportOptions = new CrystalDecisions.ReportAppServer.ReportDefModel.ExportOptions();
            exportOptions.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatPDF;
            exportOptions.FormatOptions(diskOpts);
            exportOptions.ExportFormatType = CrReportExportFormatEnum.crReportExportFormatMHTML;
            exportOptions.FormatOptions = myHTML;
            myHTML.PageNavigator = true;
            myHTML.SeparatePages = false;

            //rptClientDoc.VerifyDatabase();

            //This exports the report to a byte() that we will stream out.
            //Byte[] oByte = (Byte[])rptClientDoc.PrintOutputController.ExportEx(exportOptions).ByteArray;

            //////csvExpOpts = new CharacterSeparatedValuesFormatOptions();
            //////csvExpOpts.GroupSectionsOption = CsvExportSectionsOption.Export;
            //////csvExpOpts.ReportSectionsOption = CsvExportSectionsOption.Export;
            //////csvExpOpts.SeparatorText = ",";
            //////csvExpOpts.Delimiter = "|";

            System.IO.Stream oStream;
            //byte[] byteArray = null;

            //oStream = rpt.ExportToStream(CrystalDecisions.Shared.ExportFormatType.CharacterSeparatedValues);
            oStream = rpt.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);

            MemoryStream ms = new MemoryStream();
            FileStream file = new FileStream(@"D:\Atest\735372\ReportName.pdf", FileMode.Create, FileAccess.Write);
            ms.WriteTo(file);
            file.Close();
            ms.Close();

            //byteArray = new byte[oStream.Length];
            //oStream.Read(byteArray, 0, Convert.ToInt32(oStream.Length - 1));

            //oStream.Read(oByte, 0, Convert.ToInt32(oStream.Length - 1));

             //this is used to verify the file so I saved it to disk
            //System.IO.File.Create(diskOpts.DiskFileName, Convert.ToInt32(oByte.Length)).Close();

            //System.IO.File.OpenWrite(diskOpts.DiskFileName).Write(oByte, 0, Convert.ToInt32(oByte.Length));
            //System.IO.File.SetAttributes(diskOpts.DiskFileName, System.IO.FileAttributes.Directory);
            ////oStream.Close();

            GC.Collect();
            MessageBox.Show("Export to Stream complete", "RAS", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void SetToXML_Click(object sender, EventArgs e)
        {
            DateTime dtStart;
            TimeSpan difference;
            DateTime TSTotal;
            TSTotal = DateTime.Now;

            // Access
            rptClientDoc = rpt.ReportClientDocument;

            //Create a new Database Table to replace the reports current table.
            CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
            CrystalDecisions.ReportAppServer.DataDefModel.Table subboTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo newConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo oldConnInfo;
            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfos oldConnInfos;
            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();

            //Get the Database Tables Collection for your report
            CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            boTables = rptClientDoc.DatabaseController.Database.Tables;

            // Get the old connection info
            oldConnInfos = rptClientDoc.DatabaseController.GetConnectionInfos(null);
            boTable.ConnectionInfo = boConnectionInfo;

            oldConnInfo = oldConnInfos[0];

            # region XML Access
            if (oldConnInfo.Attributes["Database DLL"].ToString() == "crdb_adoplus.dll")
            {
                // Engine
                CrystalDecisions.CrystalReports.Engine.ReportObjects crReportObjects;
                CrystalDecisions.CrystalReports.Engine.SubreportObject crSubreportObject;
                CrystalDecisions.CrystalReports.Engine.ReportDocument crSubreportDocument;
                CrystalDecisions.CrystalReports.Engine.Database crDatabase;
                CrystalDecisions.CrystalReports.Engine.Tables crTables;

                CrystalDecisions.Shared.TableLogOnInfo tLogonInfo;

                btnSQLStatement.Text = "";

                try
                {
                    foreach (CrystalDecisions.CrystalReports.Engine.Table rptTable in rpt.Database.Tables)
                    {
                        //tLogonInfo = rptTable.LogOnInfo;
                        //tLogonInfo.ConnectionInfo.ServerName = @"D:\Atest\482607\Latest\" + rptTable.Location + ".xml";
                        //tLogonInfo.ConnectionInfo.DatabaseName = @"D:\Atest\482607\Latest\" + rptTable.Location + ".xml"; // newDataFile; // D:\Atest\199019\ot_tmp88.mdb
                        ////tLogonInfo.ConnectionInfo.UserID = "";
                        ////tLogonInfo.ConnectionInfo.Password = "";
                        //tLogonInfo.TableName = rptTable.Name;

                        dtStart = DateTime.Now;

                        try
                        {
                            //rptTable.ApplyLogOnInfo(tLogonInfo); D:\Atest\TonyTony\Member.xml
                            rptTable.Location = btrDataFile.ToString(); // @"D:\Atest\482607\Latest\" + rptTable.Location + ".xml";
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("ERROR: " + ex.Message);
                            //return;
                        }

                        difference = DateTime.Now.Subtract(dtStart);

                        //rptTable.Location = rptTable.Name;
                        btnSQLStatement.Text += /*rptTable.Name.ToString() +*/ " Set in " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";

                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("ERROR: " + ex.Message);
                    //return;
                }

                #region XML Subreport
                // check for subreports
                //set the crSections object to the current report's sections
                CrystalDecisions.CrystalReports.Engine.Sections crSections = rpt.ReportDefinition.Sections;

                //loop through all the sections to find all the report objects
                foreach (CrystalDecisions.CrystalReports.Engine.Section crSection in crSections)
                {
                    crReportObjects = crSection.ReportObjects;
                    //loop through all the report objects to find all the subreports
                    foreach (CrystalDecisions.CrystalReports.Engine.ReportObject crReportObject in crReportObjects)
                    {
                        if (crReportObject.Kind == CrystalDecisions.Shared.ReportObjectKind.SubreportObject)
                        {
                            //you will need to typecast the reportobject to a subreport 
                            //object once you find it
                            crSubreportObject = (CrystalDecisions.CrystalReports.Engine.SubreportObject)crReportObject;

                            //open the subreport object
                            crSubreportDocument = crSubreportObject.OpenSubreport(crSubreportObject.SubreportName);

                            CrystalDecisions.CrystalReports.Engine.Database crSubDatabase;
                            CrystalDecisions.CrystalReports.Engine.Tables crSubTables;

                            //set the database and tables objects to work with the subreport
                            crSubDatabase = crSubreportDocument.Database;
                            crSubTables = crSubDatabase.Tables;

                            //loop through all the tables in the subreport and 
                            //set up the connection info and apply it to the tables
                            try
                            {
                                //foreach (CrystalDecisions.CrystalReports.Engine.Table rptTable in crTables)
                                foreach (CrystalDecisions.CrystalReports.Engine.Table subrptTable in crSubreportDocument.Database.Tables)
                                {
                                    tLogonInfo = subrptTable.LogOnInfo;
                                    //tLogonInfo.ConnectionInfo.DatabaseName = newDataFile;
                                    //tLogonInfo.ConnectionInfo.ServerName = newDataFile;
                                    tLogonInfo.TableName = subrptTable.Name;
                                    tLogonInfo.ConnectionInfo.UserID = "";
                                    tLogonInfo.ConnectionInfo.Password = "";

                                    dtStart = DateTime.Now;

                                    try
                                    {
                                        subrptTable.ApplyLogOnInfo(tLogonInfo);
                                    }
                                    catch (Exception ex)
                                    {
                                        MessageBox.Show("ERROR: " + ex.Message);
                                        //return;
                                    }

                                    difference = DateTime.Now.Subtract(dtStart);
                                    btnSQLStatement.Text += "Subreport Table: " + subrptTable.Name.ToString() + " Set in " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";
                                }
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show("SubReport ERROR: " + ex.Message);
                                //return;
                            }
                        }
                    }
                }
                #endregion XML Subreport
            }

            # endregion XML Access


            //string newDataFile = btrFileLocation.Text;
            ////string newSearchPath = btrSearchPath.Text;

            ////ReportDocument rpt = new ReportDocument();
            ////rpt.Load(@"D:\Atest\Dev Element\Event Sales Report(32bit).rpt");
            ////rpt.Load(@"D:\Atest\Dev Element\EventSalesReport(64bit).rpt");

            ////Create a new Database Table to replace the reports current table.
            //CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
            //CrystalDecisions.ReportAppServer.DataDefModel.Table subboTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo newConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo oldConnInfo;
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfos oldConnInfos;
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();

            ////Get the Database Tables Collection for your report
            //CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            //boTables = rptClientDoc.DatabaseController.Database.Tables;

            //// Get the old connection info
            //oldConnInfos = rptClientDoc.DatabaseController.GetConnectionInfos(null);
            //boTable.ConnectionInfo = boConnectionInfo;

            //oldConnInfo = oldConnInfos[0];

            //// Engine
            //CrystalDecisions.CrystalReports.Engine.ReportObjects crReportObjects;
            //CrystalDecisions.CrystalReports.Engine.SubreportObject crSubreportObject;
            //CrystalDecisions.CrystalReports.Engine.ReportDocument crSubreportDocument;

            //btnSQLStatement.Text = "";


            ////CrystalDecisions.Shared.ConnectionInfo crConnectionInfo = new CrystalDecisions.Shared.ConnectionInfo();
            ////CrystalDecisions.Shared.TableLogOnInfo crTableLogonInfo = new TableLogOnInfo();
            
            ////foreach (CrystalDecisions.CrystalReports.Engine.Database crTable in rpt.Database.Tables)
            ////{
            ////    crConnectionInfo.ServerName = @"D:\Change XML Native\nativeXML.xml";
            ////    crConnectionInfo.DatabaseName = @"D:\Change XML Native\nativeXML.xml";
            ////    crTable.
            ////}

            //crTableLogonInfo.ConnectionInfo = crConnectionInfo;

            ////'Get the table information from the report 
            ////crDatabase = rpt.Database;
            ////boTables = rpt.Database.boTables;
            //////'Loop through all tables in the report and apply the connection information for each table.
            ////foreach (crTable in boTables)
            ////    {
            ////crTableLogOnInfo = crTable.LogOnInfo;
            ////crTableLogOnInfo.ConnectionInfo = crConnectionInfoWith crConnectionInfo.ServerName = @"D:\Change XML Native\nativeXML.xml";
            //////'XML file    
            ////        .DatabaseName = "D:\Change XML Native\nativeXML.xsd";
            //////'XSD file
            ////        End With
            //////'Display the table name for confirmation
            ////    MessageBox.Show("Location " & crTable.Location)
            ////crTableLogOnInfo = crTable.LogOnInfocrTableLogOnInfo.ConnectionInfo = crConnectionInfocrTable.ApplyLogOnInfo(crTableLogOnInfo)
            ////Next

            ////try
            ////{
            ////    int XMLCount = rpt.Database.Tables.Count;
            ////    int I = 0;
            ////    System.Data.DataSet mydatasets = new System.Data.DataSet();

            ////    foreach (CrystalDecisions.CrystalReports.Engine.Table rptTable in rpt.Database.Tables)
            ////    {
            ////        //object DSInt = "ds" + I.ToString();
            ////        //DSInt = new System.Data.DataSet();
            ////        //mydatasets = (System.Data.DataSet)DSInt;

            ////        //mydatasets = new System.Data.DataSet();

            ////        //mydatasets.ReadXml(@"D:\Atest\482607\Latest\dsTimesheet.xml", XmlReadMode.ReadSchema);

            ////        //mydatasets.ReadXml(newDataFile.ToString() + boTables[I].Alias.ToString() + ".xml", XmlReadMode.ReadSchema); // D:\Atest\482607
            ////        dtStart = DateTime.Now;

            ////        try
            ////        {
            ////            //rpt.Database.Tables[I].SetDataSource(mydatasets);

            ////            btnSQLStatement.Text += "DS Name: " + mydatasets.DataSetName.ToString() + "\n";
            ////        }
            ////        catch (Exception ex)
            ////        {
            ////            MessageBox.Show("ERROR: " + ex.Message);
            ////        }

            ////        difference = DateTime.Now.Subtract(dtStart);

            ////        btnSQLStatement.Text += rptTable.Name.ToString() + " Set in " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";
            ////        ++I;
            ////        //ds.Dispose();
            ////    }
            ////}
            ////catch (Exception ex)
            ////{
            ////    MessageBox.Show("ERROR: " + ex.Message);
            ////    //return;
            ////}

            //// check for subreports
            ////set the crSections object to the current report's sections
            //CrystalDecisions.CrystalReports.Engine.Sections crSections = rpt.ReportDefinition.Sections;

            ////loop through all the sections to find all the report objects
            //foreach (CrystalDecisions.CrystalReports.Engine.Section crSection in crSections)
            //{
            //    crReportObjects = crSection.ReportObjects;
            //    //loop through all the report objects to find all the subreports
            //    foreach (CrystalDecisions.CrystalReports.Engine.ReportObject crReportObject in crReportObjects)
            //    {
            //        if (crReportObject.Kind == CrystalDecisions.Shared.ReportObjectKind.SubreportObject)
            //        {
            //            //you will need to typecast the reportobject to a subreport 
            //            //object once you find it
            //            crSubreportObject = (CrystalDecisions.CrystalReports.Engine.SubreportObject)crReportObject;

            //            //open the subreport object
            //            crSubreportDocument = crSubreportObject.OpenSubreport(crSubreportObject.SubreportName);

            //            CrystalDecisions.CrystalReports.Engine.Database crSubDatabase;
            //            CrystalDecisions.CrystalReports.Engine.Tables crSubTables;

            //            //set the database and tables objects to work with the subreport
            //            crSubDatabase = crSubreportDocument.Database;
            //            crSubTables = crSubDatabase.Tables;

            //            //loop through all the tables in the subreport and 
            //            //set up the connection info and apply it to the tables
            //            int XMLCount = crSubreportDocument.Database.Tables.Count;
            //            int I = 0;
            //            System.Data.DataSet mySubdatasets = new System.Data.DataSet();

            //            try
            //            {
            //                //foreach (CrystalDecisions.CrystalReports.Engine.Table rptTable in crTables)
            //                foreach (CrystalDecisions.CrystalReports.Engine.Table subrptTable in crSubreportDocument.Database.Tables)
            //                {
            //                    object DSSubInt = "dsSub" + I.ToString();
            //                    DSSubInt = new System.Data.DataSet();
            //                    mySubdatasets = (System.Data.DataSet)DSSubInt;

            //                    System.Data.DataSet dsSub= new System.Data.DataSet();
            //                    mySubdatasets.ReadXml(newDataFile.ToString() + subrptTable.Name.ToString() + ".xml", XmlReadMode.ReadSchema); // D:\Atest\482607
            //                    dtStart = DateTime.Now;

            //                    try
            //                    {
            //                        crSubreportDocument.Database.Tables[I].SetDataSource(dsSub);
            //                        btnSQLStatement.Text += "DS Name: " + mySubdatasets.DataSetName.ToString() + "\n";
            //                    }
            //                    catch (Exception ex)
            //                    {
            //                        MessageBox.Show("Subreport ERROR: " + ex.Message);
            //                        //return;
            //                    }

            //                    difference = DateTime.Now.Subtract(dtStart);
            //                    btnSQLStatement.Text += "Subreport Table: " + subrptTable.Name.ToString() + " Set in " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";
            //                }
            //            }
            //            catch (Exception ex)
            //            {
            //                MessageBox.Show("SbReport ERROR: " + ex.Message);
            //                //return;
            //            }
            //        }
            //    }
            //}

            if (btrVerifyDatabase.Checked)
            {
                if (chkUseRAS.Checked)
                    rptClientDoc.VerifyDatabase();
                else
                    try
                    {
                        rpt.VerifyDatabase();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Verify Database ERROR: " + ex.Message);
                        //return;
                    }
            }

            difference = DateTime.Now.Subtract(TSTotal);
            btnSQLStatement.Text += "\nTotal time: " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";
            #region text
            //rpt.SetParameterValue("systemwithversion", "Test x.x.x.x");
            //rpt.SetParameterValue("functionprintdate", "1/8/2013");
            //rpt.SetParameterValue("hidecost", false);
            //rpt.SetParameterValue("showserving", false);
            //rpt.SetParameterValue("hascombined", false);
            //rpt.SetParameterValue("verb_product", "Product");
            //rpt.SetParameterValue("verb_servings", "servings");
            //rpt.SetParameterValue("verb_unit", "units");
            //rpt.SetParameterValue("verb_unit cost", "Unit Cost");
            //rpt.SetParameterValue("verb_price", "price");
            //rpt.SetParameterValue("verb_total cost", "Total Cost");
            //rpt.SetParameterValue("verb_total price", "Total Price");
            //rpt.SetParameterValue("verb_Qty Sold", "Qty Sold");
            //rpt.SetParameterValue("verb_total for report", "Total for Report");
            //rpt.SetParameterValue("verb_cost %", "Cost %");

            //rpt.SetParameterValue(0, "Test x.x.x.x");
            //rpt.SetParameterValue(2, "1/8/2013");
            //rpt.SetParameterValue(3, false);
            //rpt.SetParameterValue(4, false);
            //rpt.SetParameterValue(5, false);
            //rpt.SetParameterValue(6, "Product");
            //rpt.SetParameterValue(7, "servings");
            //rpt.SetParameterValue(8, "units");
            //rpt.SetParameterValue(9, "Unit Cost");
            //rpt.SetParameterValue(10, "price");
            //rpt.SetParameterValue(11, "Total Cost");
            //rpt.SetParameterValue(12, "Total Price");
            //rpt.SetParameterValue(13, "Qty Sold");
            //rpt.SetParameterValue(15, "Total for Report");
            //rpt.SetParameterValue(16, "Cost %");

            //crystalReportViewer1.ReportSource = rpt;


            ////Create a new Stored Procedure Table to replace the reports current table.
            //CrystalDecisions.ReportAppServer.DataDefModel.Procedure boTable =
            //new CrystalDecisions.ReportAppServer.DataDefModel.Procedure();

            ////boMainPropertyBag: These hold the attributes of the tables ConnectionInfo object
            //PropertyBag boMainPropertyBag = new PropertyBag();
            ////boInnerPropertyBag: These hold the attributes for the QE_LogonProperties
            ////In the main property bag (boMainPropertyBag)
            //PropertyBag boInnerPropertyBag = new PropertyBag();

            ////Set the attributes for the boInnerPropertyBag
            //boInnerPropertyBag.Add("Convert Mulitivalue to Table", "False");
            //boInnerPropertyBag.Add("Local XML File", @"d:\Reports\sc2.xml");

            ////Set the attributes for the boMainPropertyBag
            //boMainPropertyBag.Add("Database DLL", "crdb_xml.dll");
            //boMainPropertyBag.Add("QE_DatabaseName", "");
            //boMainPropertyBag.Add("QE_DatabaseType", "XML and Web Services");
            ////Add the QE_LogonProperties we set in the boInnerPropertyBag Object
            //boMainPropertyBag.Add("QE_LogonProperties", boInnerPropertyBag);
            //boMainPropertyBag.Add("QE_ServerDescription", @"d:\Reports\sc2.xml");
            //boMainPropertyBag.Add("QE_SQLDB", "False");
            //boMainPropertyBag.Add("SSO Enabled", "False");

            ////Create a new ConnectionInfo object
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo =
            //new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            ////Pass the database properties to a connection info object
            //boConnectionInfo.Attributes = boMainPropertyBag;
            ////Set the connection kind
            //boConnectionInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;

            ////Pass the connection information to the table
            //boTable.ConnectionInfo = boConnectionInfo;

            ////Get the Database Tables Collection for your report
            //CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            //boTables = rptClientDoc.DatabaseController.Database.Tables;

            ////For each table in the report:
            //// - Set the Table Name properties.
            //// - Set the table location in the report to use the new modified table
            //boTable.Name = "NewDataSet/Financials";
            //boTable.QualifiedName = "NewDataSet.NewDataSet.NewDataSet/Financials";
            //boTable.Alias = "NewDataSet/Financials";

            //rptClientDoc.DatabaseController.SetTableLocation(boTables[0], boTable);

            //string connString = "Provider=SQLOLEDB;Data Source=VANN00517670A;Database=xtreme;User ID=sa;Password=1Oem2000";

            //rptClientDoc.DatabaseController.logon("sa", "1Oem2000");

            //string sqlString = "Select * From Orders";
            //string sqlString = @"SELECT ""Orders"".""Customer ID"", ""Orders"".""Order Date"" FROM ""xtreme"".""dbo"".""Orders"" ""Orders"" WHERE ""Orders"".""Customer ID"" = ?CustomerID";
            //string sqlString2 = "Select * From \"Orders Detail\"";

            //string sqlString = @"SELECT ""Orders"".""Order ID"", ""Orders"".""Order Amount"" FROM   ""xtreme"".""dbo"".""Orders"" ""Orders""";
            //string sqlString2 = @"SELECT ""Orders Detail"".""Order ID"", ""Orders Detail"".""Product ID"", ""Orders Detail"".""Unit Price"", ""Orders Detail"".""Quantity"" FROM   ""xtreme"".""dbo"".""Orders Detail"" ""Orders Detail""";

            //string sqlString = @"SELECT ""Employee"".""Last Name"", ""Employee"".""First Name"", ""Employee"".""Extension"", ""Employee"".""Position"", ""Employee"".""Birth Date"", ""Employee_Addresses"".""Address1"", ""Employee_Addresses"".""Address2"", ""Employee_Addresses"".""Region"", ""Employee_Addresses"".""City"", ""Employee_Addresses"".""Country"", ""Employee_Addresses"".""Postal Code"", ""Employee"".""Home Phone"", ""Employee"".""Notes"", ""Employee"".""Photo"" 
            //    FROM ""xtreme"".""dbo"".""Employee"" ""Employee"" INNER JOIN ""xtreme"".""dbo"".""Employee Addresses"" ""Employee_Addresses"" ON ""Employee"".""Employee ID""=""Employee_Addresses"".""Employee ID""";

            //string sqlString = @"SELECT ""Customer"".""Customer Name"", ""Customer"".""Contact First Name"", ""Customer"".""Contact Last Name"" FROM ""xtreme"".""dbo"".""Customer"" ""Customer""";

            //System.Data.OleDb.OleDbConnection oleConn = new System.Data.OleDb.OleDbConnection(connString);
            //System.Data.OleDb.OleDbCommand cmd = oleConn.CreateCommand();
            ////cmd.Parameters.Add("CustomerID", System.Data.OleDb.OleDbType.Integer);
            ////cmd.Parameters["CustomerID"].Value = 1;
            //cmd.CommandText = sqlString;

            //System.Data.DataSet ds = new System.Data.DataSet();

            //OleDbConnection oleConn = new OleDbConnection(connString);
            //OleDbDataAdapter oleAdapter = new OleDbDataAdapter(sqlString, oleConn);

            ////OleDbDataAdapter oleAdapter2 = new OleDbDataAdapter(sqlString2, oleConn);
            //DataTable dt1 = new DataTable("Orders");
            ////DataTable dt2 = new DataTable("Orders Detail");

            //oleAdapter.Fill(dt1);
            ////oleAdapter2.Fill(dt2);

            ////System.Data.DataSet ds = new System.Data.DataSet();
            //ds.Tables.Add(dt1);
            ////ds.Tables[0].DefaultView.Sort = "Contact Last Name";
            ////ds.Tables.Add(dt2);
            ////ds.WriteXml("c:\\sc.xml", XmlWriteMode.WriteSchema);
            //ds.WriteXml("c:\\Reports\\abc.xsd", XmlWriteMode.WriteSchema);
            //ds.WriteXml("c:\\Reports\\abc.xml", XmlWriteMode.IgnoreSchema);

            //string myXMLfile = @"d:\\sc2.xml";
            //System.Data.DataSet ds = new System.Data.DataSet();
            //// Create new FileStream with which to read the schema.
            //System.IO.FileStream fsReadXml = new System.IO.FileStream
            //    (myXMLfile, System.IO.FileMode.Open);
            //try
            //{
            //    ds.ReadXml(fsReadXml);
            //    //dataGrid1.DataSource = ds;
            //    //dataGrid1.DataMember = "Cust";
            //}
            //catch (Exception ex)
            //{
            //    MessageBox.Show(ex.ToString());
            //}
            //finally
            //{
            //    fsReadXml.Close();
            //}


            //System.Data.DataSet ds = new System.Data.DataSet();
            //ds.ReadXml("d:\\sc.xml");

            //rpt.SetDataSource(myXMLfile);

            ////Create a new Database Table to replace the reports current table.
            //CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();

            ////boMainPropertyBag: These hold the attributes of the tables ConnectionInfo object
            //PropertyBag boMainPropertyBag = new PropertyBag();
            ////boInnerPropertyBag: These hold the attributes for the QE_LogonProperties
            ////In the main property bag (boMainPropertyBag)
            //PropertyBag boInnerPropertyBag = new PropertyBag();

            ////Set the attributes for the boInnerPropertyBag
            //boInnerPropertyBag.Add("File Path ", @"C:\sc.xml");
            //boInnerPropertyBag.Add("Internal Connection ID", "{680eee31-a16e-4f48-8efa-8765193dccdd}");

            ////Set the attributes for the boMainPropertyBag
            //boMainPropertyBag.Add("Database DLL", "crdb_adoplus.dll");
            //boMainPropertyBag.Add("QE_DatabaseName", "");
            //boMainPropertyBag.Add("QE_DatabaseType", "");
            ////Add the QE_LogonProperties we set in the boInnerPropertyBag Object
            //boMainPropertyBag.Add("QE_LogonProperties", boInnerPropertyBag);
            //boMainPropertyBag.Add("QE_ServerDescription", "NewDataSet");
            //boMainPropertyBag.Add("QE_SQLDB", "False");
            //boMainPropertyBag.Add("SSO Enabled", "False");

            ////Create a new ConnectionInfo object
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo =
            //new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            ////Pass the database properties to a connection info object
            //boConnectionInfo.Attributes = boMainPropertyBag;
            ////Set the connection kind
            //boConnectionInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            ////**EDIT** Set the User Name and Password if required.
            //boConnectionInfo.UserName = "";
            //boConnectionInfo.Password = "";
            ////Pass the connection information to the table
            //boTable.ConnectionInfo = boConnectionInfo;

            ////Get the Database Tables Collection for your report
            //CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            //boTables = rptClientDoc.DatabaseController.Database.Tables;

            ////For each table in the report:
            //// - Set the Table Name properties.
            //// - Set the table location in the report to use the new modified table
            //boTable.Name = "Orders";
            //boTable.QualifiedName = "Orders";
            //boTable.Alias = "Orders";

            //rptClientDoc.DatabaseController.SetTableLocation(boTables[0], boTable);

            //boTable.Name = "Orders Details";
            //boTable.QualifiedName = "Orders Details";
            //boTable.Alias = "Orders_Details";

            //rptClientDoc.DatabaseController.SetTableLocation(boTables[1], boTable);

            //Verify the database after adding substituting the new table.
            //To ensure that the table updates properly when adding Command tables or Stored Procedures.
            //rptClientDoc.VerifyDatabase();
            #endregion text
            MessageBox.Show("Data Source Set", "RAS", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void SetPCDatabase_Click(object sender, EventArgs e)
        {
            DateTime dtStart;
            TimeSpan difference;
            DateTime TSTotal;
            TSTotal = DateTime.Now;

            string newDataFile = btrDataFile.Text;
            string newSearchPath = btrSearchPath.Text;

            // RAS Btrieve - Access need to use ReplaceConnection
            #region RASReplaceconnection;
            if (chkUseRAS.CheckState == CheckState.Checked)
            {
                //rpt.Load(@"D:\Atest\469249\New\bobdetCrystalTestingCR2008DesignerNativeDon.rpt");
                //rpt.Load("c:\\Don\\Bob\\TestBob.rpt");
                rptClientDoc = rpt.ReportClientDocument;

                //Create a new Database Table to replace the reports current table.
                CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
                CrystalDecisions.ReportAppServer.DataDefModel.Table subboTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
                CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo newConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
                CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo oldConnInfo;
                CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfos oldConnInfos;
                CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();

                //Get the Database Tables Collection for your report
                CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
                boTables = rptClientDoc.DatabaseController.Database.Tables;

                // Get the old connection info
                oldConnInfos = rptClientDoc.DatabaseController.GetConnectionInfos(null);
                boTable.ConnectionInfo = boConnectionInfo;

                oldConnInfo = oldConnInfos[0];

                // Access
                #region DAO RAS Access
                if ((dynamic)oldConnInfo.Attributes["Database DLL"].ToString() == "crdb_dao.dll")
                {
                    PropertyBag logonDetails = new PropertyBag();
                    PropertyBag QeDetails = new PropertyBag();

                    //boMainPropertyBag: These hold the attributes of the tables ConnectionInfo object
                    PropertyBag boMainPropertyBag = new PropertyBag();
                    //boInnerPropertyBag: These hold the attributes for the QE_LogonProperties
                    //In the main property bag (boMainPropertyBag)
                    PropertyBag boInnerPropertyBag = new PropertyBag();

                    //Set the attributes for the boInnerPropertyBag
                    boInnerPropertyBag.Add("Database Name", newDataFile);
                    boInnerPropertyBag.Add("Database Type", "Access/Excel (DAO)");

                    //Set the attributes for the boMainPropertyBag
                    boMainPropertyBag.Add("Database DLL", "crdb_dao.dll");
                    boMainPropertyBag.Add("QE_DatabaseName", newDataFile);
                    boMainPropertyBag.Add("QE_DatabaseType", "Access/Excel (DAO)"); // C:\xtreme.mdb
                    //Add the QE_LogonProperties we set in the boInnerPropertyBag Object
                    boMainPropertyBag.Add("QE_LogonProperties", boInnerPropertyBag);
                    boMainPropertyBag.Add("QE_ServerDescription", newDataFile);
                    boMainPropertyBag.Add("QE_SQLDB", "True");
                    boMainPropertyBag.Add("SSO Enabled", "False");

                    // ReplaceConnection method This works also
                    for (int I = 0; I < oldConnInfos.Count; I++)
                    {
                        // CrystalDecisions.ReportAppServer.DataDefModel.Table tbl;
                        for (int S = 0; S < boTables.Count; S++)
                        {

                            oldConnInfo = oldConnInfos[I];
                            newConnInfo.Attributes = boMainPropertyBag;
                            newConnInfo.Kind = CrystalDecisions.ReportAppServer.DataDefModel.CrConnectionInfoKindEnum.crConnectionInfoKindDBFile;

                            try
                            {
                                //rptClientDoc.DatabaseController.SetConnectionInfos(oldConnInfo, newConnInfo);
                                rptClientDoc.DatabaseController.ReplaceConnection(oldConnInfo, newConnInfo, null, CrystalDecisions.ReportAppServer.DataDefModel.CrDBOptionsEnum.crDBOptionDoNotVerifyDB);
                                //rptClientDoc.DatabaseController.SetTableLocationEx(oldConnInfo, newConnInfo);
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show("ERROR: " + ex.Message); //  + " ;" + ex.InnerException.Message.ToString());
                                //return;
                            }
                        }
                    }
                    // ReplaceConnection method This works also

                    // check for subreports
                    //loop through all the report objects to find all the subreports
                    foreach (string crSubreportDocument1 in rptClientDoc.SubreportController.GetSubreportNames())
                    {
                        SubreportClientDocument SubRCD = rptClientDoc.SubreportController.GetSubreport(crSubreportDocument1);
                        CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo newSubConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
                        CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo oldSubConnInfo;
                        CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfos oldSubConnInfos;

                        PropertyBag SublogonDetails = new PropertyBag();
                        PropertyBag SubQeDetails = new PropertyBag();

                        oldSubConnInfos = rptClientDoc.DatabaseController.GetConnectionInfos(null);
                        btnReportObjects.Text += "\nSubreport: " + crSubreportDocument1.ToString() + "\n";

                        for (int I = 0; I < oldSubConnInfos.Count; I++)
                        {
                            oldSubConnInfo = oldSubConnInfos[I];
                            newSubConnInfo.Attributes = boMainPropertyBag;
                            newSubConnInfo.Kind = CrystalDecisions.ReportAppServer.DataDefModel.CrConnectionInfoKindEnum.crConnectionInfoKindDBFile;

                            // this works also
                            for (int S = 0; S < boTables.Count; S++)
                            {
                                oldSubConnInfo = oldSubConnInfos[I];
                                newSubConnInfo.Attributes = boMainPropertyBag;
                                newSubConnInfo.Kind = CrystalDecisions.ReportAppServer.DataDefModel.CrConnectionInfoKindEnum.crConnectionInfoKindDBFile;

                                try
                                {
                                    rptClientDoc.DatabaseController.ReplaceConnection(oldSubConnInfo, newSubConnInfo, null, CrystalDecisions.ReportAppServer.DataDefModel.CrDBOptionsEnum.crDBOptionDoNotVerifyDB);
                                    //rptClientDoc.DatabaseController.SetTableLocationEx(oldSubConnInfo, newSubConnInfo);
                                }
                                catch (Exception ex)
                                {
                                    MessageBox.Show("ERROR: " + ex.Message);
                                    //return;
                                }
                            }
                        }
                        //rptClientDoc.VerifyDatabase();
                    }
                }
                #endregion DAO RAS Access
                // Access

                // Btrieve
                if ((dynamic)oldConnInfo.Attributes["Database DLL"].ToString() == "crdb_p2bbtrv.dll")
                {
                    PropertyBag logonDetails = new PropertyBag();
                    PropertyBag QeDetails = new PropertyBag();

                    //boMainPropertyBag: These hold the attributes of the tables ConnectionInfo object
                    PropertyBag boMainPropertyBag = new PropertyBag();
                    //boInnerPropertyBag: These hold the attributes for the QE_LogonProperties
                    //In the main property bag (boMainPropertyBag)
                    PropertyBag boInnerPropertyBag = new PropertyBag();

                    //Set the attributes for the boInnerPropertyBag
                    boInnerPropertyBag.Add("Data File", newDataFile);
                    boInnerPropertyBag.Add("Data File Search Path", newSearchPath);
                    //boInnerPropertyBag.Add("Table Name", 
                    //Set the attributes for the boMainPropertyBag
                    boMainPropertyBag.Add("Database DLL", "crdb_p2bbtrv.dll");
                    boMainPropertyBag.Add("QE_DatabaseName", newSearchPath);
                    boMainPropertyBag.Add("QE_DatabaseType", "Btrieve");
                    //Add the QE_LogonProperties we set in the boInnerPropertyBag Object
                    boMainPropertyBag.Add("QE_LogonProperties", boInnerPropertyBag);
                    boMainPropertyBag.Add("QE_ServerDescription", newDataFile);
                    boMainPropertyBag.Add("QE_SQLDB", "False");
                    boMainPropertyBag.Add("SSO Enabled", "False");

                    #region ReplaceConnection method This works also
                    //for (int I = 0; I < oldConnInfos.Count; I++)
                    //{
                    //    // CrystalDecisions.ReportAppServer.DataDefModel.Table tbl;
                    //    for (int S = 0; S < boTables.Count; S++)
                    //    {

                    //        oldConnInfo = oldConnInfos[I];
                    //        newConnInfo.Attributes = boMainPropertyBag;
                    //        newConnInfo.Kind = CrystalDecisions.ReportAppServer.DataDefModel.CrConnectionInfoKindEnum.crConnectionInfoKindDBFile;

                    //        try
                    //        {
                    //            //rptClientDoc.DatabaseController.SetConnectionInfos(oldConnInfo, newConnInfo);
                    //            rptClientDoc.DatabaseController.ReplaceConnection(oldConnInfo, newConnInfo, null, CrystalDecisions.ReportAppServer.DataDefModel.CrDBOptionsEnum.crDBOptionDoNotVerifyDB);
                    //            //rptClientDoc.DatabaseController.SetTableLocationEx(oldConnInfo, newConnInfo);
                    //        }
                    //        catch (Exception ex)
                    //        {
                    //            MessageBox.Show("ERROR: " + ex.Message); //  + " ;" + ex.InnerException.Message.ToString());
                    //            //return;
                    //        }
                    //    }
                    //}
                    #endregion ReplaceConnection method This works also

                    // Set Location
                    foreach (CrystalDecisions.ReportAppServer.DataDefModel.Table oldTable in rptClientDoc.DatabaseController.Database.Tables)
                    {
                        for (int I = 0; I < oldConnInfos.Count; I++)
                        {
                            //newDataFile = btrDataFile.ToString(); //@"D:\Atest\131755\Data\bill1\FILE.DDF";
                            //newSearchPath = btrSearchPath.ToString(); // @"D:\Atest\131755\Data\Temp1\";

                            //newDataFile = @"D:\Atest\131755\Data\bill1\FILE.DDF";
                            //newSearchPath = @"D:\Atest\131755\Data\Temp1\";

                            logonDetails["Data File"] = newDataFile;
                            logonDetails["Data File Search Path"] = newSearchPath;

                            QeDetails.Add("Database DLL", "crdb_p2bbtrv.dll");
                            QeDetails.Add("QE_DatabaseType", "Btrieve");
                            QeDetails.Add("QE_LogonProperties", logonDetails);
                            QeDetails.Add("QE_LogonProperties", boInnerPropertyBag);
                            QeDetails.Add("QE_DatabaseName", newSearchPath);
                            QeDetails.Add("QE_ServerDescription", newDataFile);
                            QeDetails.Add("QE_SQLDB", "False");
                            QeDetails.Add("SSO Enabled", "False");

                            btrFileLocation.Text += oldTable.Alias.ToString() + ": ";

                            // For SSCInc to update file location
                            if (oldTable.Name == "Rpt Rent Roll Prop")
                            {
                                QeDetails.Add("File Name", "RTRLP01");
                            }
                            else
                                QeDetails.Add("File Name", "RTRLU01");

                            // for Bill legrpt.tmp
                            if (oldTable.Name == "TRIPS LEG REPORT")
                                QeDetails.Add("File Name", "legrpt.tmp");
                            if (oldTable.Name == "LEG PAX REPORT")
                                QeDetails.Add("File Name", "legpxrpt.tmp");

                            newConnInfo.Attributes = QeDetails;
                            newConnInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
                            //newConnInfo.UserName = "";
                            //newConnInfo.Password = "";
                            CrystalDecisions.ReportAppServer.DataDefModel.Table newTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
                            newTable.ConnectionInfo = newConnInfo;

                            // this set the table name
                            newTable.Name = oldTable.Name;
                            
                            dtStart = DateTime.Now;
                            rptClientDoc.DatabaseController.SetTableLocation(oldTable, newTable);
                            difference = DateTime.Now.Subtract(dtStart);
                            btnReportObjects.Text += oldTable.Name.ToString() + " Set in " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";
                        }
                    }

                    # region Subreport
                    // check for subreports
                    //loop through all the report objects to find all the subreports
                    foreach (string crSubreportDocument1 in rptClientDoc.SubreportController.GetSubreportNames())
                    {
                        SubreportClientDocument SubRCD = rptClientDoc.SubreportController.GetSubreport(crSubreportDocument1);
                        CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo newSubConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
                        CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo oldSubConnInfo;
                        CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfos oldSubConnInfos;

                        PropertyBag SublogonDetails = new PropertyBag();
                        PropertyBag SubQeDetails = new PropertyBag();

                        oldSubConnInfos = rptClientDoc.DatabaseController.GetConnectionInfos(null);
                        btnReportObjects.Text += "\nSubreport: " + crSubreportDocument1.ToString() + "\n";

                        for (int I = 0; I < oldSubConnInfos.Count; I++)
                        {
                            oldSubConnInfo = oldSubConnInfos[I];
                            newSubConnInfo.Attributes = boMainPropertyBag;
                            newSubConnInfo.Kind = CrystalDecisions.ReportAppServer.DataDefModel.CrConnectionInfoKindEnum.crConnectionInfoKindDBFile;

                            // this works also
                            //for (int S = 0; S < boTables.Count; S++)
                            //{
                            //    oldSubConnInfo = oldSubConnInfos[I];
                            //    newSubConnInfo.Attributes = boMainPropertyBag;
                            //    newSubConnInfo.Kind = CrystalDecisions.ReportAppServer.DataDefModel.CrConnectionInfoKindEnum.crConnectionInfoKindDBFile;

                            //    try
                            //    {
                            //        rptClientDoc.DatabaseController.ReplaceConnection(oldSubConnInfo, newSubConnInfo, null, CrystalDecisions.ReportAppServer.DataDefModel.CrDBOptionsEnum.crDBOptionDoNotVerifyDB);
                            //        //rptClientDoc.DatabaseController.SetTableLocationEx(oldSubConnInfo, newSubConnInfo);
                            //    }
                            //    catch (Exception ex)
                            //    {
                            //        MessageBox.Show("ERROR: " + ex.Message);
                            //        //return;
                            //    }
                            //}
                            //this works also

                            // Set Location 
                            foreach (CrystalDecisions.ReportAppServer.DataDefModel.Table oldSubTable in SubRCD.DatabaseController.Database.Tables)
                            {
                                for (I = 0; I < oldConnInfos.Count; I++)
                                {
                                    //newDataFile = btrDataFile.ToString(); //@"D:\Atest\131755\Data\bill1\FILE.DDF";
                                    //newSearchPath = btrSearchPath.ToString(); // @"D:\Atest\131755\Data\Temp1\";

                                    //newDataFile = @"D:\Atest\131755\Data\bill1\FILE.DDF";
                                    //newSearchPath = @"D:\Atest\131755\Data\Temp1\";

                                    SublogonDetails["Data File"] = newDataFile;
                                    SublogonDetails["Data File Search Path"] = newSearchPath;

                                    SubQeDetails.Add("Database DLL", "crdb_p2bbtrv.dll");
                                    SubQeDetails.Add("QE_DatabaseType", "Btrieve");
                                    SubQeDetails.Add("QE_LogonProperties", logonDetails);
                                    SubQeDetails.Add("QE_LogonProperties", boInnerPropertyBag);
                                    SubQeDetails.Add("QE_DatabaseName", newSearchPath);
                                    SubQeDetails.Add("QE_ServerDescription", newDataFile);
                                    SubQeDetails.Add("QE_SQLDB", "False");
                                    SubQeDetails.Add("SSO Enabled", "False");

                                    // For Syspro to update file location
                                    if (oldSubTable.Name == "Rpt Rent Roll Prop")
                                    {
                                        SubQeDetails.Add("File Name", "RTRLP01");
                                    }
                                    else
                                        SubQeDetails.Add("File Name", "RTRLU01");

                                    // for Bill legrpt.tmp
                                    if (oldSubTable.Name == "CREW LEG REPORT")
                                        SubQeDetails.Add("File Name", "legcwrpt.tmp");
                                    if (oldSubTable.Name == "TRIP LEGS REPORT")
                                        SubQeDetails.Add("File Name", "legrpt.tmp");

                                    newSubConnInfo.Attributes = SubQeDetails;
                                    newSubConnInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
                                    newSubConnInfo.UserName = "";
                                    newSubConnInfo.Password = "";
                                    CrystalDecisions.ReportAppServer.DataDefModel.Table newSubTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
                                    newSubTable.ConnectionInfo = newConnInfo;
                                    newSubTable.Name = oldSubTable.Name;

                                    dtStart = DateTime.Now;
                                    SubRCD.DatabaseController.SetTableLocation(oldSubTable, newSubTable);
                                    difference = DateTime.Now.Subtract(dtStart);
                                    btnReportObjects.Text += newSubTable.Name.ToString() + " Set in " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";

                                }
                            }
                        }
                        # endregion Subreport
                    }
                    // Btrieve
                }
                IsRpt = false;
            }
            #endregion RASReplaceConnection;
            else
            #region Engine
            {
                // Access
                rptClientDoc = rpt.ReportClientDocument;

                //Create a new Database Table to replace the reports current table.
                CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
                CrystalDecisions.ReportAppServer.DataDefModel.Table subboTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
                CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo newConnInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
                CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo oldConnInfo;
                CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfos oldConnInfos;
                CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();

                //Get the Database Tables Collection for your report
                CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
                boTables = rptClientDoc.DatabaseController.Database.Tables;

                // Get the old connection info
                oldConnInfos = rptClientDoc.DatabaseController.GetConnectionInfos(null);
                boTable.ConnectionInfo = boConnectionInfo;

                oldConnInfo = oldConnInfos[0];

                # region DAO Access
                if (oldConnInfo.Attributes["Database DLL"].ToString() == "crdb_dao.dll")
                {
                    // Engine
                    CrystalDecisions.CrystalReports.Engine.ReportObjects crReportObjects;
                    CrystalDecisions.CrystalReports.Engine.SubreportObject crSubreportObject;
                    CrystalDecisions.CrystalReports.Engine.ReportDocument crSubreportDocument;
                    CrystalDecisions.CrystalReports.Engine.Database crDatabase;
                    CrystalDecisions.CrystalReports.Engine.Tables crTables;

                    CrystalDecisions.Shared.TableLogOnInfo tLogonInfo;

                    btnSQLStatement.Text = "";

                    try
                    {
                        foreach (CrystalDecisions.CrystalReports.Engine.Table rptTable in rpt.Database.Tables)
                        {
                            tLogonInfo = rptTable.LogOnInfo;
                            tLogonInfo.ConnectionInfo.ServerName = @"D:\Atest\482607\Latest\dsTimesheet.xml";
                            tLogonInfo.ConnectionInfo.DatabaseName = newDataFile; // D:\Atest\199019\ot_tmp88.mdb
                            tLogonInfo.ConnectionInfo.UserID = "";
                            tLogonInfo.ConnectionInfo.Password = "";
                            tLogonInfo.TableName = rptTable.Name;

                            dtStart = DateTime.Now;

                            try
                            {
                                rptTable.ApplyLogOnInfo(tLogonInfo);
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show("ERROR: " + ex.Message);
                                //return;
                            }

                            difference = DateTime.Now.Subtract(dtStart);

                            //rptTable.Location = rptTable.Name;
                            btnSQLStatement.Text += /*rptTable.Name.ToString() +*/ " Set in " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";

                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("ERROR: " + ex.Message);
                        //return;
                    }

                    // check for subreports
                    //set the crSections object to the current report's sections
                    CrystalDecisions.CrystalReports.Engine.Sections crSections = rpt.ReportDefinition.Sections;

                    //loop through all the sections to find all the report objects
                    foreach (CrystalDecisions.CrystalReports.Engine.Section crSection in crSections)
                    {
                        crReportObjects = crSection.ReportObjects;
                        //loop through all the report objects to find all the subreports
                        foreach (CrystalDecisions.CrystalReports.Engine.ReportObject crReportObject in crReportObjects)
                        {
                            if (crReportObject.Kind == CrystalDecisions.Shared.ReportObjectKind.SubreportObject)
                            {
                                //you will need to typecast the reportobject to a subreport 
                                //object once you find it
                                crSubreportObject = (CrystalDecisions.CrystalReports.Engine.SubreportObject)crReportObject;

                                //open the subreport object
                                crSubreportDocument = crSubreportObject.OpenSubreport(crSubreportObject.SubreportName);

                                CrystalDecisions.CrystalReports.Engine.Database crSubDatabase;
                                CrystalDecisions.CrystalReports.Engine.Tables crSubTables;

                                //set the database and tables objects to work with the subreport
                                crSubDatabase = crSubreportDocument.Database;
                                crSubTables = crSubDatabase.Tables;

                                //loop through all the tables in the subreport and 
                                //set up the connection info and apply it to the tables
                                try
                                {
                                    //foreach (CrystalDecisions.CrystalReports.Engine.Table rptTable in crTables)
                                    foreach (CrystalDecisions.CrystalReports.Engine.Table subrptTable in crSubreportDocument.Database.Tables)
                                    {
                                        tLogonInfo = subrptTable.LogOnInfo;
                                        tLogonInfo.ConnectionInfo.DatabaseName = newDataFile;
                                        tLogonInfo.ConnectionInfo.ServerName = newDataFile;
                                        tLogonInfo.TableName = subrptTable.Name;
                                        tLogonInfo.ConnectionInfo.UserID = "";
                                        tLogonInfo.ConnectionInfo.Password = "";

                                        dtStart = DateTime.Now;

                                        try
                                        {
                                            subrptTable.ApplyLogOnInfo(tLogonInfo);
                                        }
                                        catch (Exception ex)
                                        {
                                            MessageBox.Show("ERROR: " + ex.Message);
                                            //return;
                                        }

                                        difference = DateTime.Now.Subtract(dtStart);
                                        btnSQLStatement.Text += "Subreport Table: " + subrptTable.Name.ToString() + " Set in " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";
                                    }
                                }
                                catch (Exception ex)
                                {
                                    MessageBox.Show("SubReport ERROR: " + ex.Message);
                                    //return;
                                }
                            }
                        }
                    }
                }

                # endregion DAO Access
                    // Access
                else
                {                    
                    // Btrieve
                    #region Btrieve

                    // Engine
                    if (oldConnInfo.Attributes["Database DLL"].ToString() == "crdb_p2bbtrv.dll")
                    {
                                            // Engine
                    CrystalDecisions.CrystalReports.Engine.ReportObjects crReportObjects;
                    CrystalDecisions.CrystalReports.Engine.SubreportObject crSubreportObject;
                    CrystalDecisions.CrystalReports.Engine.ReportDocument crSubreportDocument;
                    CrystalDecisions.CrystalReports.Engine.Database crDatabase;
                    CrystalDecisions.CrystalReports.Engine.Tables crTables;

                    CrystalDecisions.Shared.TableLogOnInfo tLogonInfo;

                    btnSQLStatement.Text = "";

                    try
                    {
                        foreach (CrystalDecisions.CrystalReports.Engine.Table rptTable in rpt.Database.Tables)
                        {
                            tLogonInfo = rptTable.LogOnInfo;
                            tLogonInfo.ConnectionInfo.DatabaseName = newSearchPath;
                            tLogonInfo.ConnectionInfo.ServerName = newDataFile;
                            tLogonInfo.ConnectionInfo.UserID = "";
                            tLogonInfo.ConnectionInfo.Password = "";
                            tLogonInfo.TableName = rptTable.Name;

                            dtStart = DateTime.Now;

                            try
                            {
                                rptTable.ApplyLogOnInfo(tLogonInfo);
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show("ERROR: " + ex.Message);
                                //return;
                            }

                            difference = DateTime.Now.Subtract(dtStart);

                            //rptTable.Location = rptTable.Name;
                            btnSQLStatement.Text += /*rptTable.Name.ToString() +*/ " Set in " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";

                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("ERROR: " + ex.Message);
                        //return;
                    }

                    // check for subreports
                    //set the crSections object to the current report's sections
                    CrystalDecisions.CrystalReports.Engine.Sections crSections = rpt.ReportDefinition.Sections;

                    crSections = rpt.ReportDefinition.Sections;

                    //loop through all the sections to find all the report objects
                    foreach (CrystalDecisions.CrystalReports.Engine.Section crSection in crSections)
                    {
                        crReportObjects = crSection.ReportObjects;
                        //loop through all the report objects to find all the subreports
                        foreach (CrystalDecisions.CrystalReports.Engine.ReportObject crReportObject in crReportObjects)
                        {
                            if (crReportObject.Kind == CrystalDecisions.Shared.ReportObjectKind.SubreportObject)
                            {
                                //you will need to typecast the reportobject to a subreport 
                                //object once you find it
                                crSubreportObject = (CrystalDecisions.CrystalReports.Engine.SubreportObject)crReportObject;

                                //open the subreport object
                                crSubreportDocument = crSubreportObject.OpenSubreport(crSubreportObject.SubreportName);

                                CrystalDecisions.CrystalReports.Engine.Database crSubDatabase;
                                CrystalDecisions.CrystalReports.Engine.Tables crSubTables;

                                //set the database and tables objects to work with the subreport
                                crSubDatabase = crSubreportDocument.Database;
                                crSubTables = crSubDatabase.Tables;

                                //loop through all the tables in the subreport and 
                                //set up the connection info and apply it to the tables
                                try
                                {
                                    //foreach (CrystalDecisions.CrystalReports.Engine.Table rptTable in crTables)
                                    foreach (CrystalDecisions.CrystalReports.Engine.Table subrptTable in crSubreportDocument.Database.Tables)
                                    {
                                        tLogonInfo = subrptTable.LogOnInfo;
                                        tLogonInfo.ConnectionInfo.DatabaseName = newDataFile;
                                        tLogonInfo.ConnectionInfo.ServerName = newDataFile;
                                        tLogonInfo.TableName = subrptTable.Name;

                                        dtStart = DateTime.Now;

                                        try
                                        {
                                            subrptTable.ApplyLogOnInfo(tLogonInfo);
                                        }
                                        catch (Exception ex)
                                        {
                                            MessageBox.Show("ERROR: " + ex.Message);
                                            //return;
                                        }

                                        difference = DateTime.Now.Subtract(dtStart);
                                        btnSQLStatement.Text += "Subreport Table: " + subrptTable.Name.ToString() + " Set in " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";
                                    }
                                }
                                catch (Exception ex)
                                {
                                    MessageBox.Show("SubReport ERROR: " + ex.Message);
                                    //return;
                                }
                            }
                        }
                    }
                }
                #endregion Btrieve
                // btrieve
            }
            #endregion Engine
            }
            if (btrVerifyDatabase.Checked)
            {
                if (chkUseRAS.Checked)
                    rptClientDoc.VerifyDatabase();
                else
                    rpt.VerifyDatabase();
            }

            difference = DateTime.Now.Subtract(TSTotal);
            btnSQLStatement.Text += "\nTotal time: " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";
        }

        private void CommandTable_Click(object sender, EventArgs e)
        {
            //CrystalDecisions.CrystalReports.Engine.ReportDocument rpt = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            ISCDReportClientDocument rcd;

            rcd = rpt.ReportClientDocument;

            //DatabaseController dbCtrl = rptDoc.DatabaseController;
            String newTableName = "Command";
            CrystalDecisions.Shared.ConnectionInfo connectionInfo = new CrystalDecisions.Shared.ConnectionInfo();
            DbConnectionAttributes dbconn = new DbConnectionAttributes();
            NameValuePairs2 propertyBag = new NameValuePairs2();

            propertyBag.Set("QE_DatabaseDLL", "crdb_ado.dll");
            propertyBag.Set("QE_Servertype", "OLE DB (ADO)");
            propertyBag.Set("QE_ConnectionString", "Provider=SQLNCLI10.1;Integrated Security=SSPI;Persist Security Info=False;User ID=" + ";Initial Catalog=astellastest;Data Source=192.168.13.155;"); //Initial File Name="";Server SPN=""

            //propertyBag.Set("QE_ConnectionString", "192.168.13.155;;UseDSNProperties=0");
            propertyBag.Set("QE_Servername", "192.168.13.155");

            dbconn.Collection = propertyBag;
            connectionInfo.Attributes = dbconn;
            connectionInfo.UserID = "sb";
            connectionInfo.Password = "1Oem2000";
            connectionInfo.ServerName = "192.168.13.155";
            connectionInfo.DatabaseName = "astellastest";
            //String sqlQueryString = @" SELECT 'Orders'.'Order ID', 'Orders'.'Order Amount', 'Orders'.'Customer ID', 'Orders'.'Employee ID' FROM 'xtreme'.'dbo'.'Orders' 'Orders'";
            //String sqlQueryString = "SELECT * from Orders";
            String sqlQueryString = @"SELECT 'Checks'.'CheckID', 'Checks'.'LoopType', 'Checks'.'RunType' FROM 'astellastest'.'dbo'.'Checks' 'Checks' WHERE 'Checks'.'CheckID'<100";

            //rpt.VerifyDatabase();

            //// Just to get the SQL
            //rptClientDoc.DatabaseController.logon("sb", "1Oem2000");
            //GroupPath gp = new GroupPath();
            //string tmp = String.Empty;
            //try
            //{
            //    rcd.RowsetController.GetSQLStatement(gp, out tmp);
            //    btnSQLStatement.Text = tmp;
            //}
            //catch (Exception ex)
            //{
            //    MessageBox.Show("ERROR: " + ex.Message);
            //    return;
            //}
            //String sqlQueryString = tmp.ToString();

            //            XTREME"."Orders Detail" "Orders_Detail" INNER JOIN "XTREME"."Orders" "Orders" ON "Orders_Detail"."Order ID"="Orders"."Order ID"
            rpt.SetSQLCommandTable(connectionInfo, newTableName, sqlQueryString.ToString());
        }

        #region All Viewer Events
        private void crystalReportViewer1_Navigate(object source, CrystalDecisions.Windows.Forms.NavigateEventArgs e) 
        {
            if (!e.Handled)
            {
                crystalReportViewer1.ShowProgressAnimation(false);
                //MessageBox.Show(e.CurrentPageNumber.ToString());
            }
        }

        private void crystalReportViewer1_DoubleClickPage(object sender, PageMouseEventArgs e)
        {
            //// do not edit this works
            //CrystalDecisions.ReportAppServer.ClientDoc.ISCDReportClientDocument rptClientDoc;
            //rptClientDoc = rpt.ReportClientDocument;
            //crystalReportViewer1.SetFocusOn(UIComponent.Page);

            //if (e.ObjectInfos != null)
            //{
            //    btnReportObjects.Text = "";
            //    btnReportObjects.Text += "Number of items in selected Row: " + e.ObjectInfos.Length.ToString() + "\n\n";
            //    foreach (ObjectInfo oi in e.ObjectInfos)
            //    {
            //        //btnReportObjects.Text += ">>>OBJECT : " + t + " <<<" + "\n";
            //        btnReportObjects.Text += "Fld Text: " + oi.Text.ToString() + "\n";
            //        btnReportObjects.Text += "DataContext: " + oi.DataContext.ToString() + "\n";
            //        btnReportObjects.Text += "GroupNamePath: " + oi.GroupNamePath.ToString() + "\n";
            //        btnReportObjects.Text += "Hyperlink: " + oi.Hyperlink.ToString() + "\n";
            //        try
            //        {
            //            foreach (FormulaField resultField in rptClientDoc.DataDefController.DataDefinition.FormulaFields)
            //            {
            //                if ((resultField.UseCount > 0) && (resultField.Text == oi.Text))
            //                {
            //                    CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject objField;
            //                    objField = (CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject)rptClientDoc.ReportDefController.ReportDefinition.FindObjectByName(resultField.Text.ToString());
            //                    richTextBox1.Text += "Formula field object: " + objField.Name.ToString() + "\n"; // oi.DataContext.ToString() ;
            //                }
            //            }
            //        }
            //        catch (Exception ex)
            //        {
            //            MessageBox.Show("ERROR: " + ex.Message);
            //            return;
            //        }
            //        btnReportObjects.Text += "ObjectType: " + oi.ObjectType.ToString() + "\n";
            //        btnReportObjects.Text += "Tooltip: " + oi.ToolTip.ToString() + "\n";
            //        btnReportObjects.Text += "========================\n";
            //    }
            //    btnReportObjects.AppendText(" 'End' \n");
            //}
            ////do not edit - this works

            // Gary Chang sent me this not sure how it's diff than above but it's better
            CrystalDecisions.ReportAppServer.ClientDoc.ISCDReportClientDocument rptClientDoc;
            rptClientDoc = rpt.ReportClientDocument;

            //DateTime dtStart;
            //dtStart = DateTime.Now;
            //btnSQLStatement.Text += "\nReport End time: \n" + dtStart.ToString();

            rptClientDoc.ReportOptions.ConvertNullFieldToDefault = true;
            rptClientDoc.ReportOptions.ConvertOtherNullsToDefault = true;

            btnReportObjects.Text = "";
            int t = 0;
            if (e.ObjectInfos != null)
            {
                foreach (ObjectInfo oi in e.ObjectInfos)
                {
                    try
                    {
                        if (oi.ObjectType.ToString() != "GroupChart")
                        {
                            if (oi.ObjectType.ToString() != "OleObject")
                            {
                                if (oi.ObjectType.ToString() != "CrossTab")
                                {
                                    // This is the field you double clicked on, in the viewer
                                    if (oi.Name == e.ObjectInfo.Name)
                                        btnReportObjects.Text += ">>> SELECTED OBJECT - you clicked on<<<" + "\n";

                                    btnReportObjects.Text += "DataContext: " + oi.DataContext.ToString() + "\n";
                                    btnReportObjects.Text += "GroupNamePath: " + oi.GroupNamePath.ToString() + "\n";
                                    btnReportObjects.Text += "Hyperlink: " + oi.Hyperlink.ToString() + "\n";

                                    string textBox1 = String.Empty;
                                    foreach (FormulaField resultField in rptClientDoc.DataDefController.DataDefinition.FormulaFields)
                                    {
                                        CrystalDecisions.ReportAppServer.ReportDefModel.ReportObjects FormulaFldobjs;
                                        FormulaFldobjs = rptClientDoc.ReportDefController.ReportObjectController.GetReportObjectsByKind(CrReportObjectKindEnum.crReportObjectKindField);
                                        t = rptClientDoc.DataDefController.DataDefinition.FormulaFields.FindIndexOf(resultField);
                                        CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject objField;
                                        objField = (CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject)FormulaFldobjs[t];
                                        CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject objField2 = (CrystalDecisions.ReportAppServer.ReportDefModel.FieldObject)objField.Clone(true);

                                        if (oi.Name.ToString() == objField2.Name.ToString())
                                        {
                                            btnReportObjects.Text += "Name: " + oi.Name.ToString() + " -> " + objField2.DataSourceName.ToString() + "\n";
                                        }

                                        t++;
                                    }

                                    //btnReportObjects.Text += "Name: " + oi.Name.ToString() + "\n";
                                    btnReportObjects.Text += "Text: " + oi.Text.ToString() + "\n";
                                    btnReportObjects.Text += "ObjectType: " + oi.ObjectType.ToString() + "\n";
                                    btnReportObjects.Text += "Tooltip: " + oi.ToolTip.ToString() + "\n";
                                    btnReportObjects.Text += "========================\n";
                                    btnReportObjects.Text += richTextBox1;
                                    btnReportObjects.AppendText(" 'End' \n");
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("ERROR: " + ex.Message);
                    }
                }
            }
            // Gary Chang sent me this not sure how it's diff than above


            ////Issue 1:
            ////3 records having the same SO Date, when user double click on 2 (2nd record), user expect to have SO number 0002.

            ////Issue 2:
            ////RTotal is a running field. In the code, we can't get the value

            //int i = 1;
            //int _selectedItemByIndex = 0;
            //ISCRFieldObject field;
            //ISCRReportObject reportObject = rptClientDoc.ReportDefController.ReportDefinition.FindObjectByName(e.ObjectInfo.Name.ToString());
            //ISCRRowsetController rowsetController = rptClientDoc.RowsetController;

            //CrystalDecisions.ReportAppServer.DataDefModel.ISCRGroupPath groupPath = new CrystalDecisions.ReportAppServer.DataDefModel.GroupPath();
            //groupPath.FromString(e.ObjectInfo.DataContext);
            //RowsetMetaData rowsetMetaData = new RowsetMetaData();

            //Fields resultFields = new Fields();
            //Fields runningTotalFields = new Fields();
            //Fields finalResultFields = new Fields();
            //resultFields = rptClientDoc.DataDefController.DataDefinition.ResultFields;
            //runningTotalFields = rptClientDoc.DataDefController.DataDefinition.RunningTotalFields;

            //if (reportObject != null) 
            //{
            //    ISCRSection section = rptClientDoc.ReportDefController.ReportDefinition.FindSectionByName(reportObject.SectionName);
            //    foreach (CrystalDecisions.ReportAppServer.ReportDefModel.ISCRReportObject sectionObject in section.ReportObjects)
            //    {
            //        field = sectionObject as ISCRFieldObject;
            //        if (sectionObject.Name.Equals(e.ObjectInfo.Name))
            //        {
            //            Console.WriteLine("SelectedItemIndex: " + "[" + i + "]" + e.ObjectInfo.Name);
            //            _selectedItemByIndex = i;
            //        }

            //       //'CrystalDecisions.ReportAppServer.DataDefModel.ISCRFields.FindField(string, CrystalDecisions.ReportAppServer.DataDefModel.CrFieldDisplayNameTypeEnum, CrystalDecisions.ReportAppServer.DataDefModel.CeLocale)' 


            //        //if (resultFields.FindField(field.DataSourceName, CrFieldDisplayNameTypeEnum.crFieldDisplayNameFormula, CeLocale.ceLocaleEnglish) != null)
            //        //{
            //        //    finalResultFields.Add(resultFields.FindField(field.DataSourceName, CrFieldDisplayNameTypeEnum.crFieldDisplayNameFormula, CeLocale.ceLocaleEnglish));
            //        //}
            //        //else if (runningTotalFields.FindField(field.DataSourceName, CrFieldDisplayNameTypeEnum.crFieldDisplayNameFormula, CeLocale.ceLocaleEnglish) != null)
            //        //{
            //        //    finalResultFields.Add(runningTotalFields.FindField(field.DataSourceName, CrFieldDisplayNameTypeEnum.crFieldDisplayNameFormula, CeLocale.ceLocaleEnglish));
            //        //}
            //        i++;
            //    }
            //    rowsetMetaData.DataFields = finalResultFields;
            //    RowsetCursor myRowsetCursor = rowsetController.CreateCursor(groupPath, rowsetMetaData, 0);
            //    Record myrecord = myRowsetCursor.CurrentRecord;    
            //}
            ////crystalReportViewer1.Zoom(1);
        }

        private void crystalReportViewer1_MouseClick(object sender, MouseEventArgs e)
        {
            int i;
            i = 0;
            //crystalReportViewer1.Zoom(1);
        }

        private void crystalReportViewer1_ClickPage_1(object sender, PageMouseEventArgs e)
        {
            //crystalReportViewer1.Zoom(1);
        }

        private void crystalReportViewer1_Drill_1(object source, DrillEventArgs e)
        {
            //crystalReportViewer1.Zoom(1);
            //crystalReportViewer1.SetFocusOn(UIComponent.Page);
            string tmp = string.Empty;
            tmp = e.NewGroupPath;

            CrystalDecisions.ReportAppServer.DataDefModel.ISCRField iscrField;

            if (rptClientDoc.DataDefController.DataDefinition.FormulaFields.Count > 0)
            {
                iscrField = (CrystalDecisions.ReportAppServer.DataDefModel.ISCRField)rptClientDoc.DataDefController.DataDefinition.FormulaFields[0];
                if (rptClientDoc.RowsetController.CanBrowseField(iscrField))
                {
                    rptClientDoc.RowsetController.BrowseFieldValues(iscrField, 10);
                }
                else
                    btnRecordSelectionForm.Text = "Field is wrong type to browse";
            }

        }

        private void crystalReportViewer1_MouseClick_1(object sender, MouseEventArgs e)
        {
            crystalReportViewer1.Zoom(2);
        }

        private void crystalReportViewer1_Error(object source, ExceptionEventArgs e)
        {
            string eError = "";
            int StringLen = 0;
            eError = e.Exception.Message.ToString();
            StringLen = eError.Length;
            if (StringLen >= 61)
            {
                if (eError.Substring(0, 61) == @"The remaining text does not appear to be part of the formula.")
                {
                    MessageBox.Show("Possible missing UFL or actual error in formula");
                    e.Handled = true;
                }
                else
                {
                    MessageBox.Show("Trigger Event - Error in Viewer: " + e.ToString());
                }
            }
            else
            {
                MessageBox.Show("Possible missing UFL or actual error in formula");
                e.Handled = true;
            }
        }

        private void Form2_Click(object sender, EventArgs e, CrystalDecisions.CrystalReports.Engine.ReportDocument rpt)
        {

        }

        private void crystalReportViewer1_Validated(object sender, EventArgs e)
        {
            //MessageBox.Show("Hello");
        }

        private void crystalReportViewer1_Validating(object sender, CancelEventArgs e)
        {
            //MessageBox.Show("Hello 1");
        }

        private void crystalReportViewer1_ImeModeChanged(object sender, EventArgs e)
        {
            MessageBox.Show("Hello 2");
        }

        private void crystalReportViewer1_VisibleChanged(object sender, EventArgs e)
        {
            //MessageBox.Show("Hello");
        }

        private void crystalReportViewer1_RegionChanged(object sender, EventArgs e)
        {
            //MessageBox.Show("Hello");
        }

        private void crystalReportViewer1_EnabledChanged(object sender, EventArgs e)
        {
            MessageBox.Show("Hello");
        }

        int myZoom;

        private void crystalReportViewer1_ViewZoom(object source, ZoomEventArgs e)
        {
            myZoom = e.NewZoomFactor;
        }

        private void crystalReportViewer1_DrillDownSubreport(object source, DrillSubreportEventArgs e)
        {
            CrystalDecisions.Windows.Forms.ZoomEventArgs myZoomFactor = new ZoomEventArgs();
            //crystalReportViewer1.Zoom(myZoom);
        }

        private void crystalReportViewer1_HelpRequested(object sender, HelpEventArgs hlpevent)
        {
            Help.ShowHelp(this, @"C:\Program Files (x86)\SAP BusinessObjects\Crystal Reports 2011\Help\en\Crw.chm");
        }

        private void crystalReportViewer1_DoubleClickPage(object sender, MouseEventArgs e)
        {

        }
        #endregion All Viewer Events

        public static DBField DataColumnToField(string ColumnName)
        {
            DBField class2 = new DBField();
            int rnBytesInField = 0;
            class2.Name = ColumnName;
            class2.Type = CrystalDecisions.ReportAppServer.DataDefModel.CrFieldValueTypeEnum.crFieldValueTypeStringField;
            class2.Length = 1024;
            //class2.Description = column.Caption;
            //class2.HeadingText = column.Expression;
            return class2;
        }

        private void Marginslabel_Click(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {
            //FileDSN
            DateTime dtStart;
            TimeSpan difference;
            DateTime TSTotal;
            TSTotal = DateTime.Now;

            string newDataFile = btrDataFile.Text;
            string newSearchPath = btrSearchPath.Text;

            rptClientDoc = rpt.ReportClientDocument;

            //Create a new Database Table to replace the reports current table.
            CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();

            //boMainPropertyBag: These hold the attributes of the tables ConnectionInfo object
            PropertyBag boMainPropertyBag = new PropertyBag();
            //boInnerPropertyBag: These hold the attributes for the QE_LogonProperties
            //In the main property bag (boMainPropertyBag)
            PropertyBag boInnerPropertyBag = new PropertyBag();

            //Set the attributes for the boInnerPropertyBag
            boInnerPropertyBag.Add("Database", "xtreme");
            boInnerPropertyBag.Add("FILEDSN", @"C:\Users\I819003\Desktop\don.dsn");
            boInnerPropertyBag.Add("UseDSNProperties", "False");

            //Set the attributes for the boMainPropertyBag
            boMainPropertyBag.Add("Database DLL", "crdb_odbc.dll");
            boMainPropertyBag.Add("QE_DatabaseName", "xtreme");
            boMainPropertyBag.Add("QE_DatabaseType", "ODBC (RDO)");
            //Add the QE_LogonProperties we set in the boInnerPropertyBag Object
            boMainPropertyBag.Add("QE_LogonProperties", boInnerPropertyBag);
            boMainPropertyBag.Add("QE_ServerDescription", @"C:\Users\I819003\Desktop\don.dsn");
            boMainPropertyBag.Add("QE_SQLDB", "True");
            boMainPropertyBag.Add("SSO Enabled", "False");

            //Create a new ConnectionInfo object
            CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo =
            new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            //Pass the database properties to a connection info object
            boConnectionInfo.Attributes = boMainPropertyBag;
            //Set the connection kind
            boConnectionInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            //**EDIT** Set the User Name and Password if required.
            boConnectionInfo.UserName = "sa";
            boConnectionInfo.Password = "1Oem2000";
            //Pass the connection information to the table
            boTable.ConnectionInfo = boConnectionInfo;

            //Get the Database Tables Collection for your report
            CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            boTables = rptClientDoc.DatabaseController.Database.Tables;

            //For each table in the report:
            // - Set the Table Name properties.
            // - Set the table location in the report to use the new modified table
            boTable.Name = "Orders";
            boTable.QualifiedName = "xtreme.dbo.Orders";
            boTable.Alias = "Orders";

            rptClientDoc.DatabaseController.SetTableLocation(boTables[0], boTable);

            boTable.Name = "Orders Detail";
            boTable.QualifiedName = "xtreme.dbo.Orders Detail";
            boTable.Alias = "Orders_Detail";

            rptClientDoc.DatabaseController.SetTableLocation(boTables[1], boTable);

            //Verify the database after adding substituting the new table.
            //To ensure that the table updates properly when adding Command tables or Stored Procedures.
            //rptClientDoc.VerifyDatabase();
 
            if (btrVerifyDatabase.Checked)
            {
                if (chkUseRAS.Checked)
                    rptClientDoc.VerifyDatabase();
                else
                    rpt.VerifyDatabase();
            }

            difference = DateTime.Now.Subtract(TSTotal);
            btnSQLStatement.Text += "\nTotal time: " + difference.Minutes.ToString() + ":" + difference.Seconds.ToString() + ":" + difference.Milliseconds.ToString() + "\n";

            #region Button1
            //crystalReportViewer1.ReportSource = @"D:\Atest\Ido\NET Runtime Fails to Load (OK in Designer and RDC).rpt";

            //CrystalDecisions.CrystalReports.Engine.ReportObjects crReportObjects;
            //CrystalDecisions.CrystalReports.Engine.SubreportObject crSubreportObject;
            //CrystalDecisions.CrystalReports.Engine.ReportDocument crSubreportDocument;
            //CrystalDecisions.CrystalReports.Engine.Database crDatabase;
            //CrystalDecisions.CrystalReports.Engine.Tables crTables;
            //TableLogOnInfo crTableLogOnInfo;

            //CrystalDecisions.Shared.ConnectionInfo crConnectioninfo = new CrystalDecisions.Shared.ConnectionInfo();

            ////set up the database and tables objects to refer to the current report
            //crDatabase = rpt.Database;
            //crTables = crDatabase.Tables;
            //int tableIndex = 0;
            //bool mainSecureDB;

            //CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            //boConnectionInfo.Attributes = rpt.ReportClientDocument.DatabaseController.Database.Tables[tableIndex].ConnectionInfo.Attributes;
            //boConnectionInfo.Kind = CrystalDecisions.ReportAppServer.DataDefModel.CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            //boTable.ConnectionInfo = boConnectionInfo;
            //CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables = rptClientDoc.DatabaseController.Database.Tables;
            //boTable.Name = sLocation;
            //boTable.QualifiedName = sLocation;
            //boTable.Alias = sLocation;
            //rptClientDoc.DatabaseController.SetTableLocation(boTables[tableIndex], boTable);


            ////loop through all the tables and pass in the connection info
            //foreach ( CrystalDecisions.ReportAppServer.DataDefModel.Table boTable1 in boTables)
            //{
            //    mainSecureDB = rpt.Database.Tables[tableIndex].LogOnInfo.ConnectionInfo.IntegratedSecurity;
            //    string mainTableName = boTable1.Name.ToString();
            //    tableIndex++;
            //    //pass the necessary parameters to the connectionInfo object
            //    crConnectioninfo.ServerName = "VMW2K8CRSE2K8"; // VMW2K8CRSE2K8 192.168.13.156 //10.161.15.19 VANN00517670A
            //    //if (!mainSecureDB)
            //    {
            //        crConnectioninfo.UserID = "sa";
            //        crConnectioninfo.Password = "1Oem2000";
            //        crConnectioninfo.DatabaseName = "QTYLTD";
            //    }
            //    //else
            //    //    crConnectioninfo.IntegratedSecurity = true;

            //    crTableLogOnInfo = boTable1.LogOnInfo;
            //    crTableLogOnInfo.ConnectionInfo = crConnectioninfo;
            //    boTable1.ApplyLogOnInfo(crTableLogOnInfo);
            //    // SQL Server
            //    //crTable.Location = crDatabase + ".dbo." + crTable.Location;
            //    //crTable.Location = "exec cspRpt_Astellas_Query_Rate_Per_Month_Wk NULL, NULL, NULL, NULL, NULL, NULL, NULL";
            //}

            ////set the crSections object to the current report's sections
            //CrystalDecisions.CrystalReports.Engine.Sections crSections = rpt.ReportDefinition.Sections;

            ////loop through all the sections to find all the report objects
            //foreach (CrystalDecisions.CrystalReports.Engine.Section crSection in crSections)
            //{
            //    crReportObjects = crSection.ReportObjects;
            //    //loop through all the report objects to find all the subreports
            //    foreach (CrystalDecisions.CrystalReports.Engine.ReportObject crReportObject in crReportObjects)
            //    {
            //        if (crReportObject.Kind == ReportObjectKind.SubreportObject)
            //        {
            //            //you will need to typecast the reportobject to a subreport 
            //            //object once you find it
            //            crSubreportObject = (CrystalDecisions.CrystalReports.Engine.SubreportObject)crReportObject;
            //            string mysubname = crSubreportObject.SubreportName.ToString();

            //            //open the subreport object
            //            crSubreportDocument = crSubreportObject.OpenSubreport(crSubreportObject.SubreportName);

            //            //set the database and tables objects to work with the subreport
            //            crDatabase = crSubreportDocument.Database;
            //            crTables = crDatabase.Tables;
            //            tableIndex = 0;
            //            bool SecureDB;

            //            //loop through all the tables in the subreport and 
            //            //set up the connection info and apply it to the tables
            //            foreach (CrystalDecisions.CrystalReports.Engine.Table crTable in crTables)
            //            {   // check if integrated security is enabled
            //                SecureDB = crSubreportDocument.Database.Tables[tableIndex].LogOnInfo.ConnectionInfo.IntegratedSecurity;
            //                string TableName = crTable.Name.ToString();
            //                tableIndex++;
            //                crConnectioninfo.ServerName = "VMW2K8CRSE2K8"; //192.168.13.156 VMW2K8CRSE2K8 VANN00517670A
            //                //if (!SecureDB)
            //                {
            //                    crConnectioninfo.UserID = "sa";
            //                    crConnectioninfo.Password = "1Oem2000";
            //                    crConnectioninfo.DatabaseName = "QTYLTD";
            //                }
            //                //else
            //                //{
            //                //    crConnectioninfo.IntegratedSecurity = true;
            //                //    //crConnectioninfo.Password = "";
            //                //    //crConnectioninfo.UserID = "";
            //                //}

            //                crTableLogOnInfo = crTable.LogOnInfo;
            //                crTableLogOnInfo.ConnectionInfo = crConnectioninfo;
            //                crTable.ApplyLogOnInfo(crTableLogOnInfo);
            //            }
            //        }
            //    }
            //}


            ////ReportDocument boReportDocument = new ReportDocument();
            //ISCDReportClientDocument boReportDocument;
            ////**EDIT** Change the path and report name to the report you want to change.
            //boReportDocument = rpt.ReportClientDocument;
            ////boReportDocument.Load(@"c:\reports\yourreport.rpt", OpenReportMethod.OpenReportByTempCopy);

            ////Create a new Database Table to replace the reports current table.
            //CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();

            ////boMainPropertyBag: These hold the attributes of the tables ConnectionInfo object
            //PropertyBag boMainPropertyBag = new PropertyBag();
            ////boInnerPropertyBag: These hold the attributes for the QE_LogonProperties
            ////In the main property bag (boMainPropertyBag)
            //PropertyBag boInnerPropertyBag = new PropertyBag();

            ////Set the attributes for the boInnerPropertyBag
            //boInnerPropertyBag.Add("Database", "BONFIT");
            //boInnerPropertyBag.Add("DSN", "BONFIT"); // VANN00517670A
            //boInnerPropertyBag.Add("Trusted_Connection", "1");
            //boInnerPropertyBag.Add("UseDSNProperties", "False");

            ////Set the attributes for the boMainPropertyBag
            //boMainPropertyBag.Add("Database DLL", "crdb_odbc.dll");
            //boMainPropertyBag.Add("QE_DatabaseName", "BONFIT");
            //boMainPropertyBag.Add("QE_DatabaseType", "ODBC (RDO)");
            ////Add the QE_LogonProperties we set in the boInnerPropertyBag Object
            //boMainPropertyBag.Add("QE_LogonProperties", boInnerPropertyBag);
            //boMainPropertyBag.Add("QE_ServerDescription", "BONFIT");
            //boMainPropertyBag.Add("QE_SQLDB", "True");
            //boMainPropertyBag.Add("SSO Enabled", "False");

            ////Create a new ConnectionInfo object
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo = new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            ////Pass the database properties to a connection info object
            //boConnectionInfo.Attributes = boMainPropertyBag;
            ////Set the connection kind
            //boConnectionInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            ////**EDIT** Set the User Name and Password if required.
            //boConnectionInfo.UserName = "UserName";
            //boConnectionInfo.Password = "Password";
            ////Pass the connection information to the table
            //boTable.ConnectionInfo = boConnectionInfo;

            ////Get the Database Tables Collection for your report
            //CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            //boTables = boReportDocument.DatabaseController.Database.Tables;

            ////For each table in the report:
            //// - Set the Table Name properties.
            //// - Set the table location in the report to use the new modified table
            //boTable.Name = "OEORDH";
            //boTable.QualifiedName = "BONFIT.dbo.OEORDH";
            //boTable.Alias = "OEORDH";

            //boReportDocument.DatabaseController.SetTableLocation(boTables[0], boTable);

            //boTable.Name = "OEORDD";
            //boTable.QualifiedName = "BONFIT.dbo.OEORDD";
            //boTable.Alias = "OEORDD";

            //boReportDocument.DatabaseController.SetTableLocation(boTables[1], boTable);

            //boTable.Name = "ICITEM";
            //boTable.QualifiedName = "BONFIT.dbo.ICITEM";
            //boTable.Alias = "ICITEM";

            //boReportDocument.DatabaseController.SetTableLocation(boTables[2], boTable);

            //boTable.Name = "ARCUS";
            //boTable.QualifiedName = "BONFIT.dbo.ARCUS";
            //boTable.Alias = "ARCUS";

            //boReportDocument.DatabaseController.SetTableLocation(boTables[3], boTable);

            //boTable.Name = "ICILOC";
            //boTable.QualifiedName = "BONFIT.dbo.ICILOC";
            //boTable.Alias = "ICILOC";

            //boReportDocument.DatabaseController.SetTableLocation(boTables[4], boTable);

            ////Verify the database after adding substituting the new table.
            ////To ensure that the table updates properly when adding Command tables or Stored Procedures.
            ////boReportDocument.VerifyDatabase();
            //rpt.VerifyDatabase();
            #endregion Button1
        }

        private void btnAddSubreport_Click(object sender, EventArgs e)
        {
            //1.I open a rpt document as a main report with
            CrystalDecisions.CrystalReports.Engine.ReportDocument rptMain = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            //2.I open more rpt documents as subreports.
            CrystalDecisions.CrystalReports.Engine.ReportDocument rptSub = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            //ReportClientDocument reportClientDocument = new CrystalDecisions.ReportAppServer.ClientDoc.ReportClientDocument();
            //CrystalDecisions.ReportAppServer.ClientDoc.ISCDReportClientDocument reportClientDocument;

            //ReportClientDocument reportClientDocument = new ReportClientDocument(); // (ReportClientDocument)reportAppFactory.OpenDocument(infoObjects[1].ID, 0);
            //ReportClientDocument reportClientDocument2 = new ReportClientDocument(); // (ReportClientDocument)reportAppFactory.OpenDocument(infoObjects[1].ID, 0);
            //rptMain.Load(@"c:\reports\World Sales Report.rpt");
            rptMain = rpt;
            rptSub.Load(@"c:\reports\formulas.rpt");

            reportClientDocument = rptMain.ReportClientDocument;
            //reportClientDocument2 = rptSub.ReportClientDocument;
            //MessageBox.Show(reportClientDocument.DisplayName.ToString());

            CrystalDecisions.CrystalReports.Engine.Sections crSections = rptMain.ReportDefinition.Sections;
            CrystalDecisions.ReportAppServer.ReportClientDocumentWrapper subreportController = new CrystalDecisions.ReportAppServer.ReportClientDocumentWrapper();
            //CrystalDecisions.ReportAppServer.ReportDefModel.Section rasSection;

            //rasSection = rptClientDoc.ReportDefController.ReportDefinition.FindSectionByName(rasSection.Name);
            CrystalDecisions.ReportAppServer.ReportDefModel.Section sectionToAdd = reportClientDocument.ReportDefinition.ReportHeaderArea.Sections[0];

            //3.I import these subreports into the main report with
            //subreportController.SubreportController.ImportSubreport(reportClientDocument.DisplayName.ToString(), "c:\\reports\\Formulas.rpt", rasSection);
            //subreportController.SubreportController.ImportSubreportEx("Formulas", "rassdk://c:\\reports\\Formulas.rpt", sectionToAdd, 10, 10, 1000, 10);
            reportClientDocument.SubreportController.ImportSubreportEx("Formulas", "c:\\reports\\Formulas.rpt", sectionToAdd, 10, 10, 10, 10);
            //reportClientDocument.SubreportController.ImportSubreport("Formulas", "c:\\reports\\Formulas.rpt", sectionToAdd);
            //reportClientDocument.Close();
            rptSub.Close();
            IsRpt = false;
            ////4. I export the main report to pdf:
            //PrintOutputController rasPrintOutputController = reportClientDocument.PrintOutputController;
            //ByteArray tempByteArray = rasPrintOutputController.Export(CrReportExportFormatEnum.crReportExportFormatPDF, 0);
            //outputByteStream = tempByteArray.ByteArray;

            ////5. I dispose all resources of the main report and its subreports with
            //reportClient.Close();
            //if (Marshal.IsComObject(reportClient))
            //Marshal.ReleaseComObject(reportClient);

        }

        private void btnAddXMLDataSource_Click(object sender, EventArgs e)
        {
            //CrystalDecisions.CrystalReports.Engine.ReportDocument rpt = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            ISCDReportClientDocument rcd;

            rcd = rptClientDoc;
            rptClientDoc = rpt.ReportClientDocument;

            string connString = "Provider=SQLOLEDB;Server=10.161.15.19;Database=xtreme;User ID=sa;Password=1Oem2000";

            System.Data.DataSet thisDataSet = new System.Data.DataSet();

            //string sqlString = @"SELECT ""Orders"".""Order ID"", ""Orders"".""Order Amount"" FROM   ""xtreme"".""dbo"".""Orders"" ""Orders""";
            //string sqlString2 = @"SELECT ""Orders Detail"".""Order ID"", ""Orders Detail"".""Product ID"", ""Orders Detail"".""Unit Price"", ""Orders Detail"".""Quantity"" FROM   ""xtreme"".""dbo"".""Orders Detail"" ""Orders Detail""";

            //string sqlString = @"SELECT top 100*  ""Financials"".""Cash"" FROM  ""xtreme"".""dbo"".""Financials"" ""Financials""";
            string sqlString = @"SELECT top 3*  FROM  ""xtreme"".""dbo"".""Financials"" ""Financials""";


            System.Data.OleDb.OleDbConnection oleConn = new System.Data.OleDb.OleDbConnection(connString);
            System.Data.OleDb.OleDbCommand cmd = oleConn.CreateCommand();
            cmd.CommandText = sqlString;

            System.Data.DataSet ds = new System.Data.DataSet();

            OleDbDataAdapter oleAdapter = new OleDbDataAdapter(sqlString, oleConn);
            DataTable dt1 = new DataTable("Financials");

            oleAdapter.Fill(dt1);

            ds.Tables.Add(dt1);
            ds.WriteXml("c:\\reports\\sc2.xml", XmlWriteMode.WriteSchema);

            ////System.Data.DataSet ds = new System.Data.DataSet();
            //ds.Tables.Add(dt1);
            ////ds.Tables[0].DefaultView.Sort = "Contact Last Name";
            ////ds.Tables.Add(dt2);
            ////ds.WriteXml("c:\\sc.xml", XmlWriteMode.WriteSchema);
            //ds.WriteXml("c:\\Reports\\abc.xsd", XmlWriteMode.WriteSchema);
            //ds.WriteXml("c:\\Reports\\abc.xml", XmlWriteMode.IgnoreSchema);

            string myXMLfile = @"d:\\sc2.xml";
            System.Data.DataSet ds1 = new System.Data.DataSet();
            // Create new FileStream with which to read the schema.
            System.IO.FileStream fsReadXml = new System.IO.FileStream
                (myXMLfile, System.IO.FileMode.Open);
            try
            {
                ds1.ReadXml(fsReadXml);
                //dataGrid1.DataSource = ds;
                //dataGrid1.DataMember = "Cust";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
            finally
            {
                fsReadXml.Close();
            }

            //rptClientDoc.DatabaseController.Database.Tables.Add(ds1);

            // as long as the field names match exactly Cr has no problems setting report to a DS.
            try
            {
                rpt.SetDataSource(ds.Tables[0]);
                rpt.SetDataSource(ds);
            }
            catch (Exception ex)
            {
                MessageBox.Show("ERROR: Schema Mismatch. Error reported by CR: " + ex.Message);
            }

            ////Create a new Database Table to replace the reports current table.
            //CrystalDecisions.ReportAppServer.DataDefModel.Table boTable = new CrystalDecisions.ReportAppServer.DataDefModel.Table();

            ////boMainPropertyBag: These hold the attributes of the tables ConnectionInfo object
            //PropertyBag boMainPropertyBag = new PropertyBag();
            ////boInnerPropertyBag: These hold the attributes for the QE_LogonProperties
            ////In the main property bag (boMainPropertyBag)
            //PropertyBag boInnerPropertyBag = new PropertyBag();

            ////Set the attributes for the boInnerPropertyBag
            //boInnerPropertyBag.Add("File Path ", @"C:\sc.xml");
            //boInnerPropertyBag.Add("Internal Connection ID", "{680eee31-a16e-4f48-8efa-8765193dccdd}");

            ////Set the attributes for the boMainPropertyBag
            //boMainPropertyBag.Add("Database DLL", "crdb_xml.dll");
            //boMainPropertyBag.Add("QE_DatabaseName", "");
            //boMainPropertyBag.Add("QE_DatabaseType", "");
            ////Add the QE_LogonProperties we set in the boInnerPropertyBag Object
            //boMainPropertyBag.Add("QE_LogonProperties", boInnerPropertyBag);
            //boMainPropertyBag.Add("QE_ServerDescription", "NewDataSet");
            //boMainPropertyBag.Add("QE_SQLDB", "False");
            //boMainPropertyBag.Add("SSO Enabled", "False");

            ////Create a new ConnectionInfo object
            //CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo boConnectionInfo =
            //new CrystalDecisions.ReportAppServer.DataDefModel.ConnectionInfo();
            ////Pass the database properties to a connection info object
            //boConnectionInfo.Attributes = boMainPropertyBag;
            ////Set the connection kind
            //boConnectionInfo.Kind = CrConnectionInfoKindEnum.crConnectionInfoKindCRQE;
            ////**EDIT** Set the User Name and Password if required.
            //boConnectionInfo.UserName = "";
            //boConnectionInfo.Password = "";
            ////Pass the connection information to the table
            //boTable.ConnectionInfo = boConnectionInfo;

            ////Get the Database Tables Collection for your report
            //CrystalDecisions.ReportAppServer.DataDefModel.Tables boTables;
            //boTables = rptClientDoc.DatabaseController.Database.Tables;

            ////For each table in the report:
            //// - Set the Table Name properties.
            //// - Set the table location in the report to use the new modified table
            //boTable.Name = "Orders";
            //boTable.QualifiedName = "Orders";
            //boTable.Alias = "Orders";

            //rptClientDoc.DatabaseController.SetTableLocation(boTables[0], boTable);

            ////Verify the database after adding substituting the new table.
            ////To ensure that the table updates properly when adding Command tables or Stored Procedures.
            //rptClientDoc.VerifyDatabase();
            MessageBox.Show("Data Source Set", "RAS", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        
    }
}